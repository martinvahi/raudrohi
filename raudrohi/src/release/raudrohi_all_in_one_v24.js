// ===========================================================================
// =============  Raudrohi JavaScript Library (RJSL) License  ================
// ===========================================================================
// 
// The RJSL code that has been written by 
// the martin.vahi@softf1.com that has 
// an Estonian personal identification code of 38108050020 
// is under the BSD license. 
// 
// All of the sub-parts of the RJSL that have not been written by 
// the Martin Vahi (the article "the" is due to the fact that there are more 
// than on persons named Martin Vahi on planet Earth), have licenses
// that are compatible with the BSD license. BSD license is considered to 
// be compatible with itself.
// 
//  
// ---------------------------------------------------------------------------
//   (BSD) License of the Raudrohi Javascript Library (RJSL) Specific code
// ---------------------------------------------------------------------------
// 
//  Copyright (c) <all years from 2007 till 3000>, 
//  martin.vahi@softf1.com that has an
//  Estonian personal identification code of 38108050020.
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or
//  without modification, are permitted provided that the following
//  conditions are met:
// 
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer
//    in the documentation and/or other materials provided with the
//    distribution.
//  * Neither the name of the Martin Vahi nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
//  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
//  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
//  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
//  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
//  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// ---------------------------------------------------------------------------
//            License of the Yahoo YUI Library (BSD and MIT licenses)
// ---------------------------------------------------------------------------
// 
// Software License Agreement (BSD License)
// Copyright Â© 2012 Yahoo! Inc. All rights reserved.
// Redistribution and use of this software in source and binary forms, 
// with or without modification, are permitted provided 
// that the following conditions are met:
// 
// Redistributions of source code must retain the above copyright notice, 
// this list of conditions and the following disclaimer.
// 
// Redistributions in binary form must reproduce the above copyright notice, 
// this list of conditions and the following disclaimer in the documentation 
// and/or other materials provided with the distribution.
// 
// Neither the name of Yahoo! Inc. nor the names of YUI's contributors 
// may be used to endorse or promote products derived from 
// this software without specific prior written permission of Yahoo! Inc.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
// BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL 
// THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
// 
// Sources of Intellectual Property Included in the YUI Library
// YUI is issued by Yahoo! under the BSD license above. 
// Below is a list of certain publicly available software that is 
// the source of intellectual property in YUI, along with the licensing terms 
// that pertain to those sources of IP. This list is for 
// informational purposes only and is not intended to represent 
// an exhaustive list of third party contributions to YUI.
// 
// Douglas Crockford's JSON parsing and stringifying methods: 
// In the JSON Utility, Douglas Crockford's JSON parsing and 
// stringifying methods are adapted from work published at JSON.org. 
// The adapted work is in the public domain.
// 
// Robert Penner's animation-easing algorithms: 
// In the Animation Utility, YUI makes use of 
// Robert Penner's algorithms for easing.
// 
// Geoff Stearns's SWFObject: 
// In the Charts Control and the Uploader versions through 2.7.0, 
// YUI makes use of Geoff Stearns's SWFObject v1.5 for Flash Player detection 
// and embedding. More information on SWFObject can be found at 
// http://blog.deconcept.com/swfobject/. 
// SWFObject is (c) 2007 Geoff Stearns and is released under the 
// MIT License (http://www.opensource.org/licenses/mit-license.php).
// 
// Diego Perini's IEContentLoaded technique: 
// The Event Utility employs a technique developed by Diego Perini and 
// licensed under GPL. YUI's use of this technique is included under 
// our BSD license with the author's permission.
// 
// Yehuda Katz's Handlebars.js: 
// YUI includes a wrapped version of Handlebars in our distribution. 
// Handlebars.js is licensed under the MIT license which is 
// in compliance with YUI's BSD license.
// 
// ---------------------------------------------------------------------------
//         License of the pre3d JavaScript 3D Enginge (BSD license)
// ---------------------------------------------------------------------------
// 
// Pre3d, a JavaScript software 3d renderer.
// (c) Dean McNamee <dean@gmail.com>, Dec 2008.
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE. 
// 
// ---------------------------------------------------------------------------
// 
// ===========================================================================
// 

// Pre3d, a JavaScript software 3d renderer.
// (c) Dean McNamee <dean@gmail.com>, Dec 2008.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//
// Here are a few notes about what was involved in making this code fast.
//
// - Being careful about painting The engine works in quads, 4 vertices per
//   face, no restriction on being coplanar, or on triangles.  If we were to
//   work only in triangles, we would have to do twice as many paints and
//   longer sorts, since we would double the polygon count.
//
//   Depending on the underlying rasterization system, strokes can be pretty
//   slow, slower than fills.  This is why overdraw is not a stroke.
//
// - Objects over Arrays
//   Because Arrays always go through the key lookup path (a[0] is a['0']), and
//   there is no way to do a named lookup (like a.0), it is faster to use
//   objects than arrays for fixed size storage.  You can think of this like
//   the difference between a List and Tuple in languages like python.  Modern
//   engines can do a better job accessing named properties, so we represented
//   our data as objects.  Profiling showed a huge difference, keyed lookup
//   used to be the most expensive operation in profiling, taking around ~5%.
//
//   There is also a performance (and convenience) balance betweening object
//   literals and constructor functions.  Small and obvious structures like
//   points have no constructor, and are expected to be created as object
//   literals.  Objects with many properties are created through a constructor.
//
// - Object creation / GC pressure
//   One of the trickiest things about a language like JavaScript is avoiding
//   long GC pauses and object churn.  You can do things like cache and reuse
//   objects, avoid creating extra intermediate objects, etc.  Right now there
//   has been a little bit of work done here, but there is more to be done.
//
// - Flattening
//   It is very tempting as a programmer to write generic routines, for example
//   math functions that could work on either 2d or 3d.  This is convenient,
//   but the caller already knows which they should be using, and the extra
//   overhead for generic routines turned out to be substantial.  Unrolling
//   specialized code makes a big difference, for example an early profile:
//   before:    2.5%    2.5%   Function: subPoints    // old general 2d and 3d
//   after:     0.3%    0.3%   Function: subPoints2d  // fast case 2d
//   after:     0.2%    0.2%   Function: subPoints3d  // fast case 3d
//
// - Don't use new if you don't have to
//   Some profiles showed that new (JSConstructCall) at about ~1%.  These were
//   for code like new Array(size);  Specifically for the Array constructor, it
//   ignores the object created and passed in via new, and returns a different
//   object anyway.  This means 'new Array()' and 'Array()' should be
//   interchangable, and this allows you to avoid the overhead for new.
//
// - Local variable caching
//   In most cases it should be faster to look something up in the local frame
//   than to evaluate the expression / lookup more than once.  In these cases
//   I generally try to cache the variable in a local var.
//
// You might notice that in a few places there is code like:
//   Blah.protype.someMethod = function someMethod() { }
// someMethod is duplicated on the function so that the name of the function
// is not anonymous, and it can be easier to debug and profile.

var Pre3d = (function() {

  // 2D and 3D point / vector / matrix math.  Points and vectors are expected
  // to have an x, y and z (if 3d) property.  It is important to be consistent
  // when creating these objects to allow the JavaScript engine to properly
  // optimize the property access.  Create this as object literals, ex:
  //   var my_2d_point_or_vector = {x: 0, y: 0};
  //   var my_3d_point_or_vector = {x: 0, y: 0, z: 0};
  //
  // There is one convention that might be confusing.  In order to avoid extra
  // object creations, there are some "IP" versions of these functions.  This
  // stands for "in place", and they write the result to one of the arguments.

  function crossProduct(a, b) {
    // a1b2 - a2b1, a2b0 - a0b2, a0b1 - a1b0
    return {
      x: a.y * b.z - a.z * b.y,
      y: a.z * b.x - a.x * b.z,
      z: a.x * b.y - a.y * b.x
    };
  }

  function dotProduct2d(a, b) {
    return a.x * b.x + a.y * b.y;
  }
  function dotProduct3d(a, b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
  }

  // a - b
  function subPoints2d(a, b) {
    return {x: a.x - b.x, y: a.y - b.y};
  }
  function subPoints3d(a, b) {
    return {x: a.x - b.x, y: a.y - b.y, z: a.z - b.z};
  }

  // c = a - b
  function subPoints2dIP(c, a, b) {
    c.x = a.x - b.x;
    c.y = a.y - b.y;
    return c;
  }
  function subPoints3dIP(c, a, b) {
    c.x = a.x - b.x;
    c.y = a.y - b.y;
    c.z = a.z - b.z;
    return c;
  }

  // a + b
  function addPoints2d(a, b) {
    return {x: a.x + b.x, y: a.y + b.y};
  }
  function addPoints3d(a, b) {
    return {x: a.x + b.x, y: a.y + b.y, z: a.z + b.z};
  }

  // c = a + b
  function addPoints2dIP(c, a, b) {
    c.x = a.x + b.x;
    c.y = a.y + b.y;
    return c;
  }
  function addPoints3dIP(c, a, b) {
    c.x = a.x + b.x;
    c.y = a.y + b.y;
    c.z = a.z + b.z;
    return c;
  }

  // a * s
  function mulPoint2d(a, s) {
    return {x: a.x * s, y: a.y * s};
  }
  function mulPoint3d(a, s) {
    return {x: a.x * s, y: a.y * s, z: a.z * s};
  }

  // |a|
  function vecMag2d(a) {
    var ax = a.x, ay = a.y;
    return Math.sqrt(ax * ax + ay * ay);
  }
  function vecMag3d(a) {
    var ax = a.x, ay = a.y, az = a.z;
    return Math.sqrt(ax * ax + ay * ay + az * az);
  }

  // a / |a|
  function unitVector2d(a) {
    return mulPoint2d(a, 1 / vecMag2d(a));
  }
  function unitVector3d(a) {
    return mulPoint3d(a, 1 / vecMag3d(a));
  }

  // Linear interpolation on the line along points (0, |a|) and (1, |b|).  The
  // position |d| is the x coordinate, where 0 is |a| and 1 is |b|.
  function linearInterpolate(a, b, d) {
    return (b-a)*d + a;
  }

  // Linear interpolation on the line along points |a| and |b|.  |d| is the
  // position, where 0 is |a| and 1 is |b|.
  function linearInterpolatePoints3d(a, b, d) {
    return {
      x: (b.x-a.x)*d + a.x,
      y: (b.y-a.y)*d + a.y,
      z: (b.z-a.z)*d + a.z
    }
  }

  // This represents an affine 4x4 matrix, stored as a 3x4 matrix with the last
  // row implied as [0, 0, 0, 1].  This is to avoid generally unneeded work,
  // skipping part of the homogeneous coordinates calculations and the
  // homogeneous divide.  Unlike points, we use a constructor function instead
  // of object literals to ensure map sharing.  The matrix looks like:
  //  e0  e1  e2  e3
  //  e4  e5  e6  e7
  //  e8  e9  e10 e11
  //  0   0   0   1
  function AffineMatrix(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11) {
    this.e0  = e0;
    this.e1  = e1;
    this.e2  = e2;
    this.e3  = e3;
    this.e4  = e4;
    this.e5  = e5;
    this.e6  = e6;
    this.e7  = e7;
    this.e8  = e8;
    this.e9  = e9;
    this.e10 = e10;
    this.e11 = e11;
  };

  // Matrix multiplication of AffineMatrix |a| x |b|.  This is unrolled,
  // and includes the calculations with the implied last row.
  function multiplyAffine(a, b) {
    // Avoid repeated property lookups by accessing into the local frame.
    var a0 = a.e0, a1 = a.e1, a2 = a.e2, a3 = a.e3, a4 = a.e4, a5 = a.e5;
    var a6 = a.e6, a7 = a.e7, a8 = a.e8, a9 = a.e9, a10 = a.e10, a11 = a.e11;
    var b0 = b.e0, b1 = b.e1, b2 = b.e2, b3 = b.e3, b4 = b.e4, b5 = b.e5;
    var b6 = b.e6, b7 = b.e7, b8 = b.e8, b9 = b.e9, b10 = b.e10, b11 = b.e11;

    return new AffineMatrix(
      a0 * b0 + a1 * b4 + a2 * b8,
      a0 * b1 + a1 * b5 + a2 * b9,
      a0 * b2 + a1 * b6 + a2 * b10,
      a0 * b3 + a1 * b7 + a2 * b11 + a3,
      a4 * b0 + a5 * b4 + a6 * b8,
      a4 * b1 + a5 * b5 + a6 * b9,
      a4 * b2 + a5 * b6 + a6 * b10,
      a4 * b3 + a5 * b7 + a6 * b11 + a7,
      a8 * b0 + a9 * b4 + a10 * b8,
      a8 * b1 + a9 * b5 + a10 * b9,
      a8 * b2 + a9 * b6 + a10 * b10,
      a8 * b3 + a9 * b7 + a10 * b11 + a11
    );
  }

  function makeIdentityAffine() {
    return new AffineMatrix(
      1, 0, 0, 0,
      0, 1, 0, 0,
      0, 0, 1, 0
    );
  }

  // http://en.wikipedia.org/wiki/Rotation_matrix
  function makeRotateAffineX(theta) {
    var s = Math.sin(theta);
    var c = Math.cos(theta);
    return new AffineMatrix(
      1, 0,  0, 0,
      0, c, -s, 0,
      0, s,  c, 0
    );
  }

  function makeRotateAffineY(theta) {
    var s = Math.sin(theta);
    var c = Math.cos(theta);
    return new AffineMatrix(
       c, 0, s, 0,
       0, 1, 0, 0,
      -s, 0, c, 0
    );
  }

  function makeRotateAffineZ(theta) {
    var s = Math.sin(theta);
    var c = Math.cos(theta);
    return new AffineMatrix(
      c, -s, 0, 0,
      s,  c, 0, 0,
      0,  0, 1, 0
    );
  }

  function makeTranslateAffine(dx, dy, dz) {
    return new AffineMatrix(
      1, 0, 0, dx,
      0, 1, 0, dy,
      0, 0, 1, dz
    );
  }

  function makeScaleAffine(sx, sy, sz) {
    return new AffineMatrix(
      sx,  0,  0, 0,
       0, sy,  0, 0,
       0,  0, sz, 0
    );
  }

  // Return a copy of the affine matrix |m|.
  function dupAffine(m) {
    return new AffineMatrix(
        m.e0, m.e1, m.e2, m.e3,
        m.e4, m.e5, m.e6, m.e7,
        m.e8, m.e9, m.e10, m.e11);
  }

  // Return the transpose of the inverse done via the classical adjoint.  This
  // skips division by the determinant, so vectors transformed by the resulting
  // transform will not retain their original length.
  // Reference: "Transformations of Surface Normal Vectors" by Ken Turkowski.
  function transAdjoint(a) {
    var a0 = a.e0, a1 = a.e1, a2 = a.e2, a4 = a.e4, a5 = a.e5;
    var a6 = a.e6, a8 = a.e8, a9 = a.e9, a10 = a.e10;
    return new AffineMatrix(
      a10 * a5 - a6 * a9,
      a6 * a8 - a4 * a10,
      a4 * a9 - a8 * a5,
      0,
      a2 * a9 - a10 * a1,
      a10 * a0 - a2 * a8,
      a8 * a1 - a0 * a9,
      0,
      a6 * a1 - a2 * a5,
      a4 * a2 - a6 * a0,
      a0 * a5 - a4 * a1,
      0
    );
  }

  // Transform the point |p| by the AffineMatrix |t|.
  function transformPoint(t, p) {
    return {
      x: t.e0 * p.x + t.e1 * p.y + t.e2  * p.z + t.e3,
      y: t.e4 * p.x + t.e5 * p.y + t.e6  * p.z + t.e7,
      z: t.e8 * p.x + t.e9 * p.y + t.e10 * p.z + t.e11
    };
  }

  // A Transform is a convenient wrapper around a AffineMatrix, and it is what
  // will be exposed for most transforms (camera, etc).
  function Transform() {
    this.reset();
  }

  // Reset the transform to the identity matrix.
  Transform.prototype.reset = function() {
    this.m = makeIdentityAffine();
  };

  // TODO(deanm): We are creating two extra objects here.  What would be most
  // effecient is something like multiplyAffineByRotateXIP(this.m), etc.
  Transform.prototype.rotateX = function(theta) {
    this.m =
        multiplyAffine(makeRotateAffineX(theta), this.m);
  };
  Transform.prototype.rotateXPre = function(theta) {
    this.m =
        multiplyAffine(this.m, makeRotateAffineX(theta));
  };

  Transform.prototype.rotateY = function(theta) {
    this.m =
        multiplyAffine(makeRotateAffineY(theta), this.m);
  };
  Transform.prototype.rotateYPre = function(theta) {
    this.m =
        multiplyAffine(this.m, makeRotateAffineY(theta));
  };

  Transform.prototype.rotateZ = function(theta) {
    this.m =
        multiplyAffine(makeRotateAffineZ(theta), this.m);
  };
  Transform.prototype.rotateZPre = function(theta) {
    this.m =
        multiplyAffine(this.m, makeRotateAffineZ(theta));
  };

  Transform.prototype.translate = function(dx, dy, dz) {
    this.m =
        multiplyAffine(makeTranslateAffine(dx, dy, dz), this.m);
  };
  Transform.prototype.translatePre = function(dx, dy, dz) {
    this.m =
        multiplyAffine(this.m, makeTranslateAffine(dx, dy, dz));
  };

  Transform.prototype.scale = function(sx, sy, sz) {
    this.m =
        multiplyAffine(makeScaleAffine(sx, sy, sz), this.m);
  };

  Transform.prototype.scalePre = function(sx, sy, sz) {
    this.m =
        multiplyAffine(this.m, makeScaleAffine(sx, sy, sz));
  };

  Transform.prototype.transformPoint = function(p) {
    return transformPoint(this.m, p);
  };

  Transform.prototype.multTransform = function(t) {
    this.m = multiplyAffine(this.m, t.m);
  };

  Transform.prototype.setDCM = function(u, v, w) {
    var m = this.m;
    m.e0 = u.x; m.e4 = u.y; m.e8 = u.z;
    m.e1 = v.x; m.e5 = v.y; m.e9 = v.z;
    m.e2 = w.x; m.e6 = w.y; m.e10 = w.z;
  };

  Transform.prototype.dup = function() {
    // TODO(deanm): This should be better.
    var tm = new Transform();
    tm.m = dupAffine(this.m);
    return tm;
  };

  // Transform and return a new array of points with transform matrix |t|.
  function transformPoints(t, ps) {
    var il = ps.length;
    var out = Array(il);
    for (var i = 0; i < il; ++i) {
      out[i] = transformPoint(t, ps[i]);
    }
    return out;
  }

  // Average a list of points, returning a new "centroid" point.
  function averagePoints(ps) {
    var avg = {x: 0, y: 0, z: 0};
    for (var i = 0, il = ps.length; i < il; ++i) {
      var p = ps[i];
      avg.x += p.x;
      avg.y += p.y;
      avg.z += p.z;
    }

    // TODO(deanm): 1 divide and 3 multiplies cheaper than 3 divides?
    var f = 1 / il;

    avg.x *= f;
    avg.y *= f;
    avg.z *= f;

    return avg;
  }

  // Push a and b away from each other.  This means that the distance between
  // a and be should be greater, by 2 units, 1 in each direction.
  function pushPoints2dIP(a, b) {
    var vec = unitVector2d(subPoints2d(b, a));
    addPoints2dIP(b, b, vec);
    subPoints2dIP(a, a, vec);
  }

  // RGBA is our simple representation for colors.
  function RGBA(r, g, b, a) {
    this.setRGBA(r, g, b, a);
  };

  RGBA.prototype.setRGBA = function(r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
  };

  RGBA.prototype.setRGB = function(r, g, b) {
    this.setRGBA(r, g, b, 1);
  };

  RGBA.prototype.invert = function() {
    this.r = 1 - this.r;
    this.g = 1 - this.g;
    this.b = 1 - this.b;
  };

  RGBA.prototype.dup = function() {
    return new RGBA(this.r, this.g, this.b, this.a);
  };

  // A QuadFace represents a polygon, either a four sided quad, or sort of a
  // degenerated quad triangle.  Passing null as i3 indicates a triangle.  The
  // QuadFace stores indices, which will generally point into some vertex list
  // that the QuadFace has nothing to do with.  At the annoyance of keeping
  // the data up to date, QuadFace stores a pre-calculated centroid and two
  // normals (two triangles in a quad).  This is an optimization for rendering
  // and procedural operations, and you must set them correctly.
  // NOTE: The front of a QuadFace has vertices in counter-clockwise order.
  function QuadFace(i0, i1, i2, i3) {
    this.i0 = i0;
    this.i1 = i1;
    this.i2 = i2;
    this.i3 = i3;

    this.centroid = null;
    this.normal1 = null;
    this.normal2 = null;
  }

  QuadFace.prototype.isTriangle = function() {
    return (this.i3 === null);
  };

  QuadFace.prototype.setQuad = function(i0, i1, i2, i3) {
    this.i0 = i0;
    this.i1 = i1;
    this.i2 = i2;
    this.i3 = i3;
  };

  QuadFace.prototype.setTriangle = function(i0, i1, i2) {
    this.i0 = i0;
    this.i1 = i1;
    this.i2 = i2;
    this.i3 = null;
  };

  // A Shape represents a mesh, a collection of QuadFaces.  The Shape stores
  // a list of all vertices (so they can be shared across QuadFaces), and the
  // QuadFaces store indices into this list.
  //
  // All properties of shapes are meant to be public, so access them directly.
  function Shape() {
    // Array of 3d points, our vertices.
    this.vertices = [ ];
    // Array of QuadFaces, the indices will point into |vertices|.
    this.quads = [ ];
  }

  // A curve represents a bezier curve, either quadratic or cubic.  It is
  // the QuadFace equivalent for 3d paths.  Like QuadFace, the points are
  // indices into a Path.
  function Curve(ep, c0, c1) {
    this.ep = ep;  // End point.
    this.c0 = c0;  // Control point.
    this.c1 = c1;  // Control point.
  }

  Curve.prototype.isQuadratic = function() {
    return (this.c1 === null);
  };

  Curve.prototype.setQuadratic = function(ep, c0) {
    this.ep = ep;
    this.c0 = c0;
    this.c1 = null;
  };

  Curve.prototype.setCubic = function(ep, c0, c1) {
    this.ep = ep;
    this.c0 = c0;
    this.c1 = c1;
  };

  // A path is a collection of Curves.  The path starts implicitly at
  // (0, 0, 0), and then continues along each curve, each piece of curve
  // continuing where the last left off, forming a continuous path.
  function Path() {
    // An array of points.
    this.points = [ ];
    // The Curves index into points.
    this.curves = [ ];
    // Optional starting point.  If this is null, the path will start at the
    // origin (0, 0, 0).  Otherwise this is an index into points.
    this.starting_point = null;
  }

  // A camera is represented by a transform, and a focal length.
  function Camera() {
    this.transform = new Transform();
    this.focal_length = 1;
  }

  // TextureInfo is used to describe when and how a QuadFace should be
  // textured.  |image| should be something drawable by <canvas>, like a <img>
  // or another <canvas> element.  This also stores the 2d uv coordinates.
  function TextureInfo() {
    this.image = null;
    this.u0 = null;
    this.v0 = null;
    this.u1 = null;
    this.v1 = null;
    this.u2 = null;
    this.v2 = null;
    this.u3 = null;
    this.v3 = null;
  };

  // This is the guts, drawing 3d onto a <canvas> element.  This class does a
  // few things:
  //   - Manage the render state, things like colors, transforms, camera, etc.
  //   - Manage a buffer of quads to be drawn.  When you add something to be
  //     drawn, it will use the render state at the time it was added.  The
  //     pattern is generally to add some things, modify the render state, add
  //     some more things, change some colors, add some more, than draw.
  //     NOTE: The reason for buffering is having to z-sort.  We do not perform
  //     the rasterization, so something like a z-buffer isn't applicable.
  //   - Draw the buffer of things to be drawn.  This will do a background
  //     color paint, render all of the buffered quads to the screen, etc.
  //
  // NOTE: Drawing does not clear the buffered quads, so you can keep drawing
  // and adding more things and drawing, etc.  You must explicitly empty the
  // things to be drawn when you want to start fresh.
  //
  // NOTE: Some things, such as colors, as copied into the buffered state as
  // a reference.  If you want to update the color on the render state, you
  // should replace it with a new color.  Modifying the original will modify
  // it for objects that have already been buffered.  Same holds for textures.
  function Renderer(canvas_element) {
    // Should we z-sort for painters back to front.
    this.perform_z_sorting = true;
    // Should we inflate quads to visually cover up antialiasing gaps.
    this.draw_overdraw = true;
    // Should we skip backface culling.
    this.draw_backfaces = false;

    this.texture = null;
    this.fill_rgba = new RGBA(1, 0, 0, 1);

    this.stroke_rgba = null;

    this.normal1_rgba = null;
    this.normal2_rgba = null;

    this.canvas = canvas_element;
    this.ctx = canvas_element.getContext('2d');

    // The camera.
    this.camera = new Camera();

    // Object to world coordinates transformation.
    this.transform = new Transform();

    // Used for pushTransform and popTransform.  The current transform is
    // always r.transform, and the stack holds anything else.  Internal.
    this.transform_stack_ = [ ];

    // A callback before a QuadFace is processed during bufferShape.  This
    // allows you to change the render state per-quad, and also to skip a quad
    // by returning true from the callback.  For example:
    //   renderer.quad_callback = function(quad_face, quad_index, shape) {
    //     renderer.fill_rgba.r = quad_index * 40;
    //     return false;  // Don't skip this quad.
    //   };
    this.quad_callback = null;

    // Internals, don't access me.
    this.width_  = canvas_element.width;
    this.height_ = canvas_element.height;
    this.scale_ = this.height_ / 2;
    this.xoff_ = this.width_ / 2;

    this.buffered_quads_ = null;
    this.emptyBuffer();

    // We prefer these functions as they avoid the CSS color parsing path, but
    // if they're not available (Firefox), then augment the ctx to fall back.
    if (this.ctx.setStrokeColor == null) {
      this.ctx.setStrokeColor = function setStrokeColor(r, g, b, a) {
        var rgba = [
          Math.floor(r * 255),
          Math.floor(g * 255),
          Math.floor(b * 255),
          a
        ];
        this.strokeStyle = 'rgba(' + rgba.join(',') + ')';
      }
    }
    if (this.ctx.setFillColor == null) {
      this.ctx.setFillColor = function setFillColor(r, g, b, a) {
        var rgba = [
          Math.floor(r * 255),
          Math.floor(g * 255),
          Math.floor(b * 255),
          a
        ];
        this.fillStyle = 'rgba(' + rgba.join(',') + ')';
      }
    }
  }

  Renderer.prototype.pushTransform = function() {
    this.transform_stack_.push(this.transform.dup());
  };

  Renderer.prototype.popTransform = function() {
    // If the stack is empty we'll end up with undefined as the transform.
    this.transform = this.transform_stack_.pop();
  };

  Renderer.prototype.emptyBuffer = function() {
    this.buffered_quads_ = [ ];
  };

  // TODO(deanm): Pull the project stuff off the class if possible.

  // http://en.wikipedia.org/wiki/Pinhole_camera_model
  //
  // Project the 3d point |p| to a point in 2d.
  // Takes the current focal_length_ in account.
  Renderer.prototype.projectPointToCanvas = function projectPointToCanvas(p) {
    // We're looking down the z-axis in the negative direction...
    var v = this.camera.focal_length / -p.z;
    var scale = this.scale_;
    // Map the height to -1 .. 1, and the width to maintain aspect.
    return {x: p.x * v * scale + this.xoff_,
            y: p.y * v * -scale + scale};
  };

  // Project a 3d point onto the 2d canvas surface (pixel coordinates).
  // Takes the current focal_length in account.
  // TODO: flatten this calculation so we don't need make a method call.
  Renderer.prototype.projectPointsToCanvas =
      function projectPointsToCanvas(ps) {
    var il = ps.length;
    var out = Array(il);
    for (var i = 0; i < il; ++i) {
      out[i] = this.projectPointToCanvas(ps[i]);
    }
    return out;
  };

  Renderer.prototype.projectQuadFaceToCanvasIP = function(qf) {
    qf.i0 = this.projectPointToCanvas(qf.i0);
    qf.i1 = this.projectPointToCanvas(qf.i1);
    qf.i2 = this.projectPointToCanvas(qf.i2);
    if (!qf.isTriangle())
      qf.i3 = this.projectPointToCanvas(qf.i3);
    return qf;
  };

  // Textured triangle drawing by Thatcher Ulrich.  Draw a triangle portion of
  // an image, with the source (uv coordinates) mapped to screen x/y
  // coordinates.  A transformation matrix for this mapping is calculated, so
  // that the image |im| is rotated / scaled / etc to map to the x/y dest.  A
  // clipping mask is applied when drawing |im|, so only the triangle is drawn.
  function drawCanvasTexturedTriangle(ctx, im,
                                      x0, y0, x1, y1, x2, y2,
                                      sx0, sy0, sx1, sy1, sx2, sy2) {
    ctx.save();

    // Clip the output to the on-screen triangle boundaries.
    ctx.beginPath();
    ctx.moveTo(x0, y0);
    ctx.lineTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.closePath();
    ctx.clip();

    var denom =
        sx0 * (sy2 - sy1) -
        sx1 * sy2 +
        sx2 * sy1 +
        (sx1 - sx2) * sy0;

    var m11 = - (
        sy0 * (x2 - x1) -
        sy1 * x2 +
        sy2 * x1 +
        (sy1 - sy2) * x0) / denom;
    var m12 = (
        sy1 * y2 +
        sy0 * (y1 - y2) -
        sy2 * y1 +
        (sy2 - sy1) * y0) / denom;
    var m21 = (
        sx0 * (x2 - x1) -
        sx1 * x2 +
        sx2 * x1 +
        (sx1 - sx2) * x0) / denom;
    var m22 = - (
        sx1 * y2 +
        sx0 * (y1 - y2) -
        sx2 * y1 +
        (sx2 - sx1) * y0) / denom;
    var dx = (
        sx0 * (sy2 * x1 - sy1 * x2) +
        sy0 * (sx1 * x2 - sx2 * x1) +
        (sx2 * sy1 - sx1 * sy2) * x0) / denom;
    var dy = (
        sx0 * (sy2 * y1 - sy1 * y2) +
        sy0 * (sx1 * y2 - sx2 * y1) +
        (sx2 * sy1 - sx1 * sy2) * y0) / denom;

    ctx.transform(m11, m12, m21, m22, dx, dy);

    // Draw the whole image.  Transform and clip will map it onto the
    // correct output triangle.
    //
    // TODO(tulrich): figure out if drawImage goes faster if we specify the
    // rectangle that bounds the source coords.
    ctx.drawImage(im, 0, 0);
    ctx.restore();
  }

  // A unit vector down the z-axis.
  var g_z_axis_vector = {x: 0, y: 0, z: 1};

  // Put a shape into the draw buffer, transforming it by the current camera,
  // applying any current render state, etc.
  Renderer.prototype.bufferShape = function bufferShape(shape) {
    var draw_backfaces = this.draw_backfaces;
    var quad_callback = this.quad_callback;

    // Our vertex transformation matrix.
    var t = multiplyAffine(this.camera.transform.m,
                           this.transform.m);
    // Our normal transformation matrix.
    var tn = transAdjoint(t);

    // We are transforming the points even if we decide it's back facing.
    // We could just transform the normal, and then only transform the
    // points if we needed it.  But then you need to check to see if the
    // point was already translated to avoid duplicating work, or just
    // always calculate it and duplicate the work.  Not sure what's best...
    var world_vertices = transformPoints(t, shape.vertices);
    var quads = shape.quads;

    for (var j = 0, jl = shape.quads.length; j < jl; ++j) {
      var qf = quads[j];

      // Call the optional quad callback.  This gives a chance to update the
      // render state per-quad, before we emit into the buffered quads.  It
      // also gives the earliest chance to skip a quad.
      if (quad_callback !== null && quad_callback(qf, j, shape) === true)
        continue;

      var centroid = transformPoint(t, qf.centroid);

      // Cull quads that are behind the camera.
      // TODO(deanm): this should probably involve the focal point?
      if (centroid.z >= -1)
        continue;

      // NOTE: The transform tn isn't going to always keep the vectors unit
      // length, so n1 and n2 should be normalized if needed.
      // We unit vector n1 (for lighting, etc).
      var n1 = unitVector3d(transformPoint(tn, qf.normal1));
      var n2 = transformPoint(tn, qf.normal2);

      // Backface culling.  I'm not sure the exact right way to do this, but
      // this seems to look ok, following the eye from the origin.  We look
      // at the normals of the triangulated quad, and make sure at least one
      // is point towards the camera...
      if (draw_backfaces !== true &&
          dotProduct3d(centroid, n1) > 0 &&
          dotProduct3d(centroid, n2) > 0) {
        continue;
      }

      // Lighting intensity is just based on just one of the normals pointing
      // towards the camera.  Should do something better here someday...
      var intensity = dotProduct3d(g_z_axis_vector, n1);
      if (intensity < 0)
        intensity = 0;

      // We map the quad into world coordinates, and also replace the indices
      // with the actual points.
      var world_qf;

      if (qf.isTriangle() === true) {
        world_qf = new QuadFace(
          world_vertices[qf.i0],
          world_vertices[qf.i1],
          world_vertices[qf.i2],
          null
        );
      } else {
        world_qf = new QuadFace(
          world_vertices[qf.i0],
          world_vertices[qf.i1],
          world_vertices[qf.i2],
          world_vertices[qf.i3]
        );
      }

      world_qf.centroid = centroid;
      world_qf.normal1 = n1;
      world_qf.normal2 = n2;

      var obj = {
        qf: world_qf,
        intensity: intensity,
        draw_overdraw: this.draw_overdraw,
        texture: this.texture,
        fill_rgba: this.fill_rgba,
        stroke_rgba: this.stroke_rgba,
        normal1_rgba: this.normal1_rgba,
        normal2_rgba: this.normal2_rgba
      };

      this.buffered_quads_.push(obj);
    }
  };

  // Sort an array of points by z axis.
  function zSorter(x, y) {
    return x.qf.centroid.z - y.qf.centroid.z;
  }

  // Paint the background.  You should setup the fill color on ctx.
  Renderer.prototype.drawBackground = function() {
    this.ctx.fillRect(0, 0, this.width_, this.height_);
  };

  // Clear the background so the canvas is transparent.
  Renderer.prototype.clearBackground = function() {
    this.ctx.clearRect(0, 0, this.width_, this.height_);
  };

  Renderer.prototype.drawBuffer = function drawBuffer() {
    var ctx = this.ctx;

    var all_quads = this.buffered_quads_;
    var num_quads = all_quads.length;

    // Sort the quads by z-index for painters algorithm :(
    // We're looking down the z-axis in the negative direction, so we want
    // to paint the most negative z quads first.
    if (this.perform_z_sorting === true)
      all_quads.sort(zSorter);

    for (var j = 0; j < num_quads; ++j) {
      var obj = all_quads[j];
      var qf = obj.qf;

      this.projectQuadFaceToCanvasIP(qf);

      var is_triangle = qf.isTriangle();

      if (obj.draw_overdraw === true) {
        // Unfortunately when we fill with canvas, we can get some gap looking
        // things on the edges between quads.  One possible solution is to
        // stroke the path, but this turns out to be really expensive.  Instead
        // we try to increase the area of the quad.  Each edge pushes its
        // vertices away from each other.  This is sort of similar in concept
        // to the builtin canvas shadow support (shadowOffsetX, etc).  However,
        // Chrome doesn't support shadows correctly now.  It does in trunk, but
        // using shadows to fill the gaps looks awful, and also seems slower.

        pushPoints2dIP(qf.i0, qf.i1);
        pushPoints2dIP(qf.i1, qf.i2);
        if (is_triangle === true) {
          pushPoints2dIP(qf.i2, qf.i0);
        } else {  // Quad.
          pushPoints2dIP(qf.i2, qf.i3);
          pushPoints2dIP(qf.i3, qf.i0);
        }
      }

      // Create our quad as a <canvas> path.
      ctx.beginPath();
      ctx.moveTo(qf.i0.x, qf.i0.y);
      ctx.lineTo(qf.i1.x, qf.i1.y);
      ctx.lineTo(qf.i2.x, qf.i2.y);
      if (is_triangle !== true)
        ctx.lineTo(qf.i3.x, qf.i3.y);
      // Don't bother closing it unless we need to.

      // Fill...
      var frgba = obj.fill_rgba;
      if (frgba !== null) {
        var iy = obj.intensity;
        ctx.setFillColor(frgba.r * iy, frgba.g * iy, frgba.b * iy, frgba.a);
        ctx.fill();
      }

      // Texturing...
      var texture = obj.texture;
      if (texture !== null) {
        drawCanvasTexturedTriangle(ctx, texture.image,
          qf.i0.x, qf.i0.y, qf.i1.x, qf.i1.y, qf.i2.x, qf.i2.y,
          texture.u0, texture.v0, texture.u1, texture.v1,
          texture.u2, texture.v2);
        if (!is_triangle) {
          drawCanvasTexturedTriangle(ctx, texture.image,
            qf.i0.x, qf.i0.y, qf.i2.x, qf.i2.y, qf.i3.x, qf.i3.y,
            texture.u0, texture.v0, texture.u2, texture.v2,
            texture.u3, texture.v3);
        }
      }

      // Stroke...
      var srgba = obj.stroke_rgba;
      if (srgba !== null) {
        ctx.closePath();
        ctx.setStrokeColor(srgba.r, srgba.g, srgba.b, srgba.a);
        ctx.stroke();
      }

      // Normal lines (stroke)...
      var n1r = obj.normal1_rgba;
      var n2r = obj.normal2_rgba;
      if (n1r !== null) {
        ctx.setStrokeColor(n1r.r, n1r.g, n1r.b, n1r.a);
        var screen_centroid = this.projectPointToCanvas(qf.centroid);
        var screen_point = this.projectPointToCanvas(
            addPoints3d(qf.centroid, unitVector3d(qf.normal1)));
        ctx.beginPath();
        ctx.moveTo(screen_centroid.x, screen_centroid.y);
        ctx.lineTo(screen_point.x, screen_point.y);
        ctx.stroke();
      }
      if (n2r !== null) {
        ctx.setStrokeColor(n2r.r, n2r.g, n2r.b, n2r.a);
        var screen_centroid = this.projectPointToCanvas(qf.centroid);
        var screen_point = this.projectPointToCanvas(
            addPoints3d(qf.centroid, unitVector3d(qf.normal2)));
        ctx.beginPath();
        ctx.moveTo(screen_centroid.x, screen_centroid.y);
        ctx.lineTo(screen_point.x, screen_point.y);
        ctx.stroke();
      }
    }

    return num_quads;
  }

  // Draw a Path.  There is no buffering, because there is no culling or
  // z-sorting.  There is currently no filling, paths are only stroked.  To
  // control the render state, you should modify ctx directly, and set whatever
  // properties you want (stroke color, etc).  The drawing happens immediately.
  Renderer.prototype.drawPath = function drawPath(path, opts) {
    var ctx = this.ctx;
    opts = opts || { };

    var t = multiplyAffine(this.camera.transform.m,
                           this.transform.m);

    var screen_points = this.projectPointsToCanvas(
        transformPoints(t, path.points));

    // Start the path at (0, 0, 0) unless there is an explicit starting point.
    var start_point = (path.starting_point === null ?
        this.projectPointToCanvas(transformPoint(t, {x: 0, y: 0, z: 0})) :
        screen_points[path.starting_point]);

    ctx.beginPath();
    ctx.moveTo(start_point.x, start_point.y);

    var curves = path.curves;
    for (var j = 0, jl = curves.length; j < jl; ++j) {
      var curve = curves[j];

      if (curve.isQuadratic() === true) {
        var c0 = screen_points[curve.c0];
        var ep = screen_points[curve.ep];
        ctx.quadraticCurveTo(c0.x, c0.y, ep.x, ep.y);
      } else {
        var c0 = screen_points[curve.c0];
        var c1 = screen_points[curve.c1];
        var ep = screen_points[curve.ep];
        ctx.bezierCurveTo(c0.x, c0.y, c1.x, c1.y, ep.x, ep.y);
      }
    }

    // We've connected all our Curves into a <canvas> path, now draw it.
    if (opts.fill === true) {
      ctx.fill();
    } else {
      ctx.stroke();
    }
  };

  return {
    RGBA: RGBA,
    AffineMatrix: AffineMatrix,
    Transform: Transform,
    QuadFace: QuadFace,
    Shape: Shape,
    Curve: Curve,
    Path: Path,
    Camera: Camera,
    TextureInfo: TextureInfo,
    Renderer: Renderer,
    Math: {
      crossProduct: crossProduct,
      dotProduct2d: dotProduct2d,
      dotProduct3d: dotProduct3d,
      subPoints2d: subPoints2d,
      subPoints3d: subPoints3d,
      addPoints2d: addPoints2d,
      addPoints3d: addPoints3d,
      mulPoint2d: mulPoint2d,
      mulPoint3d: mulPoint3d,
      vecMag2d: vecMag2d,
      vecMag3d: vecMag3d,
      unitVector2d: unitVector2d,
      unitVector3d: unitVector3d,
      linearInterpolate: linearInterpolate,
      linearInterpolatePoints3d: linearInterpolatePoints3d,
      averagePoints: averagePoints
    }
  };
})();
// Pre3d, a JavaScript software 3d renderer.
// (c) Dean McNamee <dean@gmail.com>, Dec 2008.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//
// This file implements helpers related to creating / modifying Shapes.  Some
// routines exist for basic primitives (box, sphere, etc), along with some
// routines for procedural shape operations (extrude, subdivide, etc).
//
// The procedural operations were inspired from the demoscene.  A lot of the
// ideas are based on similar concepts in Farbrausch's werkkzeug1.

Pre3d.ShapeUtils = (function() {

  // TODO(deanm): Having to import all the math like this is a bummer.
  var crossProduct = Pre3d.Math.crossProduct;
  var dotProduct2d = Pre3d.Math.dotProduct2d;
  var dotProduct3d = Pre3d.Math.dotProduct3d;
  var subPoints2d = Pre3d.Math.subPoints2d;
  var subPoints3d = Pre3d.Math.subPoints3d;
  var addPoints2d = Pre3d.Math.addPoints2d;
  var addPoints3d = Pre3d.Math.addPoints3d;
  var mulPoint2d = Pre3d.Math.mulPoint2d;
  var mulPoint3d = Pre3d.Math.mulPoint3d;
  var vecMag2d = Pre3d.Math.vecMag2d;
  var vecMag3d = Pre3d.Math.vecMag3d;
  var unitVector2d = Pre3d.Math.unitVector2d;
  var unitVector3d = Pre3d.Math.unitVector3d;
  var linearInterpolate = Pre3d.Math.linearInterpolate;
  var linearInterpolatePoints3d = Pre3d.Math.linearInterpolatePoints3d;
  var averagePoints = Pre3d.Math.averagePoints;

  var k2PI = Math.PI * 2;

  // averagePoints() specialized for averaging 2 points.
  function averagePoints2(a, b) {
    return {
      x: (a.x + b.x) * 0.5,
      y: (a.y + b.y) * 0.5,
      z: (a.z + b.z) * 0.5
    };
  }

  // Rebuild the pre-computed "metadata", for the Shape |shape|.  This
  // calculates the centroids and normal vectors for each QuadFace.
  function rebuildMeta(shape) {
    var quads = shape.quads;
    var num_quads = quads.length;
    var vertices = shape.vertices;

    // TODO: It's possible we could save some work here, we could mark the
    // faces "dirty" which need their centroid or normal recomputed.  Right now
    // if we do an operation on a single face, we rebuild all of them.  A
    // simple scheme would be to track any writes to a QuadFace, and to set
    // centroid / normal1 / normal2 to null.  This would also prevent bugs
    // where you forget to call rebuildMeta() and used stale metadata.

    for (var i = 0; i < num_quads; ++i) {
      var qf = quads[i];

      var centroid;
      var n1, n2;

      var vert0 = vertices[qf.i0];
      var vert1 = vertices[qf.i1];
      var vert2 = vertices[qf.i2];
      var vec01 = subPoints3d(vert1, vert0);
      var vec02 = subPoints3d(vert2, vert0);
      var n1 = crossProduct(vec01, vec02);

      if (qf.isTriangle()) {
        n2 = n1;
        centroid = averagePoints([vert0, vert1, vert2]);
      } else {
        var vert3 = vertices[qf.i3];
        var vec03 = subPoints3d(vert3, vert0);
        n2 = crossProduct(vec02, vec03);
        centroid = averagePoints([vert0, vert1, vert2, vert3]);
      }

      qf.centroid = centroid;
      qf.normal1 = n1;
      qf.normal2 = n2;
    }

    return shape;
  }

  // Convert any quad faces into two triangle faces.  After triangulation,
  // |shape| should only consist of triangles.
  function triangulate(shape) {
    var quads = shape.quads;
    var num_quads = quads.length;
    for (var i = 0; i < num_quads; ++i) {
      var qf = quads[i];
      if (qf.isTriangle())
        continue;

      // TODO(deanm): Should we follow some clockwise rule here?
      var newtri = new Pre3d.QuadFace(qf.i0, qf.i2, qf.i3, null);
      // Convert the original quad into a triangle.
      qf.i3 = null;
      // Add the new triangle to the list of faces.
      quads.push(newtri);
    }
    rebuildMeta(shape);
    return shape;
  }

  // Call |func| for each face of |shape|.  The callback |func| should return
  // false to continue iteration, or true to stop.  For example:
  //   forEachFace(shape, function(quad_face, quad_index, shape) {
  //     return false;
  //   });
  function forEachFace(shape, func) {
    var quads = shape.quads;
    for (var i = 0, il = quads.length; i < il; ++i) {
      if (func(quads[i], i, shape) === true)
        break;
    }
    return shape;
  }

  function forEachVertex(shape, func) {
    var vertices = shape.vertices;
    for (var i = 0, il = vertices.length; i < il; ++i) {
      if (func(vertices[i], i, shape) === true)
        break;
    }
    return shape;
  }

  function makePlane(p1, p2, p3, p4) {
    var s = new Pre3d.Shape();
    s.vertices = [p1, p2, p3, p4];
    s.quads = [new Pre3d.QuadFace(0, 1, 2, 3)];
    rebuildMeta(s);
    return s;
  }

  // Make a box with width (x) |w|, height (y) |h|, and depth (z) |d|.
  function makeBox(w, h, d) {
    var s = new Pre3d.Shape();
    s.vertices = [
      {x:  w, y:  h, z: -d},  // 0
      {x:  w, y:  h, z:  d},  // 1
      {x:  w, y: -h, z:  d},  // 2
      {x:  w, y: -h, z: -d},  // 3
      {x: -w, y:  h, z: -d},  // 4
      {x: -w, y:  h, z:  d},  // 5
      {x: -w, y: -h, z:  d},  // 6
      {x: -w, y: -h, z: -d}   // 7
    ];

    //    4 -- 0
    //   /|   /|     +y
    //  5 -- 1 |      |__ +x
    //  | 7 -|-3     /
    //  |/   |/    +z
    //  6 -- 2

    s.quads = [
      new Pre3d.QuadFace(0, 1, 2, 3),  // Right side
      new Pre3d.QuadFace(1, 5, 6, 2),  // Front side
      new Pre3d.QuadFace(5, 4, 7, 6),  // Left side
      new Pre3d.QuadFace(4, 0, 3, 7),  // Back side
      new Pre3d.QuadFace(0, 4, 5, 1),  // Top side
      new Pre3d.QuadFace(2, 6, 7, 3)   // Bottom side
    ];

    rebuildMeta(s);

    return s;
  }

  // Make a cube with width, height, and depth |whd|.
  function makeCube(whd) {
    return makeBox(whd, whd, whd);
  }

  function makeBoxWithHole(w, h, d, hw, hh) {
    var s = new Pre3d.Shape();
    s.vertices = [
      {x:  w, y:  h, z: -d},  // 0
      {x:  w, y:  h, z:  d},  // 1
      {x:  w, y: -h, z:  d},  // 2
      {x:  w, y: -h, z: -d},  // 3
      {x: -w, y:  h, z: -d},  // 4
      {x: -w, y:  h, z:  d},  // 5
      {x: -w, y: -h, z:  d},  // 6
      {x: -w, y: -h, z: -d},  // 7

      // The front new points ...
      {x: hw, y:   h, z: d},  // 8
      {x:  w, y:  hh, z: d},  // 9
      {x: hw, y:  hh, z: d},  // 10
      {x: hw, y:  -h, z: d},  // 11
      {x:  w, y: -hh, z: d},  // 12
      {x: hw, y: -hh, z: d},  // 13

      {x: -hw, y:   h, z: d},  // 14
      {x:  -w, y:  hh, z: d},  // 15
      {x: -hw, y:  hh, z: d},  // 16
      {x: -hw, y:  -h, z: d},  // 17
      {x:  -w, y: -hh, z: d},  // 18
      {x: -hw, y: -hh, z: d},  // 19

      // The back new points ...
      {x: hw, y:   h, z: -d},  // 20
      {x:  w, y:  hh, z: -d},  // 21
      {x: hw, y:  hh, z: -d},  // 22
      {x: hw, y:  -h, z: -d},  // 23
      {x:  w, y: -hh, z: -d},  // 24
      {x: hw, y: -hh, z: -d},  // 25

      {x: -hw, y:   h, z: -d},  // 26
      {x: -w,  y:  hh, z: -d},  // 27
      {x: -hw, y:  hh, z: -d},  // 28
      {x: -hw, y:  -h, z: -d},  // 29
      {x: -w,  y: -hh, z: -d},  // 30
      {x: -hw, y: -hh, z: -d}   // 31
    ];

    //                        Front               Back (looking from front)
    //    4 -   - 0           05  14  08  01      04  26  20  00
    //   /|      /|
    //  5 -   - 1 |           15  16--10  09      27  28--22  21
    //  | 7 -   |-3               |////|              |////|
    //  |/      |/            18  19--13  12      30  31--25  24
    //  6 -   - 2
    //                        06  17  11  02      07  29  23  03

    s.quads = [
      // Front side
      new Pre3d.QuadFace( 1,  8, 10,  9),
      new Pre3d.QuadFace( 8, 14, 16, 10),
      new Pre3d.QuadFace(14,  5, 15, 16),
      new Pre3d.QuadFace(16, 15, 18, 19),
      new Pre3d.QuadFace(19, 18,  6, 17),
      new Pre3d.QuadFace(13, 19, 17, 11),
      new Pre3d.QuadFace(12, 13, 11,  2),
      new Pre3d.QuadFace( 9, 10, 13, 12),
      // Back side
      new Pre3d.QuadFace( 4, 26, 28, 27),
      new Pre3d.QuadFace(26, 20, 22, 28),
      new Pre3d.QuadFace(20,  0, 21, 22),
      new Pre3d.QuadFace(22, 21, 24, 25),
      new Pre3d.QuadFace(25, 24,  3, 23),
      new Pre3d.QuadFace(31, 25, 23, 29),
      new Pre3d.QuadFace(30, 31, 29,  7),
      new Pre3d.QuadFace(27, 28, 31, 30),
      // The hole
      new Pre3d.QuadFace(10, 16, 28, 22),
      new Pre3d.QuadFace(19, 31, 28, 16),
      new Pre3d.QuadFace(13, 25, 31, 19),
      new Pre3d.QuadFace(10, 22, 25, 13),
      // Bottom side
      new Pre3d.QuadFace( 6,  7, 29, 17),
      new Pre3d.QuadFace(17, 29, 23, 11),
      new Pre3d.QuadFace(11, 23,  3,  2),
      // Right side
      new Pre3d.QuadFace( 1,  9, 21,  0),
      new Pre3d.QuadFace( 9, 12, 24, 21),
      new Pre3d.QuadFace(12,  2,  3, 24),
      // Left side
      new Pre3d.QuadFace( 5,  4, 27, 15),
      new Pre3d.QuadFace(15, 27, 30, 18),
      new Pre3d.QuadFace(18, 30,  7,  6),
      // Top side
      new Pre3d.QuadFace(14, 26,  4,  5),
      new Pre3d.QuadFace( 8, 20, 26, 14),
      new Pre3d.QuadFace( 1,  0, 20,  8)
    ];

    rebuildMeta(s);
    return s;
  }

  // Tessellate a spherical parametric equation.
  // (two extras are for zenith and azimuth).  There will be |tess_x| vertices
  // along the X-axis.  It is centered on the Y-axis.  It has a radius |r|.
  // The implementation is probably still a bit convulted.  We just handle the
  // middle points like a grid, and special case zenith/aximuth, since we want
  // them to share a vertex anyway.  The math is pretty much standard spherical
  // coordinates, except that we map {x, y, z} -> {z, x, y}.  |tess_x| is phi,
  // and |tess_y| is theta.
  function makeSphericalShape(f, tess_x, tess_y) {
    // TODO(deanm): Preallocate the arrays to the final size.
    var vertices = [ ];
    var quads = [ ];

    // We walk theta 0 .. PI and phi from 0 .. 2PI.
    var theta_step = Math.PI / (tess_y + 1);
    var phi_step = (k2PI) / tess_x;

    // Create all of the vertices for the middle grid portion.
    for (var i = 0, theta = theta_step;
         i < tess_y;
         ++i, theta += theta_step) {  // theta
      for (var j = 0; j < tess_x; ++j) {  // phi
        vertices.push(f(theta, phi_step * j));
      }
    }

    // Generate the quads for the middle grid portion.
    for (var i = 0; i < tess_y-1; ++i) {
      var stride = i * tess_x;
      for (var j = 0; j < tess_x; ++j) {
        var n = (j + 1) % tess_x;
        quads.push(new Pre3d.QuadFace(
          stride + j,
          stride + tess_x + j,
          stride + tess_x + n,
          stride + n
        ));
      }
    }

    // Special case the zenith / azimuth (top / bottom) portion of triangles.
    // We make triangles (degenerated quads).
    var last_row = vertices.length - tess_x;
    var top_p_i = vertices.length;
    var bot_p_i = top_p_i + 1;
    vertices.push(f(0, 0));
    vertices.push(f(Math.PI, 0));

    for (var i = 0; i < tess_x; ++i) {
      // Top triangles...
      quads.push(new Pre3d.QuadFace(
        top_p_i,
        i,
        ((i + 1) % tess_x),
        null
      ));
      // Bottom triangles...
      quads.push(new Pre3d.QuadFace(
        bot_p_i,
        last_row + ((i + 2) % tess_x),
        last_row + ((i + 1) % tess_x),
        null
      ));
    }

    var s = new Pre3d.Shape();
    s.vertices = vertices;
    s.quads = quads;
    rebuildMeta(s);
    return s;
  }

  function makeOctahedron() {
    var s = new Pre3d.Shape();
    s.vertices = [
     {x: -1, y:  0, z:  0},  // 0
     {x:  0, y:  0, z:  1},  // 1
     {x:  1, y:  0, z:  0},  // 2
     {x:  0, y:  0, z: -1},  // 3
     {x:  0, y:  1, z:  0},  // 4
     {x:  0, y: -1, z:  0}   // 5
    ];
    // Top 4 triangles: 5 0 1, 5 1 2, 5 2 3, 5 3 0
    // Bottom 4 triangles: 0 5 1, 1 5 2, 2 5 3, 3 5 0
    quads = Array(8);
    for (var i = 0; i < 4; ++i) {
      var i2 = (i + 1) & 3;
      quads[i*2] = new Pre3d.QuadFace(4, i, i2, null);
      quads[i*2+1] = new Pre3d.QuadFace(i, 5, i2, null);
    }

    s.quads = quads;
    Pre3d.ShapeUtils.rebuildMeta(s);
    return s;
  }

  // Tessellate a sphere.  There will be |tess_y| + 2 vertices along the Y-axis
  // (two extras are for zenith and azimuth).  There will be |tess_x| vertices
  // along the X-axis.  It is centered on the Y-axis.  It has a radius |r|.
  // The implementation is probably still a bit convulted.  We just handle the
  // middle points like a grid, and special case zenith/aximuth, since we want
  // them to share a vertex anyway.  The math is pretty much standard spherical
  // coordinates, except that we map {x, y, z} -> {z, x, y}.  |tess_x| is phi,
  // and |tess_y| is theta.
  // TODO(deanm): This code could definitely be more efficent.
  function makeSphere(r, tess_x, tess_y) {
    return makeSphericalShape(function(theta, phi) {
        return {
          x: r * Math.sin(theta) * Math.sin(phi),
          y: r * Math.cos(theta),
          z: r * Math.sin(theta) * Math.cos(phi)
        };
    }, tess_x, tess_y);
  }

  // Smooth a Shape by averaging the vertices / faces.  This is something like
  // Catmull-Clark, but without the proper weighting.  The |m| argument is the
  // amount to smooth, between 0 and 1, 0 being no smoothing.
  function averageSmooth(shape, m) {
    // TODO(deanm): Remove this old compat code for calling without arguments.
    if (m === void(0))
      m = 1;

    var vertices = shape.vertices;
    var psl = vertices.length;
    var new_ps = Array(psl);

    // Build a connection mapping of vertex_index -> [ quad indexes ]
    var connections = Array(psl);
    for (var i = 0; i < psl; ++i)
      connections[i] = [ ];

    for (var i = 0, il = shape.quads.length; i < il; ++i) {
      var qf = shape.quads[i];
      connections[qf.i0].push(i);
      connections[qf.i1].push(i);
      connections[qf.i2].push(i);
      if (!qf.isTriangle())
        connections[qf.i3].push(i);
    }

    // For every vertex, average the centroids of the faces it's a part of.
    for (var i = 0, il = vertices.length; i < il; ++i) {
      var cs = connections[i];
      var avg = {x: 0, y: 0, z: 0};

      // Sum together the centroids of each face.
      for (var j = 0, jl = cs.length; j < jl; ++j) {
        var quad = shape.quads[cs[j]];
        var p1 = vertices[quad.i0];
        var p2 = vertices[quad.i1];
        var p3 = vertices[quad.i2];
        var p4 = vertices[quad.i3];
        // The centroid.  TODO(deanm) can't shape just come from the QuadFace?
        // That would handle triangles better and avoid some duplication.
        avg.x += (p1.x + p2.x + p3.x + p4.x) / 4;
        avg.y += (p1.y + p2.y + p3.y + p4.y) / 4;
        avg.z += (p1.z + p2.z + p3.z + p4.z) / 4;
        // TODO combine all the div / 4 into one divide?
      }

      // We summed up all of the centroids, take the average for our new point.
      var f = 1 / jl;
      avg.x *= f;
      avg.y *= f;
      avg.z *= f;

      // Interpolate between the average and the original based on |m|.
      new_ps[i] = linearInterpolatePoints3d(vertices[i], avg, m);
    }

    shape.vertices = new_ps;

    rebuildMeta(shape);
    return shape;
  }

  // Small utility function like Array.prototype.map.  Return a new array
  // based on the result of the function on a current array.
  function arrayMap(arr, func) {
    var out = Array(arr.length);
    for (var i = 0, il = arr.length; i < il; ++i) {
      out[i] = func(arr[i], i, arr);
    }
    return out;
  }

  // Divide each face of a Shape into 4 equal new faces.
  // TODO(deanm): Better document, doesn't support triangles, etc.
  function linearSubdivide(shape) {
    var num_quads = shape.quads.length;

    var share_points = { };

    for (var i = 0; i < num_quads; ++i) {
      var quad = shape.quads[i];

      var i0 = quad.i0;
      var i1 = quad.i1;
      var i2 = quad.i2;
      var i3 = quad.i3;

      var p0 = shape.vertices[i0];
      var p1 = shape.vertices[i1];
      var p2 = shape.vertices[i2];
      var p3 = shape.vertices[i3];

      //  p0   p1      p0  n0  p1
      //           ->  n3  n4  n1
      //  p3   p2      p3  n2  p2

      // We end up with an array of vertex indices of the centroids of each
      // side of the quad and the middle centroid.  We start with the vertex
      // indices that should be averaged.  We cache centroids to make sure that
      // we share vertices instead of creating two on top of each other.
      var ni = [
        [i0, i1].sort(),
        [i1, i2].sort(),
        [i2, i3].sort(),
        [i3, i0].sort(),
        [i0, i1, i2, i3].sort()
      ];

      for (var j = 0, jl = ni.length; j < jl; ++j) {
        var ps = ni[j];
        var key = ps.join('-');
        var centroid_index = share_points[key];
        if (centroid_index === undefined) {  // hasn't been seen before
          centroid_index = shape.vertices.length;
          var s = shape;
          shape.vertices.push(averagePoints(
              arrayMap(ps, function(x) { return s.vertices[x]; })));
          share_points[key] = centroid_index;
        }

        ni[j] = centroid_index;
      }

      // New quads ...
      var q0 = new Pre3d.QuadFace(   i0, ni[0], ni[4], ni[3]);
      var q1 = new Pre3d.QuadFace(ni[0],    i1, ni[1], ni[4]);
      var q2 = new Pre3d.QuadFace(ni[4], ni[1],    i2, ni[2]);
      var q3 = new Pre3d.QuadFace(ni[3], ni[4], ni[2],    i3);

      shape.quads[i] = q0;
      shape.quads.push(q1);
      shape.quads.push(q2);
      shape.quads.push(q3);
    }

    rebuildMeta(shape);
    return shape;
  }

  // Divide each triangle of a Shape into 4 new triangle faces.  This is done
  // by taking the mid point of each edge, and creating 4 new triangles.  You
  // can visualize it by inscribing a new upside-down triangle within the
  // current triangle, which then defines 4 new sub-triangles.
  function linearSubdivideTri(shape) {
    var num_tris = shape.quads.length;
    var share_points = { };

    for (var i = 0; i < num_tris; ++i) {
      var tri = shape.quads[i];

      var i0 = tri.i0;
      var i1 = tri.i1;
      var i2 = tri.i2;

      var p0 = shape.vertices[i0];
      var p1 = shape.vertices[i1];
      var p2 = shape.vertices[i2];

      //     p0                 p0
      //              ->      n0  n2
      // p1      p2         p1  n1  p2

      // We end up with an array of vertex indices of the centroids of each
      // side of the triangle.  We start with the vertex indices that should be
      // averaged.  We cache centroids to make sure that we share vertices
      // instead of creating two on top of each other.
      var ni = [
        [i0, i1].sort(),
        [i1, i2].sort(),
        [i2, i0].sort(),
      ];

      for (var j = 0, jl = ni.length; j < jl; ++j) {
        var ps = ni[j];
        var key = ps.join('-');
        var centroid_index = share_points[key];
        if (centroid_index === undefined) {  // hasn't been seen before
          centroid_index = shape.vertices.length;
          var s = shape;
          shape.vertices.push(averagePoints(
              arrayMap(ps, function(x) { return s.vertices[x]; })));
          share_points[key] = centroid_index;
        }

        ni[j] = centroid_index;
      }

      // New triangles ...
      var q0 = new Pre3d.QuadFace(   i0, ni[0], ni[2], null);
      var q1 = new Pre3d.QuadFace(ni[0],    i1, ni[1], null);
      var q2 = new Pre3d.QuadFace(ni[2], ni[1],    i2, null);
      var q3 = new Pre3d.QuadFace(ni[0], ni[1], ni[2], null);

      shape.quads[i] = q0;
      shape.quads.push(q1);
      shape.quads.push(q2);
      shape.quads.push(q3);
    }

    rebuildMeta(shape);
    return shape;
  }

  // Detach all of the faces from each other.  Basically this just duplicates
  // all of the vertices for each face, so a vertex is not shared across faces.
  function explodeFaces(shape) {
    var quads = shape.quads;
    var num_quads = quads.length;
    var verts = shape.vertices;
    var new_verts = [ ];
    for (var i = 0; i < num_quads; ++i) {
      var q = quads[i];
      var pos = new_verts.length;
      new_verts.push({x: verts[q.i0].x, y: verts[q.i0].y, z: verts[q.i0].z});
      new_verts.push({x: verts[q.i1].x, y: verts[q.i1].y, z: verts[q.i1].z});
      new_verts.push({x: verts[q.i2].x, y: verts[q.i2].y, z: verts[q.i2].z});
      q.i0 = pos;
      q.i1 = pos + 1;
      q.i2 = pos + 2;
      if (q.isTriangle() !== true) {
        new_verts.push({x: verts[q.i3].x, y: verts[q.i3].y, z: verts[q.i3].z});
        q.i3 = pos + 3;
      }
    }
    shape.vertices = new_verts;
    return shape;
  }

  // The Extruder implements extruding faces of a Shape.  The class mostly
  // exists as a place to hold all of the extrusion parameters.  The properties
  // are meant to be private, please use the getter/setter APIs.
  function Extruder() {
    // The total distance to extrude, if |count| > 1, then each segment will
    // just be a portion of the distance, and together they will be |distance|.
    this.distance_ = 1.0;
    // The number of segments / steps to perform.  This is can be different
    // than just running extrude multiple times, since we only operate on the
    // originally faces, not our newly inserted faces.
    this.count_ = 1;
    // Selection mechanism.  Access these through the selection APIs.
    this.selector_ = null;
    this.selectAll();

    // TODO(deanm): Need a bunch more settings, controlling which normal the
    // extrusion is performed along, etc.

    // Set scale and rotation.  These are public, you can access them directly.
    // TODO(deanm): It would be great to use a Transform here, but there are
    // a few problems.  Translate doesn't make sense, so it is not really an
    // affine.  The real problem is that we need to interpolate across the
    // values, having them in a matrix is not helpful.
    this.scale = {x: 1, y: 1, z: 1};
    this.rotate = {x: 0, y: 0, z: 0};
  }

  // Selection APIs, control which faces are extruded.
  Extruder.prototype.selectAll = function() {
    this.selector_ = function(shape, vertex_index) { return true; };
  };

  // Select faces based on the function select_func.  For example:
  //   extruder.selectCustom(function(shape, quad_index) {
  //     return quad_index == 0;
  //   });
  // The above would select only the first face for extrusion.
  Extruder.prototype.selectCustom = function(select_func) {
    this.selector_ = select_func;
  };

  Extruder.prototype.distance = function() {
    return this.distance_;
  };
  Extruder.prototype.set_distance = function(d) {
    this.distance_ = d;
  };

  Extruder.prototype.count = function() {
    return this.count_;
  };
  Extruder.prototype.set_count = function(c) {
    this.count_ = c;
  };

  Extruder.prototype.extrude = function extrude(shape) {
    var distance = this.distance();
    var count = this.count();

    var rx = this.rotate.x;
    var ry = this.rotate.y;
    var rz = this.rotate.z;
    var sx = this.scale.x;
    var sy = this.scale.y;
    var sz = this.scale.z;

    var vertices = shape.vertices;
    var quads = shape.quads;

    var faces = [ ];
    for (var i = 0, il = quads.length; i < il; ++i) {
      if (this.selector_(shape, i))
        faces.push(i);
    }

    for (var i = 0, il = faces.length; i < il; ++i) {
      // This is the index of the original face.  It will eventually be
      // replaced with the last iteration's outside face.
      var face_index = faces[i];
      // As we proceed down a count, we always need to connect to the newest
      // new face.  We start |quad| as the original face, and it will be
      // modified (in place) for each iteration, and then the next iteration
      // will connect back to the previous iteration, etc.
      var qf = quads[face_index];
      var original_cent = qf.centroid;

      // This is the surface normal, used to project out the new face.  It
      // will be rotated, but never scaled.  It should be a unit vector.
      var surface_normal = unitVector3d(addPoints3d(qf.normal1, qf.normal2));

      var is_triangle = qf.isTriangle();

      // These are the normals inside the face, from the centroid out to the
      // vertices.  They will be rotated and scaled to create the new faces.
      var inner_normal0 = subPoints3d(vertices[qf.i0], original_cent);
      var inner_normal1 = subPoints3d(vertices[qf.i1], original_cent);
      var inner_normal2 = subPoints3d(vertices[qf.i2], original_cent);
      if (is_triangle !== true) {
        var inner_normal3 = subPoints3d(vertices[qf.i3], original_cent);
      }

      for (var z = 0; z < count; ++z) {
        var m = (z + 1) / count;

        var t = new Pre3d.Transform();
        t.rotateX(rx * m);
        t.rotateY(ry * m);
        t.rotateZ(rz * m);

        // For our new point, we simply want to rotate the original normal
        // proportional to how many steps we're at.  Then we want to just scale
        // it out based on our steps, and add it to the original centorid.
        var new_cent = addPoints3d(original_cent,
          mulPoint3d(t.transformPoint(surface_normal), m * distance));

        // We multiplied the centroid, which should not have been affected by
        // the scale.  Now we want to scale the inner face normals.
        t.scalePre(
          linearInterpolate(1, sx, m),
          linearInterpolate(1, sy, m),
          linearInterpolate(1, sz, m));

        var index_before = vertices.length;

        vertices.push(addPoints3d(new_cent, t.transformPoint(inner_normal0)));
        vertices.push(addPoints3d(new_cent, t.transformPoint(inner_normal1)));
        vertices.push(addPoints3d(new_cent, t.transformPoint(inner_normal2)));
        if (is_triangle !== true) {
          vertices.push(
              addPoints3d(new_cent, t.transformPoint(inner_normal3)));
        }

        // Add the new faces.  These faces will always be quads, even if we
        // extruded a triangle.  We will have 3 or 4 new side faces.
        quads.push(new Pre3d.QuadFace(
            qf.i1,
            index_before + 1,
            index_before,
            qf.i0));
        quads.push(new Pre3d.QuadFace(
            qf.i2,
            index_before + 2,
            index_before + 1,
            qf.i1));

        if (is_triangle === true) {
          quads.push(new Pre3d.QuadFace(
              qf.i0,
              index_before,
              index_before + 2,
              qf.i2));
        } else {
          quads.push(new Pre3d.QuadFace(
              qf.i3,
              index_before + 3,
              index_before + 2,
              qf.i2));
          quads.push(new Pre3d.QuadFace(
              qf.i0,
              index_before,
              index_before + 3,
              qf.i3));
        }

        // Update (in place) the original face with the new extruded vertices.
        qf.i0 = index_before;
        qf.i1 = index_before + 1;
        qf.i2 = index_before + 2;
        if (is_triangle !== true)
          qf.i3 = index_before + 3;
      }
    }

    rebuildMeta(shape);  // Compute all the new normals, etc.
  };

  return {
    rebuildMeta: rebuildMeta,
    triangulate: triangulate,
    forEachFace: forEachFace,
    forEachVertex: forEachVertex,

    makePlane: makePlane,
    makeCube: makeCube,
    makeBox: makeBox,
    makeBoxWithHole: makeBoxWithHole,
    makeSphericalShape: makeSphericalShape,
    makeSphere: makeSphere,
    makeOctahedron: makeOctahedron,

    averageSmooth: averageSmooth,
    linearSubdivide: linearSubdivide,
    linearSubdivideTri: linearSubdivideTri,
    explodeFaces: explodeFaces,

    Extruder: Extruder
  };
})();
// Pre3d, a JavaScript software 3d renderer.
// (c) Dean McNamee <dean@gmail.com>, April 2009.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//
// This file implements helpers related to creating / modifying Paths.

Pre3d.PathUtils = (function() {

  // Make a line (a straight cubic bezier curve) from |p0| to |p1|.
  function makeLine(p0, p1) {
    var path = new Pre3d.Path();
    path.points = [
      {x: p0.x, y: p0.y, z: p0.z},
      {x: p1.x, y: p1.y, z: p1.z}];
    path.curves = [new Pre3d.Curve(1, 1, 1)];
    path.starting_point = 0;
    return path;
  }

  // Make a circle (consisting of two cublic splines) with points
  // (0, 0, 0) to (0, 1, 0);
  // http://www.whizkidtech.redprince.net/bezier/circle/
  // http://www.tinaja.com/glib/ellipse4.pdf
  function makeCircle() {
    var kKappa = 0.66666666666;  // Circle via 2 cubic splines.

    var path = new Pre3d.Path();
    path.points = [
      {x: 0, y: kKappa,  z: 0},
      {x: 1, y: kKappa,  z: 0},
      {x: 1, y: 0,       z: 0},
      {x: 1, y: -kKappa, z: 0},
      {x: 0, y: -kKappa, z: 0},
      {x: 0, y: 0,       z: 0}
    ];
    path.curves = [
      new Pre3d.Curve(2, 0, 1),
      new Pre3d.Curve(5, 3, 4)
    ];
    return path;
  }

  // Make a spiral, with |count| rings.  Each ring moves -0.1 along the z-axis.
  function makeSpiral(count) {
    var kKappa = 0.66666666666;  // Circle via 2 cubic splines.

    var points = [ ];
    var curves = [ ];

    var z = 0;
    var p = 0;
    for (var i = 0; i < count; ++i) {
      points.push({x: 0, y: kKappa,  z: z});
      z -= 0.05;
      points.push({x: 1, y: kKappa,  z: z});
      points.push({x: 1, y: 0,       z: z});
      points.push({x: 1, y: -kKappa, z: z});
      z -= 0.05;
      points.push({x: 0, y: -kKappa, z: z});
      points.push({x: 0, y: 0,       z: z});
      curves.push(new Pre3d.Curve(p + 2, p + 0, p + 1));
      curves.push(new Pre3d.Curve(p + 5, p + 3, p + 4));
      p += 6;
    }

    var path = new Pre3d.Path();
    path.points = points;
    path.curves = curves;
    return path;
  }

  // Fits a quadratic bezier curve evenly through 3 points.  Returns a control
  // point that forms a quadratic bezier (with end points p0 and p2) that
  // crosses through p1 at t=0.5. The time value 0.5 is hardcoded / implicit to
  // simplify the calculation.
  function fitQuadraticToPoints(p0, p1, p2) {
    return {
        x: p1.x + p1.x - 0.5 * (p0.x + p2.x),
        y: p1.y + p1.y - 0.5 * (p0.y + p2.y),
        z: p1.z + p1.z - 0.5 * (p0.z + p2.z)};
  }

  return {
    makeLine: makeLine,
    makeCircle: makeCircle,
    makeSpiral: makeSpiral,
    fitQuadraticToPoints: fitQuadraticToPoints
  };
})();
//=========================================================================

if (window.raudrohi_exists !== true) {
    window.raudrohi = {};
    window.raudrohi_exists = true;
} // if

if (window.raudrohi_core_exists !== true) {
    window.raudrohi.core = {};
    window.raudrohi_core_exists = true;
} // if

if (window.raudrohi_core_private_code_exists !== true) {
    window.raudrohi.core.private_code = {};
    window.raudrohi_core_private_code_exists = true;
} // if

window.raudrohi.core.sring_1_for_instance_reuse = "_tron_";


//  window.raudrohi.core.lc_s_trondot = "_trondot_";
//  window.raudrohi.core.lc_s_trondot_c = ".";
//  window.raudrohi.core.lc_s_troncomma = "_troncomma_";
//  window.raudrohi.core.lc_s_troncomma_c = ",";
//  window.raudrohi.core.lc_s_troncolon = "_troncolon_";
//  window.raudrohi.core.lc_s_troncolon_c = ":";
//  window.raudrohi.core.lc_s_tronsemicolon = "_tronsemicolon_";
//  window.raudrohi.core.lc_s_tronsemicolon_c = ";";


// The purpose of this class is to replace the
// Tim Down version of the Hashtable class with
// a different implementation.
//
// The style of the  public API of this class is
// explaned by the fact that the purpose of
// this implementation is to be an almost-drop-in-replacement
// to the Tim Down's 2009 version.
//
// Some code for copy-pasting:
//
// var ht=new Hashtable();
// ht.put('apple', 41)
// ht.put('pie', 42)
// var keys=ht.keys(); var len=keys.length;
// var key; var reference_to_the_value;
// for(var i=0;i<len;i++){
//     key=keys[i];
//     reference_to_the_value=ht.get(key);
//     } // for
//
// This implementation is NOT threadsafe, except for
// the get method, but as hashtable is a data container,
// then at places, where thread safety matters the hashtable
// is wrapped to a critical section anyway at application level.
var Hashtable = function () {

    // lookup optimization
    var lc_s_pfx_ = window.raudrohi.core.sring_1_for_instance_reuse;

    var ar_keys_ = [];
    var ht_ = {};

    // Throws an exception, if the value does not exist.
    this.get = function (s_key) {
        var s_k = lc_s_pfx_ + s_key;
        var x_out = ht_[s_k];
        if (x_out === undefined) {
            throw "There's no key named \"" + s_key + "\"." +
                  'GUID="191de143-80ea-43b8-959c-d04190705dd7"'
        } // if
        return x_out;
    } // get

    this.put = function (s_key, x_value) {
        var s_k = lc_s_pfx_ + s_key;
        // From thread safety point of view it's safer,
        // if a key exists in ht_ and is missing from the
        // ar_keys_ than vice versa. That explains, why the
        // ht_[s_k]=x_value; is not after the if-statement.
        if (ht_[s_k] === undefined) {
            ht_[s_k] = x_value;
            ar_keys_.push(s_key);
        } else {
            ht_[s_k] = x_value;
        } // if
    } // put

    this.containsKey = function (s_key) {
        var s_k = lc_s_pfx_ + s_key;
        if (ht_[s_k] === undefined) {
            return false;
        } // if
        return true;
    } // containsKey

    this.clear = function () {
        delete ar_keys_;
        ar_keys_ = [];
        delete ht_;
        ht_ = {};
    } // clear

    this.keys = function () {
        return ar_keys_
    } // keys

    this.remove = function (s_key) {
        var len = ar_keys_.length;
        if (len === 0) {
            return;
        } // if
        var s_k = lc_s_pfx_ + s_key;
        if (ht_[s_k] === undefined) {
            return;
        } // if
        var ar_keys_new = new Array(len - 1);
        var ar_keys_old = ar_keys_;
        var i = 0;
        var ii = 0;
        var elem;
        for (i = 0; i < len; i++) {
            elem = ar_keys_old[i];
            if (elem !== s_key) {
                ar_keys_new[ii] = elem;
                ii++;
            } // if
        } // for
        ar_keys_ = ar_keys_new;
        delete ht_[s_k];
        delete ar_keys_old;
        delete ii;
    } // remove

    this.size = function () {
        var i = ar_keys_.length
        return i;
    } // size

} // Hashtable

//=========================================================================
// This file has been assembled by martin.vahi@softf1.com and it
// contains a mixture of code written by other people and code
// that has been written by the martin.vahi@softf1.com.
//
// Everything in namespace raudrohi, except its dependencies,
// is written by the martin.vahi@softf1.com and is under the BSD license.
// -----The--start--of--the--BSD--license---------------------------------
// Copyright (c) 2009, martin.vahi@softf1.com that has an
// Estonian personal identification code of 38108050020.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
// * Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer
//   in the documentation and/or other materials provided with the
//   distribution.
// * Neither the name of the Martin Vahi nor the names of its
//   contributors may be used to endorse or promote products derived
//   from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -----The--end----of--the--BSD--license---------------------------------
//
// The rest of the code here is under various
// licenses, but all of it is commercially usable without paying any
// license fees. If all of the code is necessary anyway, then by
// placing them to a single file reduces the number of HTTP-requests.
//========================================================================

//------------------------------------------------------------------------
// Copyright 2009 Tim Down.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//------------------------------------------------------------------------

//  SHA-256 implementation in JavaScript (c) Chris Veness 2005-2009
//  License: GNU-LGPL
//  Downloaded by martin.vahi@softf1.com in August 2009 from
//  http://www.movable-type.co.uk/scripts/sha256.html
//
//  I(Martin Vahi) also slightly refactored it by changing some of the
//  original functions to private.
//  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function sha256hash(msg) {

    function ROTR(n, x) {
        return (x >>> n) | (x << (32 - n));
    }

    function Sigma0(x) {
        return ROTR(2, x) ^ ROTR(13, x) ^ ROTR(22, x);
    }

    function Sigma1(x) {
        return ROTR(6, x) ^ ROTR(11, x) ^ ROTR(25, x);
    }

    function sigma0(x) {
        return ROTR(7, x) ^ ROTR(18, x) ^ (x >>> 3);
    }

    function sigma1(x) {
        return ROTR(17, x) ^ ROTR(19, x) ^ (x >>> 10);
    }

    function Ch(x, y, z) {
        return (x & y) ^ (~x & z);
    }

    function Maj(x, y, z) {
        return (x & y) ^ (x & z) ^ (y & z);
    }

    // constants [Â§4.2.2]
    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
        0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be,
        0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1,
        0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc,
        0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3,
        0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
        0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1,
        0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585,
        0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3,
        0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814,
        0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];
    // initial hash value [Â§5.3.1]
    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f,
        0x9b05688c, 0x1f83d9ab, 0x5be0cd19];

    // PREPROCESSING

    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [Â§5.1.1]

    // convert string msg into 512-bit/16-integer blocks arrays of ints [Â§5.2.1]
    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + â1â + appended length
    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints
    var M = new Array(N);

    for (var i = 0; i < N; i++) {
        M[i] = new Array(16);
        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding
            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) |
                      (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |
                      (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) |
                      (msg.charCodeAt(i * 64 + j * 4 + 3));
        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0
    }
    // add length (in bits) into final pair of 32-bit integers (big-endian) [Â§5.1.1]
    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts
    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators
    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32);
    M[N - 1][14] = Math.floor(M[N - 1][14]);
    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;


    // HASH COMPUTATION [Â§6.1.2]

    var W = new Array(64);
    var a, b, c, d, e, f, g, h;
    for (var ii = 0; ii < N; ii++) {

        // 1 - prepare message schedule 'W'
        for (var t = 0; t < 16; t++) {
            W[t] = M[ii][t];
        }
        for (var tt = 16; tt < 64; tt++) {
            W[tt] = (sigma1(W[tt - 2]) + W[tt - 7] +
                     sigma0(W[tt - 15]) + W[tt - 16]) & 0xffffffff;
        } // for

        // 2 - initialise five working variables a, b, c, d, e with previous hash value
        a = H[0];
        b = H[1];
        c = H[2];
        d = H[3];
        e = H[4];
        f = H[5];
        g = H[6];
        h = H[7];

        // 3 - main loop (note 'addition modulo 2^32')
        for (var ttt = 0; ttt < 64; ttt++) {
            var T1 = h + Sigma1(e) + Ch(e, f, g) + K[ttt] + W[ttt];
            var T2 = Sigma0(a) + Maj(a, b, c);
            h = g;
            g = f;
            f = e;
            e = (d + T1) & 0xffffffff;
            d = c;
            c = b;
            b = a;
            a = (T1 + T2) & 0xffffffff;
        }
        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')
        H[0] = (H[0] + a) & 0xffffffff;
        H[1] = (H[1] + b) & 0xffffffff;
        H[2] = (H[2] + c) & 0xffffffff;
        H[3] = (H[3] + d) & 0xffffffff;
        H[4] = (H[4] + e) & 0xffffffff;
        H[5] = (H[5] + f) & 0xffffffff;
        H[6] = (H[6] + g) & 0xffffffff;
        H[7] = (H[7] + h) & 0xffffffff;
    }
    return H[0].toHexStr() + H[1].toHexStr() + H[2].toHexStr() +
           H[3].toHexStr() + H[4].toHexStr() + H[5].toHexStr() +
           H[6].toHexStr() + H[7].toHexStr();
} // sha256hash(...)


// extend Number class with a tailored hex-string method
//   (note toString(16) is implementation-dependant, and
//   in IE returns signed numbers when used on full words)
//
Number.prototype.toHexStr = function () {
    var s = "";
    var v;
    for (var i = 7; i >= 0; i--) {
        v = (this >>> (i * 4)) & 0xf;
        s += v.toString(16);
    }
    return s;
};

//------------------------------------------------------------------------

if (window.raudrohi_selftests_exists !== true) {
    window.raudrohi.selftests = {};
    window.raudrohi_selftests_exists = true;
} // if
if (window.raudrohi_selftests_ar_tests_1_exists !== true) {
    window.raudrohi.selftests.ar_tests_1 = [];
    window.raudrohi_selftests_ar_tests_1_exists = true;
} // if

if (window.raudrohi_core_constans_as_reusable_instances_exists !== true) {
    window.raudrohi.core.constans_as_reusable_instances = {};
    window.raudrohi_core_constans_as_reusable_instances_exists = true;
} // if
if (window.raudrohi_settings_exists !== true) {
    window.raudrohi.settings = {};
    window.raudrohi_settings_exists = true;
} // if
if (window.raudrohi_settings_runtime_exists !== true) {
    window.raudrohi.settings.runtime = {};
    window.raudrohi_settings_runtime_exists = true;
} // if

//---------
// The subject_to_replacement_ns is a namespace that is
// used in a selftests file template. To keep the
// selftests file template up to date, flawless, it is included
// to live selftests. If the testable namespaces are never
// created within the selftests files, then it's possible
// to detect typos that occur at the replacement of the
// subject_to_replacement_ns. To keep the namespace instantiation
// outside of the template while the template itself is
// switched into the selftests system, the
// subject_to_replacement_ns is instantiated here, at the next 3 lines:
if (window.raudrohi_subject_to_replacement_ns_exists !== true) {
    raudrohi.subject_to_replacement_ns = {};
    window.raudrohi_subject_to_replacement_ns_exists = true;
} // if

//---------

if (window.angervaks_exists !== true) {
    window.angervaks = {};
    window.angervaks_exists = true;
} // if
if (window.angervaks_settings_exists !== true) {
    window.angervaks.settings = {};
    window.angervaks_settings_exists = true;
} // if
if (window.angervaks_globals_exists !== true) {
    window.angervaks.globals = {};
    window.angervaks_globals_exists = true;
} // if
if (window.angervaks_instances_exists !== true) {
    window.angervaks.instances = {};
    window.angervaks_instances_exists = true;
} // if
if (window.angervaks_ui_exists !== true) {
    window.angervaks.ui = {};
    window.angervaks_ui_exists = true;
} // if
if (window.angervaks_ui_widgets_exists !== true) {
    window.angervaks.ui.widgets = {};
    window.angervaks_ui_widgets_exists = true;
} // if
if (window.angervaks_ui_widgets_globals_exists !== true) {
    window.angervaks.ui.widgets.globals = {};
    window.angervaks_ui_widgets_globals_exists = true;
} // if

// RENESSAATOR_BLOCK_START
// RENESSAATOR_BLOCK_ID=raudrohi_initiate_adapter_block_1
// RENESSAATOR_SOURCE_LANGUAGE=Ruby
// RENESSAATOR_SOURCE_START
// RAUDROHI_HOME=ENV['RAUDROHI_HOME']
// require(RAUDROHI_HOME+"/src/dev_tools/code_generation/raudrohi_cg0.rb")
// puts "raudrohi_settings_debug_JavaScript = "+RAUDROHI_DEBUG_JAVASCRIPT.to_s+";\n"
// RENESSAATOR_SOURCE_END
//
// RENESSAATOR_AUTOGENERATED_TEXT_START
raudrohi_settings_debug_JavaScript = true;

// RENESSAATOR_AUTOGENERATED_TEXT_END
// RENESSAATOR_BLOCK_END

raudrohi.settings.debug_SERVERSIDE = false;
raudrohi.settings.ajax_request_timeout = 3600  // seconds

window.raudrohi.settings.runtime.write_exception_stack_2_log = false;

// We'll keep 1 bit "safety distance" (32-signbit-1=30).
// After all, we're deeling with a crappy webstuff
// here and one never knows, what a hell the JavaScript
// core developperes have done again.
raudrohi.core.safe_positive_int = 1073741823; //==2^30-1, 0 is a positive number.


raudrohi.core.pair = function () {
    this.a = null;
    this.b = null;
}; // raudrohi.core.pair

raudrohi.core.triple = function () {
    this.a = null;
    this.b = null;
    this.c = null;
}; // raudrohi.core.triple

//------------------------------------------------------------------------

raudrohi.tmg = function (GUID, err) {
    // The raudrohi.tmg will be overridden in the raudrohi_adapter_v1.js
    var msg = "1196f3e2-434b-4b7d-a10e-408131704dd7" +
              GUID + "\"\n" + err;
    throw msg;
    return msg;
}; // raudrohi.tmg

//------------------------------------------------------------------------

// ECMAScript
// (http://www.ecma-international.org/publications/standards/Ecma-262.htm )
// does not support constants.
var raudrohi_glc_s_emptystring = "";
var raudrohi_glc_s_space = " ";
var raudrohi_glc_s_point = ".";
var raudrohi_glc_s_br = "<br/>";
var raudrohi_glc_s_linebreak = "\n";
var raudrohi_glc_sb_true = "t";
var raudrohi_glc_sb_false = "f";
var raudrohi_glc_s_zero = "0";
var raudrohi_glc_s_unix_time = "unix_time";
var raudrohi_glc_s_label1 = "s_label1";
var raudrohi_glc_s_label2 = "s_label2";

var raudrohi_typename_String = "raudrohi_typename_String";
var raudrohi_typename_Array = "raudrohi_typename_Array";
var raudrohi_typename_Number = "raudrohi_typename_Number";
var raudrohi_typename_Boolean = "raudrohi_typename_Boolean";
var raudrohi_typename_Object = "raudrohi_typename_Object";
var raudrohi_typename_Undefined = "raudrohi_typename_Undefined";
var raudrohi_typename_Value = "raudrohi_typename_Value";
var raudrohi_typename_Function = "raudrohi_typename_Function";
var raudrohi_typename_null = "raudrohi_typename_null";

//------------------------------------------------------------------------

// 't'->true
// 'f'->false
raudrohi.core.str2bool = function (a_string) {
    try {
        var answer;
        if (!raudrohi_adapter_isString(a_string)) {
            raudrohi.tmg('4ea1a45c-5e87-4f20-a30e-408131704dd7',
                'a_string is not a string.');
        } // if
        if (a_string == 't') {
            answer = true
        }
        else {
            if (a_string == 'f') {
                answer = false
            }
            else {
                raudrohi.tmg('09f96214-6931-4ee7-850e-408131704dd7',
                    'a_string==' + a_string + 'TheEndOf_the_a_string');
            } // else
        } // else
        return answer;
    } catch (err) {
        raudrohi.tmg('22ecf672-55c7-4e3d-9b0e-408131704dd7', err);
    } // catch
} // raudrohi.core.str2bool

raudrohi.core.bool2str = function (a_boolean) {
    try {
        if (!raudrohi_adapter_isBoolean(a_boolean)) {
            raudrohi.tmg('f02b791e-db2d-4cf4-a30e-408131704dd7',
                'The a_boolean is not a boolean and it ' +
                'has a value of ' + a_boolean);
        } // if
        var answer;
        switch (a_boolean) {
            case true:
                answer = 't';
                break;
            case false:
                answer = 'f';
                break;
            default:
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.tmg('GUID=="154ef4ba-b4c0-4c0c-830e-408131704dd7"',
                        'There\'s no branching for a_boolean(==' + a_boolean +
                        ').');
                } // if
        } // switch
        return answer;
    } catch (err) {
        raudrohi.tmg('21daed2e-ffad-44ff-82fd-408131704dd7', err);
    } // catch
} // raudrohi.core.bool2str

//------------------------------------------------------------------------

window.raudrohi_core_burnCPUcycles_helpervar = 0;
// This is the classic dirty, code monkey way of implementing the delay()
// function. Hooray to the JavaScript language design!!!
raudrohi.core.burnCPUcycles = function (number_of_batches) {
    try {
        if (number_of_batches < 0) {
            raudrohi.tmg('33fb55b9-05f1-478b-82fd-408131704dd7',
                'number_of_batches(==' + number_of_batches + ') < 0');
        } // if
        var i = 0;
        while ((i++) <= number_of_batches) {
            window.raudrohi_core_burnCPUcycles_helpervar = number_of_batches +
                                                           window.raudrohi_core_burnCPUcycles_helpervar;
            if ((i % 3) == 0) {
                // The if-clause is to make it harder for the interpreter
                // to optimize this loop.
                window.raudrohi_core_burnCPUcycles_helpervar++;
            } // if
        } // while
    } catch (err) {
        raudrohi.tmg('2d90ea3a-adc6-4183-a2fd-408131704dd7', err);
    } // catch
} // raudrohi.core.burnCPUcycles

//------------------------------------------------------------------------

raudrohi.core.isWithinClosedInterval = function (infimum, candidate, supremum) {
    try {
        if (candidate < infimum) {
            return false;
        } // if
        if (supremum < candidate) {
            return false;
        } // if
        return true;
    } catch (err) {
        raudrohi.tmg('28b9d363-d3ee-42cb-9cfd-408131704dd7', err);
    } // catch
} // raudrohi.core.isWithinClosedInterval

//------------------------------------------------------------------------

raudrohi.core.isWithinKeyeventKeyCodes_bounds = [8, 9, 13, 13, 16, 20, 27, 27,
    33, 40, 45, 57, 65, 93, 96, 107, 109, 123, 144, 145, 186, 192, 219, 222];
raudrohi.core.isWithinKeyeventKeyCodes = function (key_code_candidate) {
    try {
        var halve_len = Math.floor(
            raudrohi.core.isWithinKeyeventKeyCodes_bounds.length / 2 + 0.01);
        var i = 0;
        var ii = 0;
        var b;
        var lower_bound;
        var upper_bound;
        for (i = 0; i < halve_len; i++) {
            ii = i * 2;
            lower_bound = raudrohi.core.isWithinKeyeventKeyCodes_bounds[ii];
            upper_bound = raudrohi.core.isWithinKeyeventKeyCodes_bounds[ii + 1];
            b = raudrohi.core.isWithinClosedInterval(lower_bound,
                key_code_candidate, upper_bound);
            if (b) {
                return true;
            } // if
        } // for
        return false;
    } catch (err) {
        raudrohi.tmg('7f5ef421-b743-42ea-85fd-408131704dd7', err);
    } // catch

} // raudrohi.core.isWithinKeyeventKeyCodes

//------------------------------------------------------------------------

//=========================================================================
//
// This file acts as an interface between JavaScript libraries that
// take care of browser specific picularities and the raudrohi JavaScript
// library.
//
// The idea is that when new browser versions emerge, they
// tend to break compatibility and when the developers of the
// libraries that take care of browser related normalization, update
// their libraries, all of the raudrohi can be brought up to date
// by just updating this file here.
//
// The place, where to start reading this file, is
// raudrohi.initiate_adapter.
//
// Dependencies:
//      YUI toolkit from Yahoo. Currently only version 3 is fully
//      supported.
//-------------------------------------------------------------------------

if (window.raudrohi_adapter_exists !== true) {
    window.raudrohi.adapter = {};
    window.raudrohi_adapter_exists = true;
} // if
if (window.raudrohi_adapter_ports_exists !== true) {
    window.raudrohi.adapter.ports = {};
    window.raudrohi_adapter_ports_exists = true;
} // if

raudrohi.internal_constructor = function () {
    throw 'It\'s assumed that the function named ' +
          'raudrohi.internal_constructor is overriden. ' +
          'GUID=="11695cd9-d655-486c-b4c4-93c210505dd7"';
} // raudrohi.internal_constructor

raudrohi.application_main_function = function () {
    throw 'It\'s assumed that the function named ' +
          'raudrohi.application_main_function is overriden. ' +
          'GUID=="fe8cdf13-5317-41bc-a5c4-93c210505dd7" ';
} // raudrohi.application_main_function

raudrohi.adapter.vars = {};

raudrohi.adapter.vars.func_if_lib_uninited = function (x) {
    throw 'In order to use the raudrohi ' +
          'JavaScript library, one has to initialize it by calling ' +
          'raudrohi.initiate_adapter. ';
} // raudrohi.adapter.vars.func_if_lib_uninited

// The isString will be overriden, but one needs to bypass it
// within the str2bool, which gets called before the overriding.
// That's why it returns just true.
raudrohi_adapter_isString = function (x) {
    return true;
};


raudrohi.adapter.log = function (x) {/*its a temporary stub*/
};

// The following 2 methods are subject to overriding. They're functions
// here only to demonstrate their interface.
raudrohi.adapter.server_response_eventhandler = function (response_as_a_text) {
    raudrohi.adapter.vars.func_if_lib_uninited('')
} // raudrohi.adapter.server_response_eventhandler
raudrohi.adapter.send2server = function (url_string, data_as_text) {
    raudrohi.adapter.vars.func_if_lib_uninited('')
} // raudrohi.adapter.send2server


// the innerHTML parameter exists only, because
// the Internet Explorer 8 (as of 11.2009) has bugs.
raudrohi.adapter.set_innerHTML = function (html_id, a_string) {
    raudrohi.adapter.vars.func_if_lib_uninited('')
} //raudrohi.adapter.set_innerHTML

//------------------------------------------------------------------------
raudrohi.tmg = function (GUID, err) {
    // The YAHOO event handler mechanisms supress the exceptions,
    // effectively stopping the exception bubble before it reaches
    // the event handler function. That's one of the reasons, why one
    // feeds the whole thing to the YAHOO log. The other
    // reason is that if the exception message stack is fed to the
    // YAHOO log, one does not have to keep the error console window
    // open. :-)
    //
    // Within the raudrohi_adapter_v1.js one should not use this
    // method before a function has been assigned to the
    // raudrohi.adapter.log.
    var msg = 'GUID=="' + GUID + "\"\n" + err;
    if (raudrohi.settings.runtime.write_exception_stack_2_log) {
        raudrohi.adapter.log(msg);
    } // if
    throw msg;
}; // raudrohi.tmg

//------------------------------------------------------------------------
// The YUI_stoppropagation_preventdefault duplicates the YUI_stoppropagation
// and the YUI_preventdefault and exists only for convenience and
// may be also for slight performance gain.
raudrohi.adapter.YUI_stoppropagation_preventdefault =
raudrohi.adapter.vars.func_if_lib_uninited;

raudrohi.adapter.ports.selected_port_name = '';

//------------------------------------------------------------------------
raudrohi.adapter.vars.verify_event_name = function (event_name) {
    try {
        switch (event_name) {
            case 'focus':
                break;
            case 'blur':
                break;
            case 'click':
                break;
            case 'change':
                break;
            default:
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.tmg('GUID=="1f5be820-20e8-4067-a3c4-93c210505dd7"',
                        'There\'s no branching for event_name(==' + event_name +
                        ').');
                } // if
        } // switch
    }
    catch (err) {
        throw 'GUID=="2686f22c-4226-44f0-94c4-93c210505dd7"' + "\n\r" + err;
    } // catch
} // raudrohi.adapter.vars.verify_event_name

//------------------------------------------------------------------------
raudrohi.adapter.vars.do_something_if_the_connection_to_the_server_failed =
function () {
    if (raudrohi_settings_debug_JavaScript === true) {
        raudrohi.tmg('fd893135-0aa3-43e0-93c4-93c210505dd7',
            'Connection to the server failed.');
    } // if
}; // raudrohi.adapter.vars.do_something_if_the_connection_to_the_server_failed
//------------------------------------------------------------------------

var raudrohi_adapter_isString = null;
var raudrohi_adapter_isArray = null;
var raudrohi_adapter_isNumber = null;
var raudrohi_adapter_isBoolean = null;
var raudrohi_adapter_isObject = null;
var raudrohi_adapter_isUndefined = null;
var raudrohi_adapter_isValue = null;
var raudrohi_adapter_isFunction = null;

//------------------------------------------------------------------------
var YUI_based_LogReader;
var Y_raudrohi = null;

//------------------------------------------------------------------------
raudrohi.adapter.ports.yui_3_0 = function () {
    var self_public_ = this;
    this.get_name = function () {
        return 'YUI_3_0';
    } // get_name
    Y_raudrohi = YUI();
    if (raudrohi_settings_debug_JavaScript === true) {
        Y_raudrohi.use('console', 'overlay', 'dd', 'node', 'attribute',
            'dom', 'event', 'get', 'io-base',
            'io-form', 'io-upload-iframe', 'json', 'json-stringify',
            'json-parse', 'event-key', 'key', function (Y) {

                raudrohi_adapter_isString = Y.Lang.isString;
                raudrohi_adapter_isArray = Y.Lang.isArray;
                raudrohi_adapter_isNumber = Y.Lang.isNumber;
                raudrohi_adapter_isBoolean = Y.Lang.isBoolean;
                raudrohi_adapter_isObject = Y.Lang.isObject;
                raudrohi_adapter_isUndefined = Y.Lang.isUndefined;
                raudrohi_adapter_isValue = Y.Lang.isValue;
                raudrohi_adapter_isFunction = Y.Lang.isFunction;

                raudrohi.internal_constructor();
                raudrohi.application_main_function();
            });
    } else {
        // The console related css seems to mess things up.
        // May be it has something to do with the fact that the console
        // component is still a beta.
        //
        // The reason, why the console component is here, is that
        // some weird errors happened to occur.
        Y_raudrohi.use('overlay', 'dd', 'node', 'attribute',
            'dom', 'event', 'get', 'io-base',
            'io-form', 'io-upload-iframe', 'json', 'json-stringify',
            'json-parse', 'event-key', 'key', function (Y) {

                raudrohi_adapter_isString = Y.Lang.isString;
                raudrohi_adapter_isArray = Y.Lang.isArray;
                raudrohi_adapter_isNumber = Y.Lang.isNumber;
                raudrohi_adapter_isBoolean = Y.Lang.isBoolean;
                raudrohi_adapter_isObject = Y.Lang.isObject;
                raudrohi_adapter_isUndefined = Y.Lang.isUndefined;
                raudrohi_adapter_isValue = Y.Lang.isValue;
                raudrohi_adapter_isFunction = Y.Lang.isFunction;

                raudrohi.internal_constructor();
                raudrohi.application_main_function();
            });
    } // else

    raudrohi.adapter.vars.YUI_3_0 = {};

    raudrohi.adapter.log = function (a_string) {
        if (raudrohi_settings_debug_JavaScript === true) {
            Y_raudrohi.log(a_string);
        } // if
    } // raudrohi.adapter.log

    raudrohi.adapter.trim = function (a_string) {
        try {
            return Y_raudrohi.Lang.trim(a_string);
        } catch (err) {
            raudrohi.tmg('2ddccaa1-e7e2-4510-95c4-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.trim

    raudrohi.adapter.YUI_preventdefault = function (e) {
        try {
            e.preventDefault();
        } catch (err) {
            raudrohi.tmg('961936f6-0928-43f5-b9c4-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.YUI_preventdefault

    raudrohi.adapter.YUI_stoppropagation = function (e) {
        try {
            e.stopPropagation();
        } catch (err) {
            raudrohi.tmg('aff2d145-4ba6-4d21-84c4-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.YUI_stoppropagation

    raudrohi.adapter.YUI_stoppropagation_preventdefault = function (e) {
        try {
            e.halt();
        } catch (err) {
            raudrohi.tmg('51c0580d-54d6-4943-b1c4-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.YUI_stoppropagation_preventdefault

    raudrohi.adapter.YUI_create_console = function () {
        try {
            if (raudrohi_settings_debug_JavaScript === true) {
                YUI_based_LogReader = new Y_raudrohi.Console({
                    logSource: Y_raudrohi.Global,
                    strings: {
                        title: 'Site Debugging Console',
                        pause: 'Wait',
                        clear: 'Flush',
                        collapse: 'Shrink',
                        expand: 'Grow'
                    },
                    plugins: [Y_raudrohi.Plugin.Drag,
                        Y_raudrohi.Plugin.ConsoleFilters],
                    //plugins: [ Y_raudrohi.Plugin.ConsoleFilters ],
                    visible: true
                }).render();
            } // if
        } catch (err) {
            raudrohi.tmg('ecd91821-71dc-4c9d-95b4-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.YUI_create_console

    raudrohi.adapter.addEventListner =
    function (html_id, event_name, event_handler_func) {
        try {
            if (raudrohi_settings_debug_JavaScript === true) {
                if (!raudrohi_adapter_isString(html_id)) {
                    raudrohi.tmg('b56a1f44-9efe-451d-81b4-93c210505dd7',
                        '(!raudrohi_adapter_isString(html_id))==true')
                } // if
                if (!raudrohi_adapter_isString(event_name)) {
                    raudrohi.tmg('411589a3-4a3f-4c70-b1b4-93c210505dd7',
                        '(!raudrohi_adapter_isString(event_name))==true')
                } // if
                if (!raudrohi_adapter_isFunction(event_handler_func)) {
                    raudrohi.tmg('3744761f-e0bc-462c-a3b4-93c210505dd7',
                        '(!raudrohi_adapter_isFunction(event_handler_func))==true');
                } // if
                raudrohi.adapter.vars.verify_event_name(event_name);
            } // if
            var key_listener_handle = Y_raudrohi.on(event_name, function (e) {
                //e.halt();// stopPropagation() and preventDefault()
                //key_listener_handle.detach();// unsubscribe so this only happens once
                event_handler_func(e);
            }, '#' + html_id);
            // The value is returned in order to be compatible wtih
            // the raudrohi.adapter.set_keylistener. The compatibility is
            // required in the raudrohi.widgets.g1.sys.keylisteners_unit.
            return key_listener_handle;
        } catch (err) {
            raudrohi.tmg('f9c22c5e-e20a-40a1-b4a4-93c210505dd7',
                err + ' html_id==' + html_id + '  event_name==' + event_name);
        } // catch
    } // raudrohi.adapter.addEventListner

    raudrohi.adapter.set_keylistener =
    function (html_id, key_number_as_string, event_handler_func) {
        try {
            if (raudrohi_settings_debug_JavaScript === true) {
                if (!raudrohi_adapter_isString(html_id)) {
                    raudrohi.tmg('29d851d1-ccea-4516-93a4-93c210505dd7',
                        '(!raudrohi_adapter_isString(html_id))==true')
                } // if
                if (!raudrohi_adapter_isString(key_number_as_string)) {
                    raudrohi.tmg('135e8c83-d464-4ed9-a7a4-93c210505dd7',
                        '(!raudrohi_adapter_isString(key_number_as_string))==true')
                } // if
                if (!raudrohi_adapter_isFunction(event_handler_func)) {
                    raudrohi.tmg('b8fe8932-3ff9-4a09-b3a4-93c210505dd7',
                        '(!raudrohi_adapter_isFunction(event_handler_func))==true');
                } // if
                // If the parseInt converts something like 'BumBastic' to
                // an int, then there will be trouble. It's not possible to
                // preprocess it here either.
                var key_code_candidate = parseInt(key_number_as_string, 10);
                if (!raudrohi.core.isWithinKeyeventKeyCodes(key_code_candidate)) {
                    raudrohi.tmg('a167b759-d3e8-444f-a1a4-93c210505dd7',
                        'key_number(==' + key_number_as_string +
                        ') does not represent a ' +
                        'JavaScript key event key code.');
                } // if
            } // if
            var key_listener_handle = Y_raudrohi.on('key',
                function (e, arg1, arg2, etc) {
                    //e.halt();// stopPropagation() and preventDefault()
                    //key_listener_handle.detach();// unsubscribe so this only happens once
                    event_handler_func(e);
                }, '#' + html_id, 'down:' + key_number_as_string,
                Y_raudrohi, "arg1", "arg2", "etc");
            return key_listener_handle;
        } catch (err) {
            raudrohi.tmg('863b8339-867c-45f3-a1a4-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.set_keylistener

    raudrohi.adapter.remove_keylistener = function (key_listener_handle) {
        try {
            key_listener_handle.detach();
        } catch (err) {
            raudrohi.tmg('4395f126-70e6-44a3-94a4-93c210505dd7', err);
        } // catch
    } // remove_keylistener

    raudrohi.adapter.JSON2ob = function (a_json_string) {
        try {
            var an_object;
            //YUI().use('json-parse', function (Ytmp) {
            // JSON.parse throws a SyntaxError when passed invalid JSON
            try {
                an_object = Y_raudrohi.JSON.parse(a_json_string);
            }
            catch (e) {
                raudrohi.tmg("Invalid JSON string. " + e);
            }
            //});
            return an_object;
        } catch (err) {
            raudrohi.tmg('bd03611f-5fc8-425c-83a4-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.JSON2ob

    raudrohi.adapter.ob2JSON = function (an_object) {
        try {
            var s_json = '';
            //YUI().use('json-stringify', function (Ytmp) {
            s_json = Y_raudrohi.JSON.stringify(an_object) + '\n';
            //});
            return s_json;
        } catch (err) {
            raudrohi.tmg('ac3e7d35-80e7-43c1-a1a4-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.JSON2ob


    raudrohi.adapter.send2server = function (url_string, data_as_text) {
        try {
            var fff = document.getElementById(
                'sirel_data_from_JavaScript_formscript_field');
            fff.value = data_as_text;
            var uri = url_string;

            // Define a function to handle the response data.
            function request_complete(id, o, args) {
                try {
                    // id ==Transaction ID.
                    var data = o.responseText; // Response data.
                    if (data != null) {// IE problems
                        if (raudrohi_adapter_isString(data)) {
                            if (data != '') {
                                raudrohi.adapter.server_response_eventhandler(data);
                            } // if
                        } // if
                    } // if
                    //  var args = args[1]; // 'ipsum'.
                } catch (err) {
                    raudrohi.tmg('0805df11-3934-4d29-8394-93c210505dd7', err);
                } // catch
            } // request_complete

            // Subscribe to event "io:complete", and pass an array
            // as an argument to the event handler "complete", since
            // "complete" is global.   At this point in the transaction
            // lifecycle, success or failure is not yet known.
            Y_raudrohi.on('io:complete', request_complete, this,
                ['lorem', 'ipsum']);
            // Make an HTTP request to <the url>.
            var cfg = {
                method: 'POST',
                //data: 'debug|||/dev/null|||',
                timeout: raudrohi.settings.ajax_request_timeout * 1000,
                on: {
                    // start: Dispatch.start,
                    complete: request_complete
                    //end: Dispatch.end
                },
                form: {
                    id: 'sirel_data_from_JavaScript_formscript_form',
                    upload: true
                }
            };
            var request = Y_raudrohi.io(uri, cfg);
        } catch (err) {
            raudrohi.tmg('f5f5d340-75f7-4a5c-8194-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.send2server

    // Due to YUI's architecture there's a separate method for
    // editing the style attribute.
    raudrohi.adapter.setAttribute =
    function (html_id, attribute_name, attribute_value) {
        try {
            if (raudrohi_settings_debug_JavaScript === true) {
                if (!raudrohi_adapter_isString(html_id)) {
                    raudrohi.tmg('cbdb0e59-362c-47b4-b594-93c210505dd7',
                        '(!raudrohi_adapter_isString(html_id))==true')
                } // if
                if (!raudrohi_adapter_isString(attribute_name)) {
                    raudrohi.tmg('3afd1ed5-7127-4798-ba94-93c210505dd7',
                        '(!raudrohi_adapter_isString(attribute_name))==true')
                } // if
                if (!raudrohi_adapter_isString(attribute_value)) {
                    raudrohi.tmg('89ee7135-eadc-4fd0-a494-93c210505dd7',
                        '(!raudrohi_adapter_isString(attribute_value))==true')
                } // if
            } // if
            var node = Y_raudrohi.Node.get('#' + html_id);
            if (node === null) {
                raudrohi.tmg('f9933f1a-0639-4f47-b394-93c210505dd7',
                    ' node===null ');
            } // if
            node.set(attribute_name, attribute_value);
        } catch (err) {
            raudrohi.tmg('49db675e-956f-4c44-9594-93c210505dd7', err +
                                                                 '  html_id==' +
                                                                 html_id +
                                                                 ' attribute_name==' +
                                                                 attribute_name +
                                                                 '  attribute_value==' +
                                                                 attribute_value);
        } // catch
    } // raudrohi.adapter.setAttribute

    raudrohi.adapter.getAttribute = function (html_id, attribute_name) {
        try {
            if (raudrohi_settings_debug_JavaScript === true) {
                if (!raudrohi_adapter_isString(html_id)) {
                    raudrohi.tmg('f9c2fa2d-af32-4781-9594-93c210505dd7',
                        '(!raudrohi_adapter_isString(html_id))==true')
                } // if
                if (!raudrohi_adapter_isString(attribute_name)) {
                    raudrohi.tmg('e0939914-1436-402c-a194-93c210505dd7',
                        '(!raudrohi_adapter_isString(attribute_name))==true')
                } // if
            } // if
            var node = Y_raudrohi.Node.get('#' + html_id);
            if (node === null) {
                raudrohi.tmg('75641d49-0544-4b18-a284-93c210505dd7',
                    ' node===null ');
            } // if
            var attr_value = node.get(attribute_name);
            return attr_value;
        } catch (err) {
            raudrohi.tmg('1b8cb863-044a-4e4d-9634-93c210505dd7', err +
                                                                 '  html_id==' +
                                                                 html_id +
                                                                 ' attribute_name==' +
                                                                 attribute_name);
        } // catch
    } // raudrohi.adapter.getAttribute

    raudrohi.adapter.remove_HTML_attribute =
    function (html_id, attribute_name) {
        try {
            if (raudrohi_settings_debug_JavaScript === true) {
                if (!raudrohi_adapter_isString(html_id)) {
                    raudrohi.tmg('6ed9d9b4-e72f-497e-9134-93c210505dd7',
                        '(!raudrohi_adapter_isString(html_id))==true')
                } // if
                if (!raudrohi_adapter_isString(attribute_name)) {
                    raudrohi.tmg('5ac26be2-eb73-4bee-9f34-93c210505dd7',
                        '(!raudrohi_adapter_isString(attribute_name))==true')
                } // if
            } // if
            var node = Y_raudrohi.Node.get('#' + html_id);
            if (node === null) {
                raudrohi.tmg('1b214c33-1cf8-4760-9224-93c210505dd7',
                    ' node===null ');
            } // if
            node.removeAttribute(attribute_name);
        } catch (err) {
            raudrohi.tmg('d6136558-0a48-4b41-b324-93c210505dd7', err +
                                                                 '  html_id==' +
                                                                 html_id +
                                                                 ' attribute_name==' +
                                                                 attribute_name);
        } // catch
    } // raudrohi.adapter.remove_HTML_attribute


    raudrohi.adapter.editStyle =
    function (html_id, style_param_name, style_param_value) {
        try {
            if (raudrohi_settings_debug_JavaScript === true) {
                if (!raudrohi_adapter_isString(html_id)) {
                    raudrohi.tmg('73ae0943-3ed9-4ff8-9224-93c210505dd7',
                        '(!raudrohi_adapter_isString(html_id))==true')
                } // if
                if (!raudrohi_adapter_isString(style_param_name)) {
                    raudrohi.tmg('a2110a35-367b-460c-8224-93c210505dd7',
                        '(!raudrohi_adapter_isString(style_param_name))==true')
                } // if
                if (!raudrohi_adapter_isString(style_param_value)) {
                    raudrohi.tmg('4bd680b1-d0b0-45e1-b124-93c210505dd7',
                        '(!raudrohi_adapter_isString(style_param_value))==true')
                } // if
            } // if
            var node = Y_raudrohi.Node.get('#' + html_id);
            if (node === null) {
                raudrohi.tmg('587a6034-ae54-4c02-8124-93c210505dd7',
                    ' node===null, html_id==' + html_id + "\n");
            } // if
            node.setStyle(style_param_name, style_param_value);
        } catch (err) {
            raudrohi.tmg('a36c260f-b2a0-4c05-b524-93c210505dd7', err +
                                                                 "\n html_id==" +
                                                                 html_id +
                                                                 "\n style_param_name==" +
                                                                 style_param_name +
                                                                 "  style_param_value==" +
                                                                 style_param_value);
        } // catch
    } // raudrohi.adapter.editStyle

    raudrohi.adapter.set_innerHTML = function (html_id, a_string) {
        try {
            var node = Y_raudrohi.Node.get('#' + html_id);
            if (node === null) {
                raudrohi.tmg('0ec81b12-4571-4ff4-9224-93c210505dd7',
                    ' node===null ');
            } // if
            node.set('innerHTML', a_string);
        } catch (err) {
            raudrohi.tmg('4ac5ef40-0a67-4c67-9414-93c210505dd7', err +
                                                                 '  html_id==' +
                                                                 html_id +
                                                                 ' a_string==' +
                                                                 a_string);
        } // catch
    } // raudrohi.adapter.set_innerHTML

} // raudrohi.adapter.ports.yui_3_0

//------------------------------------------------------------------------

raudrohi.adapter.ports.yui_3_9_0 = function () {
    var self_public_ = this;
    this.get_name = function () {
        return 'YUI_3_9_0';
    } // get_name
    Y_raudrohi = YUI();
    if (raudrohi_settings_debug_JavaScript === true) {
        Y_raudrohi.use('console', "console-filters", "dd-plugin",
            'overlay', 'dd', 'node', 'attribute',
            'dom', 'event', 'get', 'io-base', 'node-load',
            'io-form', 'io-upload-iframe', 'json', 'json-stringify',
            'json-parse', 'event-key', 'key', function (Y) {

                raudrohi_adapter_isString = Y.Lang.isString;
                raudrohi_adapter_isArray = Y.Lang.isArray;
                raudrohi_adapter_isNumber = Y.Lang.isNumber;
                raudrohi_adapter_isBoolean = Y.Lang.isBoolean;
                raudrohi_adapter_isObject = Y.Lang.isObject;
                raudrohi_adapter_isUndefined = Y.Lang.isUndefined;
                raudrohi_adapter_isValue = Y.Lang.isValue;
                raudrohi_adapter_isFunction = Y.Lang.isFunction;

                raudrohi.internal_constructor();
                raudrohi.application_main_function();
            });
    } else {
        // The console related css seems to mess things up.
        // May be it has something to do with the fact that the console
        // component is still a beta.
        //
        // The reason, why the console component is here, is that
        // some weird errors happened to occur.
        Y_raudrohi.use("dd-plugin",
            'overlay', 'dd', 'node', 'attribute',
            'dom', 'event', 'get', 'io-base', 'node-load',
            'io-form', 'io-upload-iframe', 'json', 'json-stringify',
            'json-parse', 'event-key', 'key', function (Y) {

                raudrohi_adapter_isString = Y.Lang.isString;
                raudrohi_adapter_isArray = Y.Lang.isArray;
                raudrohi_adapter_isNumber = Y.Lang.isNumber;
                raudrohi_adapter_isBoolean = Y.Lang.isBoolean;
                raudrohi_adapter_isObject = Y.Lang.isObject;
                raudrohi_adapter_isUndefined = Y.Lang.isUndefined;
                raudrohi_adapter_isValue = Y.Lang.isValue;
                raudrohi_adapter_isFunction = Y.Lang.isFunction;

                raudrohi.internal_constructor();
                raudrohi.application_main_function();
            });
    } // else

    raudrohi.adapter.vars.YUI_3_9_0 = {};

    raudrohi.adapter.log = function (a_string) {
        if (raudrohi_settings_debug_JavaScript === true) {
            Y_raudrohi.log(a_string);
        } // if
    } // raudrohi.adapter.log

    raudrohi.adapter.trim = function (a_string) {
        try {
            return Y_raudrohi.Lang.trim(a_string);
        } catch (err) {
            raudrohi.tmg('2d41fca4-057a-4cc5-8914-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.trim

    raudrohi.adapter.YUI_preventdefault = function (e) {
        try {
            e.preventDefault();
        } catch (err) {
            raudrohi.tmg('20b0a651-7bf9-4d48-9314-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.YUI_preventdefault

    raudrohi.adapter.YUI_stoppropagation = function (e) {
        try {
            e.stopPropagation();
        } catch (err) {
            raudrohi.tmg('598ad635-a295-4ea9-8214-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.YUI_stoppropagation

    raudrohi.adapter.YUI_stoppropagation_preventdefault = function (e) {
        try {
            e.halt();
        } catch (err) {
            raudrohi.tmg('d2225755-caf5-43a5-8c14-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.YUI_stoppropagation_preventdefault

    raudrohi.adapter.YUI_create_console = function () {
        try {
            if (raudrohi_settings_debug_JavaScript === true) {
                YUI_based_LogReader = new Y_raudrohi.Console({
                    strings: {
                        title: 'Raudrohi Debugging Console',
                        pause: 'Wait',
                        clear: 'Flush',
                        collapse: 'Shrink',
                        expand: 'Grow'
                    },
                    visible: true// hidden at instantiation
                }).plug(Y_raudrohi.Plugin.ConsoleFilters)
                    .plug(Y_raudrohi.Plugin.Drag,
                    {handles: ['.yui3-console-hd']})
                    .render();
            } // if
        } catch (err) {
            raudrohi.tmg('fafa4f48-fdd0-4108-b414-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.YUI_create_console

    raudrohi.adapter.addEventListner =
    function (html_id, event_name, event_handler_func) {
        try {
            if (raudrohi_settings_debug_JavaScript === true) {
                if (!raudrohi_adapter_isString(html_id)) {
                    raudrohi.tmg('b703066b-c61f-4c9a-b514-93c210505dd7',
                        '(!raudrohi_adapter_isString(html_id))==true')
                } // if
                if (!raudrohi_adapter_isString(event_name)) {
                    raudrohi.tmg('8e07f31d-7f9e-493a-b504-93c210505dd7',
                        '(!raudrohi_adapter_isString(event_name))==true')
                } // if
                if (!raudrohi_adapter_isFunction(event_handler_func)) {
                    raudrohi.tmg('3c5a2f2f-eb58-4591-8404-93c210505dd7',
                        '(!raudrohi_adapter_isFunction(event_handler_func))==true');
                } // if
                raudrohi.adapter.vars.verify_event_name(event_name);
            } // if
            var key_listener_handle = Y_raudrohi.on(event_name, function (e) {
                //e.halt();// stopPropagation() and preventDefault()
                //key_listener_handle.detach();// unsubscribe so this only happens once
                event_handler_func(e);
            }, '#' + html_id);
            // The value is returned in order to be compatible wtih
            // the raudrohi.adapter.set_keylistener. The compatibility is
            // required in the raudrohi.widgets.g1.sys.keylisteners_unit.
            return key_listener_handle;
        } catch (err) {
            raudrohi.tmg('07061723-9d66-4e8e-a204-93c210505dd7',
                err + ' html_id==' + html_id + '  event_name==' + event_name);
        } // catch
    } // raudrohi.adapter.addEventListner

    raudrohi.adapter.set_keylistener =
    function (html_id, key_number_as_string, event_handler_func) {
        try {
            if (raudrohi_settings_debug_JavaScript === true) {
                if (!raudrohi_adapter_isString(html_id)) {
                    raudrohi.tmg('34015aed-d2e6-4723-9104-93c210505dd7',
                        '(!raudrohi_adapter_isString(html_id))==true')
                } // if
                if (!raudrohi_adapter_isString(key_number_as_string)) {
                    raudrohi.tmg('562ea14f-57d9-4534-8404-93c210505dd7',
                        '(!raudrohi_adapter_isString(key_number_as_string))==true')
                } // if
                if (!raudrohi_adapter_isFunction(event_handler_func)) {
                    raudrohi.tmg('321f9847-4952-4811-b504-93c210505dd7',
                        '(!raudrohi_adapter_isFunction(event_handler_func))==true');
                } // if
                // If the parseInt converts something like 'BumBastic' to
                // an int, then there will be trouble. It's not possible to
                // preprocess it here either.
                var key_code_candidate = parseInt(key_number_as_string, 10);
                if (!raudrohi.core.isWithinKeyeventKeyCodes(key_code_candidate)) {
                    raudrohi.tmg('5f180351-0aa2-4a03-a3f3-93c210505dd7',
                        'key_number(==' + key_number_as_string +
                        ') does not represent a ' +
                        'JavaScript key event key code.');
                } // if
            } // if
            var key_listener_handle = Y_raudrohi.on('key',
                function (e, arg1, arg2, etc) {
                    //e.halt();// stopPropagation() and preventDefault()
                    //key_listener_handle.detach();// unsubscribe so this only happens once
                    event_handler_func(e);
                }, '#' + html_id, 'down:' + key_number_as_string,
                Y_raudrohi, "arg1", "arg2", "etc");
            return key_listener_handle;
        } catch (err) {
            raudrohi.tmg('657db51d-fc12-4880-94f3-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.set_keylistener

    raudrohi.adapter.remove_keylistener = function (key_listener_handle) {
        try {
            key_listener_handle.detach();
        } catch (err) {
            raudrohi.tmg('e9bcf51e-9ade-49f7-91f3-93c210505dd7', err);
        } // catch
    } // remove_keylistener

    raudrohi.adapter.JSON2ob = function (a_json_string) {
        try {
            var an_object;
            //YUI().use('json-parse', function (Ytmp) {
            // JSON.parse throws a SyntaxError when passed invalid JSON
            try {
                an_object = Y_raudrohi.JSON.parse(a_json_string);
            }
            catch (e) {
                raudrohi.tmg("Invalid JSON string. " + e);
            }
            //});
            return an_object;
        } catch (err) {
            raudrohi.tmg('2be3f983-81ca-4d7c-a6f3-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.JSON2ob

    raudrohi.adapter.ob2JSON = function (an_object) {
        try {
            var s_json = '';
            //YUI().use('json-stringify', function (Ytmp) {
            s_json = Y_raudrohi.JSON.stringify(an_object) + '\n';
            //});
            return s_json;
        } catch (err) {
            raudrohi.tmg('39fb814d-4033-437f-83f3-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.JSON2ob


    raudrohi.adapter.send2server = function (url_string, data_as_text) {
        try {
            var fff = document.getElementById(
                'sirel_data_from_JavaScript_formscript_field');
            fff.value = data_as_text;
            var uri = url_string;

            // Define a function to handle the response data.
            function request_complete(id, o, args) {
                try {
                    // id ==Transaction ID.
                    var data = o.responseText; // Response data.
                    if (data != null) {// IE problems
                        if (raudrohi_adapter_isString(data)) {
                            if (data != '') {
                                raudrohi.adapter.server_response_eventhandler(data);
                            } // if
                        } // if
                    } // if
                    //  var args = args[1]; // 'ipsum'.
                } catch (err) {
                    raudrohi.tmg('1e217366-3952-4283-91f3-93c210505dd7', err);
                } // catch
            } // request_complete

            // Subscribe to event "io:complete", and pass an array
            // as an argument to the event handler "complete", since
            // "complete" is global.   At this point in the transaction
            // lifecycle, success or failure is not yet known.
            Y_raudrohi.on('io:complete', request_complete, this,
                ['lorem', 'ipsum']);
            // Make an HTTP request to <the url>.
            var cfg = {
                method: 'POST',
                //data: 'debug|||/dev/null|||',
                timeout: raudrohi.settings.ajax_request_timeout * 1000,
                on: {
                    // start: Dispatch.start,
                    complete: request_complete
                    //end: Dispatch.end
                },
                form: {
                    id: 'sirel_data_from_JavaScript_formscript_form',
                    upload: true
                }
            };
            var request = Y_raudrohi.io(uri, cfg);
        } catch (err) {
            raudrohi.tmg('4b863a2b-6492-4342-b4f3-93c210505dd7', err);
        } // catch
    } // raudrohi.adapter.send2server

    // Due to YUI's architecture there's a separate method for
    // editing the style attribute.
    raudrohi.adapter.setAttribute =
    function (html_id, attribute_name, attribute_value) {
        try {
            if (raudrohi_settings_debug_JavaScript === true) {
                if (!raudrohi_adapter_isString(html_id)) {
                    raudrohi.tmg('3051db57-32dd-4475-92e3-93c210505dd7',
                        '(!raudrohi_adapter_isString(html_id))==true')
                } // if
                if (!raudrohi_adapter_isString(attribute_name)) {
                    raudrohi.tmg('71f53b43-9eac-47c2-8ce3-93c210505dd7',
                        '(!raudrohi_adapter_isString(attribute_name))==true')
                } // if
                if (!raudrohi_adapter_isString(attribute_value)) {
                    raudrohi.tmg('6b075645-a641-4af3-b4e3-93c210505dd7',
                        '(!raudrohi_adapter_isString(attribute_value))==true')
                } // if
            } // if
            var node = Y_raudrohi.Node.get('#' + html_id);
            if (node === null) {
                raudrohi.tmg('ad15043e-34cf-47fc-84e3-93c210505dd7',
                    ' node===null ');
            } // if
            node.set(attribute_name, attribute_value);
        } catch (err) {
            raudrohi.tmg('4697a86c-b81c-4850-a5e3-93c210505dd7', err +
                                                                 '  html_id==' +
                                                                 html_id +
                                                                 ' attribute_name==' +
                                                                 attribute_name +
                                                                 '  attribute_value==' +
                                                                 attribute_value);
        } // catch
    } // raudrohi.adapter.setAttribute

    raudrohi.adapter.getAttribute = function (html_id, attribute_name) {
        try {
            if (raudrohi_settings_debug_JavaScript === true) {
                if (!raudrohi_adapter_isString(html_id)) {
                    raudrohi.tmg('2e0e2c14-d400-4511-b3e3-93c210505dd7',
                        '(!raudrohi_adapter_isString(html_id))==true')
                } // if
                if (!raudrohi_adapter_isString(attribute_name)) {
                    raudrohi.tmg('20098cb4-7f3a-4acb-afd3-93c210505dd7',
                        '(!raudrohi_adapter_isString(attribute_name))==true')
                } // if
            } // if
            var node = Y_raudrohi.Node.get('#' + html_id);
            if (node === null) {
                raudrohi.tmg('9290c7a1-ca41-4d87-92d3-93c210505dd7',
                    ' node===null ');
            } // if
            var attr_value = node.get(attribute_name);
            return attr_value;
        } catch (err) {
            raudrohi.tmg('75bf9f47-254c-42fc-83d3-93c210505dd7', err +
                                                                 '  html_id==' +
                                                                 html_id +
                                                                 ' attribute_name==' +
                                                                 attribute_name);
        } // catch
    } // raudrohi.adapter.getAttribute

    raudrohi.adapter.remove_HTML_attribute =
    function (html_id, attribute_name) {
        try {
            if (raudrohi_settings_debug_JavaScript === true) {
                if (!raudrohi_adapter_isString(html_id)) {
                    raudrohi.tmg('20756c61-2d21-4760-91d3-93c210505dd7',
                        '(!raudrohi_adapter_isString(html_id))==true')
                } // if
                if (!raudrohi_adapter_isString(attribute_name)) {
                    raudrohi.tmg('eddb5a2d-e373-4b42-a2d3-93c210505dd7',
                        '(!raudrohi_adapter_isString(attribute_name))==true')
                } // if
            } // if
            var node = Y_raudrohi.Node.one('#' + html_id);
            if (node === null) {
                raudrohi.tmg('225d9126-ada4-4d93-b4d3-93c210505dd7',
                    ' node===null ');
            } // if
            node.removeAttribute(attribute_name);
        } catch (err) {
            raudrohi.tmg('6339108f-2d53-4f6b-b5c3-93c210505dd7', err +
                                                                 '  html_id==' +
                                                                 html_id +
                                                                 ' attribute_name==' +
                                                                 attribute_name);
        } // catch
    } // raudrohi.adapter.remove_HTML_attribute


    raudrohi.adapter.editStyle =
    function (html_id, style_param_name, style_param_value) {
        try {
            if (raudrohi_settings_debug_JavaScript === true) {
                if (!raudrohi_adapter_isString(html_id)) {
                    raudrohi.tmg('7a2a3646-30ed-434b-92c3-93c210505dd7',
                        '(!raudrohi_adapter_isString(html_id))==true')
                } // if
                if (!raudrohi_adapter_isString(style_param_name)) {
                    raudrohi.tmg('63b7773f-5727-4467-b5c3-93c210505dd7',
                        '(!raudrohi_adapter_isString(style_param_name))==true')
                } // if
                if (!raudrohi_adapter_isString(style_param_value)) {
                    raudrohi.tmg('4b819742-4fc0-4ae1-a4c3-93c210505dd7',
                        '(!raudrohi_adapter_isString(style_param_value))==true')
                } // if
            } // if
            var node = Y_raudrohi.Node.one('#' + html_id);
            if (node === null) {
                raudrohi.tmg('88261134-7021-48f2-91c3-93c210505dd7',
                    ' node===null, html_id==' + html_id + "\n");
            } // if
            node.setStyle(style_param_name, style_param_value);
        } catch (err) {
            raudrohi.tmg('b5224852-1019-4dd2-82c3-93c210505dd7', err +
                                                                 "\n html_id==" +
                                                                 html_id +
                                                                 "\n style_param_name==" +
                                                                 style_param_name +
                                                                 "  style_param_value==" +
                                                                 style_param_value);
        } // catch
    } // raudrohi.adapter.editStyle

    raudrohi.adapter.set_innerHTML = function (html_id, a_string) {
        try {
            var node = Y_raudrohi.Node.get('#' + html_id);
            if (node === null) {
                raudrohi.tmg('c0acbc52-be2b-4fb2-b3b3-93c210505dd7',
                    ' node===null ');
            } // if
            node.set('innerHTML', a_string);
        } catch (err) {
            raudrohi.tmg('5cb6c047-142f-48c1-95b3-93c210505dd7', err +
                                                                 '  html_id==' +
                                                                 html_id +
                                                                 ' a_string==' +
                                                                 a_string);
        } // catch
    } // raudrohi.adapter.set_innerHTML

} // raudrohi.adapter.ports.yui_3_9_0

//------------------------------------------------------------------------


// As the data from the server arrives much later than the JavaScript
// files, this method must not be executed before everything has been
// downloaded. Otherwise the elem_id within this method ends up being null,
// because the element does not yet exist at the time of theis
// method execution.
//
// If b_make_no_assumptions_about_setup_availability==true, the library
// gets initiated with default setup values. Otherwise it is assumed
// that the server provides setup info.
raudrohi.initiate_adapter =
function (b_make_no_assumptions_about_setup_availability) {
    try {
        var port_name;
        try {
            if (b_make_no_assumptions_about_setup_availability === true) {
// RENESSAATOR_BLOCK_START
// RENESSAATOR_BLOCK_ID=raudrohi_initiate_adapter_block_1
// RENESSAATOR_SOURCE_LANGUAGE=Ruby
// RENESSAATOR_SOURCE_START
// RAUDROHI_HOME=ENV['RAUDROHI_HOME']
// require(RAUDROHI_HOME+"/src/dev_tools/code_generation/raudrohi_cg0.rb")
// puts "port_name='"+RAUDROHI_PORT_NAME+"';"
// RENESSAATOR_SOURCE_END
//
// RENESSAATOR_AUTOGENERATED_TEXT_START
port_name='YUI_3_0';

// RENESSAATOR_AUTOGENERATED_TEXT_END
// RENESSAATOR_BLOCK_END
                //  The following 3 are determined in raudrohi_core_v1.js
                //  raudrohi_settings_debug_JavaScript=true;
                //  raudrohi.settings.debug_SERVERSIDE=false;
                //  raudrohi.settings.ajax_request_timeout=3600; // seconds
            } else {
                var s_err_prefix = " The " +
                                   "b_make_no_assumptions_about_setup_availability!==true, but ";
                var elem_id = "webpage_initiation_data_from_server_raudrohi_port";
                var elem = document.getElementById(elem_id);
                if (elem === null) {
                    throw s_err_prefix + " the html document does not " +
                          "contain an element with an id of " +
                          "\"webpage_initiation_data_from_server_raudrohi_port\"." +
                          'GUID=="49917f64-9737-4730-b2b4-93c210505dd7"';
                } // if
                port_name = elem.innerHTML;
                elem_id =
                "webpage_initiation_data_from_server_debug_SERVERSIDE";
                elem = document.getElementById(elem_id);
                if (elem === null) {
                    throw "keyword: debug_SERVERSIDE, " +
                          'GUID=="3c02eda5-71c9-4e8e-bcb4-93c210505dd7"';
                } // if
                raudrohi.settings.debug_SERVERSIDE = raudrohi.core.str2bool(
                    elem.innerHTML);
                elem_id =
                "webpage_initiation_data_from_server_debug_JavaScript";
                elem = document.getElementById(elem_id);
                if (elem === null) {
                    throw "keyword: debug_JavaScript, " +
                          'GUID=="4d1f7704-4bfd-4489-beb4-93c210505dd7"';
                } // if
                raudrohi_settings_debug_JavaScript = raudrohi.core.str2bool(
                    elem.innerHTML);
                elem_id =
                "webpage_initiation_data_from_server_javascript_side_ajax_timeout";
                elem = document.getElementById(elem_id);
                if (elem !== null) {
                    var seconds = parseInt(elem.innerHTML);
                    raudrohi.settings.ajax_request_timeout = seconds;
                } // if
            } // else
        } catch (err) {
            throw 'GUID=="85e32b2e-f35f-4ae4-91b4-93c210505dd7", ' + err;
        } // catch
        raudrohi.adapter.ports.selected_port_name = port_name;
        switch (port_name) {
            case 'YUI_3_9_0':
                raudrohi.adapter.ports.yui_3_9_0();
                break;
            case 'YUI_3_0':
                raudrohi.adapter.ports.yui_3_0();
                break;
            default:
                if (raudrohi_settings_debug_JavaScript === true) {
                    throw 'GUID=="5d57fc75-1b26-4a44-a3b4-93c210505dd7"  ' +
                          'There\'s no branching for port_name(==' +
                          port_name + ').';
                } // if
        } // switch
    } catch (err) {
        throw 'GUID=="7d371f49-3ec4-436c-91a4-93c210505dd7", ' + err;
    } // catch
} // raudrohi.initiate_adapter

//------------------------------------------------------------------------
//=========================================================================

if (window.raudrohi_base_exists !== true) {
    window.raudrohi.base = {};
    window.raudrohi_base_exists = true;
} // if

if (window.raudrohi_base_private_code_exists !== true) {
    window.raudrohi.base.private_code = {};
    window.raudrohi_base_private_code_exists = true;
} // if

//------------------------------------------------------------------------
// Returns an integer between i_minimum and i_maximum.
// Part of this function has been Copy/Pasted from:
// http://www.javascriptkit.com/javatutors/randomnum.shtml
raudrohi.base.rand = function (i_minimum, i_maximum) {
    try {
        if (!raudrohi_adapter_isNumber(i_minimum)) {
            raudrohi.adapter.log("raudrohi.base.rand:: i_minimum is not a number.");
        } // if
        if (!raudrohi_adapter_isNumber(i_maximum)) {
            raudrohi.adapter.log("raudrohi.base.rand: i_maximum is not a number.");
        } // if
        if (i_minimum === i_maximum) {
            raudrohi.adapter.log("raudrohi.base.rand: i_minimum==i_maximum");
        } // if
        var mi;
        var ma;
        if (i_minimum < i_maximum) {
            mi = i_minimum;
            ma = i_maximum;
        } else {
            mi = i_maximum;
            ma = i_minimum;
            raudrohi.adapter.log("i_maximum < i_minimum");
        } // else
        var interval = ma - mi;
        var x = Math.floor(Math.random() * interval);
        return x + mi;
    } catch (err) {
        raudrohi.tmg('1b5c0f50-aeb4-4872-b24b-e181b0505dd7', err);
    } // catch
}; // raudrohi.base.rand

//------------------------------------------------------------------------

raudrohi.base.s_get_typename = function (x_in) {
    try {
        var s_out = null;
        if (raudrohi_adapter_isString(x_in) === true) {
            s_out = raudrohi_typename_String;
        } //
        if (raudrohi_adapter_isArray(x_in) === true) {
            s_out = raudrohi_typename_Array;
        } //
        if (raudrohi_adapter_isNumber(x_in) === true) {
            s_out = raudrohi_typename_Number;
        } //
        if (raudrohi_adapter_isBoolean(x_in) === true) {
            s_out = raudrohi_typename_Boolean;
        } //
        if (raudrohi_adapter_isObject(x_in) === true) {
            s_out = raudrohi_typename_Object;
        } //
        if (raudrohi_adapter_isUndefined(x_in) === true) {
            s_out = raudrohi_typename_Undefined;
        } //
        if (raudrohi_adapter_isValue(x_in) === true) {
            s_out = raudrohi_typename_Value;
        } //
        if (raudrohi_adapter_isFunction(x_in) === true) {
            s_out = raudrohi_typename_Function;
        } //
        if (x_in === null) {
            s_out = raudrohi_typename_null;
        } //
        if (s_out === null) {
            raudrohi.tmg('cd783952-ce54-4b1c-b54b-e181b0505dd7',
                "This function is not advanced enough to function " +
                "properly. x_in==" + x_in);
        } //
        return s_out;
    } catch (err) {
        raudrohi.tmg('85a9ae62-503b-4278-b44b-e181b0505dd7', err);
    } // catch
} // raudrohi.base.s_get_typename

//------------------------------------------------------------------------
raudrohi.base.assert_isString =
function (x_variable, s_variable_name, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    if (!raudrohi_adapter_isString(x_variable)) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + '(==' + x_variable + ') is not a string. ' +
            s_optional_errmsg_suffix);
    } // if
} // raudrohi.base.assert_isString

raudrohi.base.assert_isArray =
function (x_variable, s_variable_name, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    if (!raudrohi_adapter_isArray(x_variable)) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + '(==' + x_variable + ') is not an array. ' +
            s_optional_errmsg_suffix);
    } // if
} // raudrohi.base.assert_isArray

raudrohi.base.assert_isNumber =
function (x_variable, s_variable_name, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    // The ===null part is just in case. The problem is
    // that due to autoconversion ((4+null)===4)===true
    if ((!raudrohi_adapter_isNumber(x_variable)) || (x_variable === null)) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + '(==' + x_variable +
            ') is not of numeric type. ' +
            s_optional_errmsg_suffix);
    } // if
} // raudrohi.base.assert_isNumber

raudrohi.base.assert_isBoolean =
function (x_variable, s_variable_name, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    // The ===null part is just in case. The problem is
    // that due to autoconversion ((4+null)===4)===true
    if ((!raudrohi_adapter_isBoolean(x_variable)) || (x_variable === null)) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + '(==' + x_variable +
            ') is not of boolean type. ' +
            s_optional_errmsg_suffix);
    } // if
} // raudrohi.base.assert_isBoolean

raudrohi.base.assert_isObject =
function (x_variable, s_variable_name, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    if (!raudrohi_adapter_isObject(x_variable)) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + '(==' + x_variable + ') is not of Object type. ' +
            s_optional_errmsg_suffix);
    } // if
} // raudrohi.base.assert_isObject

raudrohi.base.assert_isUndefined =
function (x_variable, s_variable_name, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    if (!raudrohi_adapter_isUndefined(x_variable)) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + '(==' + x_variable +
            ') is not of Undefined type. ' +
            s_optional_errmsg_suffix);
    } // if
} // raudrohi.base.assert_isUndefined

raudrohi.base.assert_isValue =
function (x_variable, s_variable_name, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    if (!raudrohi_adapter_isValue(x_variable)) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + '(==' + x_variable + ') is not of Value type. ' +
            s_optional_errmsg_suffix);
    } // if
} // raudrohi.base.assert_isValue

raudrohi.base.assert_isFunction =
function (x_variable, s_variable_name, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    if (!raudrohi_adapter_isFunction(x_variable)) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + '(==' + x_variable + ') is not a function.');
    } // if
} // raudrohi.base.assert_isFunction

raudrohi.base.assert_isNotnull =
function (x_variable, s_variable_name, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    if (x_variable === null) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + '===null. ' + s_optional_errmsg_suffix);
    } // if
} // raudrohi.base.assert_isNotnull


raudrohi.base.assert_isKeyeventKeyCode =
function (x_variable, s_variable_name, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    if (!raudrohi.core.isWithinKeyeventKeyCodes(x_variable)) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + '(==' + x_variable + ') does not represent a ' +
            'JavaScript key event key code. ' + s_optional_errmsg_suffix);
    } // if
} // raudrohi.base.assert_isKeyeventKeyCode

raudrohi.base.assert_isWithinDomain =
function (x_variable, s_variable_name, Globally_Unique_Identifier_as_string,
    an_array_of_domain_set_elements, s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    var is_within_domain = false;
    var len = an_array_of_domain_set_elements.length;
    var i = 0;
    var elem;
    try {
        raudrohi.base.assert_isString(s_variable_name, 's_variable_name',
            '7f8c7f41-81e9-40db-a74b-e181b0505dd7');
        raudrohi.base.assert_isString(Globally_Unique_Identifier_as_string,
            'Globally_Unique_Identifier_as_string',
            '40d83322-d8b1-4a35-b24b-e181b0505dd7');
        raudrohi.base.assert_isArray(an_array_of_domain_set_elements,
            'an_array_of_domain_set_elements',
            '1ebf6942-2259-4fff-824b-e181b0505dd7');
        for (i = 0; i < len; i++) {
            elem = an_array_of_domain_set_elements[i];
            if (x_variable === elem) {
                is_within_domain = true;
                break;
            } // if
        } // for
    } catch (err) {
        raudrohi.tmg('36501e38-6df3-45fd-b14b-e181b0505dd7', err);
    } // catch
    if (!is_within_domain) {
        var s_domain = '';
        try {
            i = 0;
            for (i = 0; i < len; i++) {
                elem = an_array_of_domain_set_elements[i];
                if (i === 0) {
                    s_domain = elem;
                } else {
                    s_domain = s_domain + ', ' + elem;
                } // else
            } // for
        } catch (err) {
            raudrohi.tmg('be7f7642-f300-4ed7-814b-e181b0505dd7', err);
        } // catch
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + '(==' + x_variable + ') is not within domain' +
            '{' + s_domain + '}. ' + s_optional_errmsg_suffix);
    } // if
} // raudrohi.base.assert_isKeyeventKeyCode

// In math supremum is the least uper bound of set S.
// All upper bounds are greater than or equal to all of the set S
// elements.
raudrohi.base.assert_X1_isSmallerThanOrEqualTo_X2 =
function (x1, s_x1_name, Globally_Unique_Identifier_as_string, x2, s_x2_name,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    if (raudrohi_settings_debug_JavaScript === true) {
        raudrohi.base.assert_isNumber(x1, 'x1',
            '26c6ba31-4ad5-4fb7-b34b-e181b0505dd7');
        raudrohi.base.assert_isString(s_x1_name, 's_x1_name',
            'a3008f37-89a3-4fc0-a23b-e181b0505dd7');
        raudrohi.base.assert_isNumber(x2, 'x2',
            '3372cb0c-6aa2-40a0-ab3b-e181b0505dd7');
        raudrohi.base.assert_isString(s_x2_name, 's_x2_name',
            '624ad246-736a-49a0-a13b-e181b0505dd7');
    } // if
    if (x2 < x1) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_x2_name + '(==' + x2 + ') < ' + s_x1_name + '(==' + x1 + '). ' +
            s_optional_errmsg_suffix);
    } // if
} // raudrohi.base.assert_X1_isSmallerThanOrEqualTo_X2

//------------------------------------------------------------------
raudrohi.base.private_code.assert_incdec_t1 =
function (ar_number_candidates, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix, func_1) {
    try {
        s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                                   'undefined' ? s_optional_errmsg_suffix : '';
        var i_len = null;
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isArray(
                ar_number_candidates, 'ar_number_candidates',
                'f8125438-bea1-41d7-a13b-e181b0505dd7');
            raudrohi.base.assert_isString(Globally_Unique_Identifier_as_string,
                'Globally_Unique_Identifier_as_string',
                '65c2fb28-6f85-4dd6-953b-e181b0505dd7');
            raudrohi.base.assert_isString(
                s_optional_errmsg_suffix, 's_optional_errmsg_suffix',
                '3afc4c1f-7570-4388-b23b-e181b0505dd7');
            i_len = ar_number_candidates.length;
            if (i_len === 0) {
                raudrohi.tmg('45256186-f28c-42e8-823b-e181b0505dd7',
                    'ar_number_candidates.length==0');
            } // if
        } // if
        i_len = ar_number_candidates.length;
        var i = 0;
        var x_number_candidate;
        var x_1 = null;
        var x_2 = ar_number_candidates[0];
        var i_x_2 = 0;
        var ar_0 = [x_2, i_x_2];
        var func_isNumber = raudrohi_adapter_isNumber; // speedhack
        var func_Math_floor = Math.floor; // speedhack
        var func_Math_abs = Math.abs; // speedhack
        for (i = 0; i < i_len; i++) {
            x_number_candidate = ar_number_candidates[i];
            if (!func_isNumber(x_number_candidate)) {
                raudrohi.tmg(Globally_Unique_Identifier_as_string,
                    "ar_number_candidates[" + i + "] is of type " +
                    raudrohi.base.s_get_typename(x_number_candidate));
            } // if
            x_1 = func_Math_abs(
                x_number_candidate - func_Math_floor(x_number_candidate)) + 1;
            if (1 < x_1) { // +1 is due to the fact that a valid index can be 0.
                raudrohi.tmg(Globally_Unique_Identifier_as_string,
                    "ar_number_candidates[" + i + "](==" +
                    x_number_candidate + ") is of numeric type, but " +
                    "it was a floating point number.");
            } // if
            func_1(ar_0, x_number_candidate, i,
                Globally_Unique_Identifier_as_string);
        } // for
    } catch (err) {
        raudrohi.tmg('2e6ee544-65ee-4f9d-a52b-e181b0505dd7', err);
    } // catch
} //  raudrohi.base.private_code.assert_incdec_t1


raudrohi.base.assert_monotonic_increase_i =
function (ar_number_candidates, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    try {
        s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                                   'undefined' ? s_optional_errmsg_suffix : '';
        var func_1 = function (ar_0, x_number_candidate, i,
            Globally_Unique_Identifier_as_string) {
            try {
                var x_2 = ar_0[0];
                var i_x_2 = ar_0[1];
                if (x_number_candidate < x_2) {
                    raudrohi.tmg(Globally_Unique_Identifier_as_string,
                        "ar_number_candidates[" + i + "] == " +
                        x_number_candidate +
                        " < ar_number_candidates[" + i_x_2 + "] == " + x_2);
                } // if
                ar_0[0] = x_number_candidate;
                ar_0[1] = i;
            } catch (err) {
                raudrohi.tmg('b93ff25d-ffae-43d5-832b-e181b0505dd7', err);
            } // catch
        } // func_1
        raudrohi.base.private_code.assert_incdec_t1(
            ar_number_candidates, Globally_Unique_Identifier_as_string,
            s_optional_errmsg_suffix, func_1);
    } catch (err) {
        raudrohi.tmg('6f93821d-e581-4974-942b-e181b0505dd7', err);
    } // catch
} // raudrohi.base.assert_monotonic_increase_i

raudrohi.base.assert_monotonic_decrease_i =
function (ar_number_candidates, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    try {
        // The followint 3-liner can not be used due to
        // error message text differences:
        //
        // -----  3-liner start ------
        // ar_reversed = ar_number_candidates.reverse();
        // raudrohi.base.assert_monotonic_increase_i(ar_reversed,
        //     Globally_Unique_Identifier_as_string, s_optional_errmsg_suffix);
        // -----  3-liner end ------
        //
        // However, the code here is a slightly edited version of the
        // raudrohi.base.assert_monotonic_increase .
        var func_1 = function (ar_0, x_number_candidate, i,
            Globally_Unique_Identifier_as_string) {
            try {
                var x_2 = ar_0[0];
                var i_x_2 = ar_0[1];
                if (x_2 < x_number_candidate) {
                    raudrohi.tmg(Globally_Unique_Identifier_as_string,
                        "ar_number_candidates[" + i_x_2 + "] == " + x_2 +
                        " < ar_number_candidates[" + i + "] == " +
                        x_number_candidate);
                } // if
                ar_0[0] = x_number_candidate;
                ar_0[1] = i;
            } catch (err) {
                raudrohi.tmg('136ce919-ab68-4e0e-842b-e181b0505dd7', err);
            } // catch
        } // if
        raudrohi.base.private_code.assert_incdec_t1(
            ar_number_candidates, Globally_Unique_Identifier_as_string,
            s_optional_errmsg_suffix, func_1);
    } catch (err) {
        raudrohi.tmg('351aab92-3091-4071-b12b-e181b0505dd7', err);
    } // catch
} // raudrohi.base.assert_monotonic_decrease_i

//------------------------------------------------------------------

raudrohi.base.assert_keysExist =
function (ht_in, s_hashtable_variable_name, ar_keys,
    Globally_Unique_Identifier_as_string, s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    var b_throw = false;
    var s_msg = "";
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isObject(ht_in, 'ht_in',
                '28dc60d5-a34d-4c79-942b-e181b0505dd7');
            raudrohi.base.assert_isString(s_hashtable_variable_name,
                's_hashtable_variable_name',
                '3d3ef83e-d73c-42ec-a52b-e181b0505dd7');
            raudrohi.base.assert_isArray(ar_keys, 'ar_keys',
                '1f33c425-34ba-4c6d-842b-e181b0505dd7');
            raudrohi.base.assert_isString(Globally_Unique_Identifier_as_string,
                'Globally_Unique_Identifier_as_string',
                '1f00d23d-0eb9-47d4-a51b-e181b0505dd7');
        } // if
        var len = ar_keys.length;
        var i = 0;
        var key;
        for (i = 0; i < len; i++) {
            key = ar_keys[i];
            if (ht_in.containsKey(key) === false) {
                b_throw = true;
                s_msg = "Key \"" + key + "\" is missing from the hashtable.";
                break;
            } // if
        } // for
    } catch (err) {
        raudrohi.tmg('6775b33b-0fa6-4257-951b-e181b0505dd7', err);
    } // catch
    if (b_throw === true) {
        raudrohi.tmg('18d8e24c-5eaf-4ab2-b11b-e181b0505dd7',
            s_msg + ' ' + s_optional_errmsg_suffix);
    } // if
} //  raudrohi.base.assert_keysExist

//------------------------------------------------------------------------

// ar[0]==<boolean>
// if ar[0]===false, then ar[1]==<GUID in quotes>
raudrohi.base.private_code.ar_x_is_g1_widget =
function (ob_g1_widget_candidate) {
    try {
        var ob_in = ob_g1_widget_candidate;
        var ar_out = [false];
        if (raudrohi_adapter_isObject(ob_in) !== true) {
            ar_out.push('4672891a-8ac4-4599-841b-e181b0505dd7');
            return ar_out;
        } // if
        if (ob_in.private_code_ === undefined) {
            ar_out.push('750ce9cc-c888-41c8-8c1b-e181b0505dd7');
            return ar_out;
        } // if
        if (ob_in.private_code_.evh_ === undefined) {
            ar_out.push('84a0539b-e95a-4021-8c1b-e181b0505dd7');
            return ar_out;
        } // if
        if (ob_in.private_code_.func === undefined) {
            ar_out.push('93258d45-4f75-479a-a21b-e181b0505dd7');
            return ar_out;
        } // if
        if (ob_in.private_code_.selfread === undefined) {
            ar_out.push('e9ae1323-5b7b-47a5-911b-e181b0505dd7');
            return ar_out;
        } // if
        if (ob_in.private_code_.customizable === undefined) {
            ar_out.push('58c69c37-47dd-442d-a50b-e181b0505dd7');
            return ar_out;
        } // if
        if (ob_in.private_code_.customizable.optional === undefined) {
            ar_out.push('176aa64a-a00d-4146-910b-e181b0505dd7');
            return ar_out;
        } // if
        if (ob_in.private_code_.customizable.compulsory === undefined) {
            ar_out.push('3538f14f-3d91-4850-8f0b-e181b0505dd7');
            return ar_out;
        } // if
        if (ob_in.private_code_.ar_widgets_ === undefined) {
            ar_out.push('1bd9b747-fd14-4e02-b40b-e181b0505dd7');
            return ar_out;
        } // if
        //------------------------------------------
        if (ob_in.thrjr_ === undefined) {
            ar_out.push('23d08b12-c41d-4203-930b-e181b0505dd7');
            return ar_out;
        } // if
        if (ob_in.wg_hooks_ === undefined) {
            ar_out.push('4e4abd4c-5a08-4bb4-850b-e181b0505dd7');
            return ar_out;
        } // if
        //------------------------------------------
        if (ob_in.only_for_raudrohi_core_developers === undefined) {
            ar_out.push('4f1e272f-46f9-4c26-910b-e181b0505dd7');
            return ar_out;
        } // if
        if (ob_in.only_for_raudrohi_core_developers.s_widget_architecture_class ===
            undefined) {
            ar_out.push('2aca9563-1bfd-484a-b5fa-e181b0505dd7');
            return ar_out;
        } // if
        if (ob_in.only_for_raudrohi_core_developers.s_widget_architecture_class !==
            "g1") {
            ar_out.push('b5a096c6-fc84-4236-bcfa-e181b0505dd7');
            return ar_out;
        } // if
        //------------------------------------------
        ar_out[0] = true;
        return ar_out;
    } catch (err) {
        raudrohi.tmg('12a978d7-ee00-4ed4-a3fa-e181b0505dd7', err);
    } // catch
} // raudrohi.base.private_code.ar_x_is_g1_widget

raudrohi.base.b_is_g1_widget = function (ob_g1_widget_candidate) {
    try {
        var ar = raudrohi.base.private_code.ar_x_is_g1_widget(
            ob_g1_widget_candidate);
        var b_out = ar[0];
        return b_out;
    } catch (err) {
        raudrohi.tmg('ae77fe55-db1b-4876-81fa-e181b0505dd7', err);
    } // catch
} // raudrohi.base.b_is_g1_widget

raudrohi.base.assert_is_g1_widget =
function (x_variable, s_variable_name, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    var ar = raudrohi.base.private_code.ar_x_is_g1_widget(x_variable);
    var b_is_g1_widget = ar[0];
    if (b_is_g1_widget !== true) {
        var s_reason_GUID = ar[1];
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + ' is not of a widget from the ' +
            'raudrohi.widgets.g1 namespace. ' + "\n" +
            'reason GUID==' + s_reason_GUID + " \n" +
            s_optional_errmsg_suffix);
    } // if
} // raudrohi.base.assert_is_g1_widget

//------------------------------------------------------------------------
var raudrohi_base_private_code_assert_is_HTML_ID_ht_ids = new Hashtable();
var raudrohi_base_private_code_assert_is_HTML_ID_s_msg_1 = "is not suitable to be an HTML ID.";
raudrohi.base.assert_is_HTML_ID =
function (x_variable, s_variable_name, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    var s_msg_1 = raudrohi_base_private_code_assert_is_HTML_ID_s_msg_1;
    if (0 < s_optional_errmsg_suffix.length) {
        s_msg_1 = s_msg_1 + "\n";
    } // if
    if (!raudrohi_adapter_isString(x_variable)) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + '(==' + x_variable +
            ") is not a string and therefore \n" + s_msg_1 +
            s_optional_errmsg_suffix);
    } // if
    var i_len = x_variable.length;
    if (i_len < 1) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + '.length == ' + i_len + " < 1 and therefore " +
            s_msg_1 + s_optional_errmsg_suffix);
    } // if
    var s_0 = x_variable.replace(/[\s]/g, "");
    i_len = s_0.length;
    if (i_len != x_variable.length) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + ' ==\"' + x_variable +
            "\" \n contains spaces and tabs and therefore " + s_msg_1 +
            s_optional_errmsg_suffix);
    } // if
    var ix = x_variable.search(/^[\w]/); // matches also digits
    if (ix < 0) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + ' ==\"' + x_variable +
            "\" \n does not start with a character and therefore " + s_msg_1 +
            s_optional_errmsg_suffix);
    } // if
    ix = x_variable.search(/^[\d]/);
    if (ix == 0) { // i.e. first character is a digit
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + ' ==\"' + x_variable +
            "\" \n does not start with a character and therefore " + s_msg_1 +
            s_optional_errmsg_suffix);
    } // if
    //---------------------------------
    var ht_ids = raudrohi_base_private_code_assert_is_HTML_ID_ht_ids;
    if (ht_ids.containsKey(x_variable) !== false) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            s_variable_name + ' ==\"' + x_variable +
            "\" \n is a valid HTML ID, but \nHTML ID-s have to be unique " +
            "within a single application and in this case the value,\n\"" +
            x_variable + "\"\n" +
            "has been used more than once.\n" + s_optional_errmsg_suffix);
    } // if
    ht_ids.put(x_variable, 42);
} // raudrohi.base.assert_is_HTML_ID

//------------------------------------------------------------------------
raudrohi.base.generate_id_cursor = 1;

raudrohi.base.generate_id = function () {
    try {
        // The raudrohi.base.generate_id_cursor is used for compensating
        // a poor random number generator. One just never knows.
        var x = raudrohi.base.generate_id_cursor++;
        if (x < 0) {
            raudrohi.base.generate_id_cursor = 1;
            x = 1;
        } // if
        var y = raudrohi.core.safe_positive_int;
        var answer = x + '_' + raudrohi.base.rand(0, y) + '_' +
                     raudrohi.base.rand(0, y);
        return answer;
    } catch (err) {
        raudrohi.tmg('da88cc5c-7121-4a3b-92fa-e181b0505dd7', err);
    } // catch
}; // raudrohi.base.generate_id

//------------------------------------------------------------------------


//------------------------------------------------------------------------
// Returns null, if the s_needle does not exist within the
// s_haystack or the s_needle=="" or the s_haystack==0.
// Otherwise returns a raudrohi.core.pair instance that
// consists of 2 strings:
// the part before the first occurrence of the s_needle and
// the part after the first occurrence of the needle string.
// Example # 1:
//         s_haystack=='hi|||there|||everybody'
//         s_needle=='|||'
//         answer.a=='hi'     answer.b=='there|||everybody'
//
// Example # 2:
//         s_haystack=='welcome|||'
//         s_needle=='|||'
//         answer.a=='welcome'     answer.b==''
raudrohi.base.bisect = function (s_haystack, s_needle) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(s_haystack, 's_haystack',
                'b56925f4-4240-460e-93fa-e181b0505dd7');
            raudrohi.base.assert_isString(s_needle, 's_needle',
                '9fe31a51-ba46-4ddf-b2fa-e181b0505dd7');
            if (s_needle.length === 0) {
                raudrohi.tmg('4a566073-04b5-4438-aaea-e181b0505dd7',
                    's_needle.length==0');
            }
        } // if
        // For reference:
        // IE8 and Firefox:    ''.indexOf('')==0;
        // IE8 and Firefox:    ''.indexOf('x')==(-1);
        // IE8 and Firefox:    'x'.indexOf('')==0;
        // IE8 and Firefox:    'x'.indexOf('',7)==1;
        // IE8 and Firefox:    ''.indexOf('',7)==0;

        var i_s_needlelen = s_needle.length;
        var ix = s_haystack.indexOf(s_needle);
        if ((ix === (-1)) || (i_s_needlelen === 0)) {
            // Covers also the case, where  i_s_haystacklen < i_s_needlelen
            return null;
        } // if
        var i_s_haystacklen = s_haystack.length;
        if (i_s_haystacklen === 0) {
            return null;
        } // if
        var answer = new raudrohi.core.pair();
        if (ix === 0) {
            answer.a = '';
            if (i_s_needlelen === i_s_haystacklen) {
                answer.b = '';
            } else {
                answer.b = s_haystack.substring(i_s_needlelen);
            } // else
        } // if
        answer.a = s_haystack.substring(0, ix);
        ix = ix + i_s_needlelen;
        if (ix === i_s_haystacklen) {
            answer.b = '';
        } else {
            answer.b = s_haystack.substring(ix);
        } // else
        return answer;
    } catch (err) {
        raudrohi.tmg('6b144211-bd43-41f1-a3ea-e181b0505dd7', err +
                                                             '  s_haystack==' +
                                                             s_haystack +
                                                             '  s_needle==' +
                                                             s_needle);
    } // catch
}; // raudrohi.base.bisect

//------------------------------------------------------------------------
raudrohi.base.private_code.replace_all_globalvars = {}
raudrohi.base.private_code.replace_all_globalvars.inited = false;

raudrohi.base.private_code.replace_all_init_globalvars_if_uninited =
function () {
    try {
        if (raudrohi.base.private_code.replace_all_globalvars.inited === true) {
            return;
        } // if
        // To avoid messing up the global arrays.
        raudrohi.base.private_code.replace_all_globalvars.inited = true;
        var ar_in = [];
        var ar_in_rgx = [];
        var ar_middle = [];
        var ar_middle_rgx = [];
        var ar_out = [];
        var s_prefix = "raUdroh6i_bAsE_pRivAte9_co7de_rePlaCe_aLl_miD8dlevalueprefix_";
        var s_middle = null;

        ar_in.push("[");
        ar_in_rgx.push(new RegExp("[\\[]", "g"));
        s_middle = s_prefix + "LSQUAREBRACE_34";
        ar_middle.push(s_middle);
        ar_middle_rgx.push(new RegExp(s_middle, "g"));
        ar_out.push("[\\[]");

        ar_in.push("]");
        ar_in_rgx.push(new RegExp("[\\]]", "g"));
        s_middle = s_prefix + "RSQUAREBRACE_32";
        ar_middle.push(s_middle);
        ar_middle_rgx.push(new RegExp(s_middle, "g"));
        ar_out.push("[\\]]");

        ar_in.push("+");
        ar_in_rgx.push(new RegExp("[+]", "g"));
        s_middle = s_prefix + "PLUS_";
        ar_middle.push(s_middle);
        ar_middle_rgx.push(new RegExp(s_middle, "g"));
        ar_out.push("[+]");

        ar_in.push("{");
        ar_in_rgx.push(new RegExp("[{]", "g"));
        s_middle = s_prefix + "LCURLYbRACE_4";
        ar_middle.push(s_middle);
        ar_middle_rgx.push(new RegExp(s_middle, "g"));
        ar_out.push("[{]");

        ar_in.push("}");
        ar_in_rgx.push(new RegExp("[}]", "g"));
        s_middle = s_prefix + "RCURLYbRACE_9";
        ar_middle.push(s_middle);
        ar_middle_rgx.push(new RegExp(s_middle, "g"));
        ar_out.push("[}]");

        ar_in.push("*");
        ar_in_rgx.push(new RegExp("[*]", "g"));
        s_middle = s_prefix + "sTAR_99";
        ar_middle.push(s_middle);
        ar_middle_rgx.push(new RegExp(s_middle, "g"));
        ar_out.push("[*]");

        ar_in.push("^");
        ar_in_rgx.push(new RegExp("[\\^]", "g"));
        s_middle = s_prefix + "LINESTArT_24";
        ar_middle.push(s_middle);
        ar_middle_rgx.push(new RegExp(s_middle, "g"));
        ar_out.push("[\\^]");

        ar_in.push("$");
        ar_in_rgx.push(new RegExp("[$]", "g"));
        s_middle = s_prefix + "LInEEND_12";
        ar_middle.push(s_middle);
        ar_middle_rgx.push(new RegExp(s_middle, "g"));
        ar_out.push("[$]");

        ar_in.push("(");
        ar_in_rgx.push(new RegExp("[(]", "g"));
        s_middle = s_prefix + "LBRAcE_37";
        ar_middle.push(s_middle);
        ar_middle_rgx.push(new RegExp(s_middle, "g"));
        ar_out.push("[(]");

        ar_in.push(")");
        ar_in_rgx.push(new RegExp("[)]", "g"));
        s_middle = s_prefix + "RBrACE_23";
        ar_middle.push(s_middle);
        ar_middle_rgx.push(new RegExp(s_middle, "g"));
        ar_out.push("[)]");

        ar_in.push(".");
        ar_in_rgx.push(new RegExp("[.]", "g"));
        s_middle = s_prefix + "POInT_168";
        ar_middle.push(s_middle);
        ar_middle_rgx.push(new RegExp(s_middle, "g"));
        ar_out.push("[.]");

        ar_in.push("-");
        ar_in_rgx.push(new RegExp("[-]", "g"));
        s_middle = s_prefix + "MiNUS_1285";
        ar_middle.push(s_middle);
        ar_middle_rgx.push(new RegExp(s_middle, "g"));
        ar_out.push("[-]");

        // Actually, "|" should be sufficient, but
        // by adding the "|||" before the "|"
        // speeds up ProgFTE and formscript routines.
        var rgx_triplepillar = new RegExp("[|]{3}", "g");
        ar_in.push("|||");
        ar_in_rgx.push(rgx_triplepillar);
        s_middle = s_prefix + "TrIPLEpILlar_9123";
        ar_middle.push(s_middle);
        ar_middle_rgx.push(new RegExp(s_middle, "g"));
        ar_out.push("[|]{3}");
        raudrohi.base.private_code.replace_all_globalvars.rgx_triplepillar =
        rgx_triplepillar;

        ar_in.push("|");
        ar_in_rgx.push(new RegExp("[|]", "g"));
        s_middle = s_prefix + "sinGLEPilLAR_14867";
        ar_middle.push(s_middle);
        ar_middle_rgx.push(new RegExp(s_middle, "g"));
        ar_out.push("[|]");

        raudrohi.base.private_code.replace_all_globalvars.ar_in = ar_in;
        raudrohi.base.private_code.replace_all_globalvars.ar_in_rgx = ar_in_rgx;
        raudrohi.base.private_code.replace_all_globalvars.ar_middle = ar_middle;
        raudrohi.base.private_code.replace_all_globalvars.ar_middle_rgx =
        ar_middle_rgx;
        raudrohi.base.private_code.replace_all_globalvars.ar_out = ar_out;

    } catch (err) {
        raudrohi.tmg('57fb014e-f4a9-445b-a3ea-e181b0505dd7', err);
    } // catch
} // raudrohi.base.private_code.replace_all_init_globalvars
raudrohi.base.private_code.replace_all_init_globalvars_if_uninited();

raudrohi.base.private_code.replace_all_speedhack_for_triplepillar =
function (s_substitution, s_haystack) {
    try {
        var rgx_triplepillar = raudrohi.base.private_code.replace_all_globalvars.rgx_triplepillar;
        var s_out = s_haystack.replace(rgx_triplepillar, s_substitution);
        return s_out;
    } catch (err) {
        raudrohi.tmg('30d7ad24-ef4c-474b-84ea-e181b0505dd7', err);
    } // catch
} // raudrohi.base.private_code.replace_all_speedhack_for_triplepillar

// The reason, why raudrohi.base.gsub exists at
// all is that as of December 2009 the code
// "var a_string='XXX'.replace('X','Z','g');"
//  assigns 'ZZZ' to the a_string in the case of the FireFox,
//  but 'ZXX' in the case of Microsoft Internet Explorer 8.
// The 'g' is a flag that means 'replace ALL'. So, the M$ team
// has done a "great, bugfree, job" again. Congratulations!
raudrohi.base.gsub = function (s_substitution, s_needle, s_haystack) {
    try {
        raudrohi.base.private_code.replace_all_init_globalvars_if_uninited();
        var len_n = s_needle.length;
        if (len_n === 0) {
            // One of the reaasons, why this has been declared to be
            // an illegal case is that it's not so clear, whether
            // the haystack should be considered to be
            // prefixed and suffixed with the ''. Another reason is
            // that it's not such an often used case, so it probably
            // does not bother if the case, where the s_needle==''
            // is declared to be illegal.
            raudrohi.tmg('c28cd696-1d77-4d1c-92ea-e181b0505dd7',
                's_needle.length==0');
        } // if
        var len_h = s_haystack.length;
        if (len_h === 0) {
            return '';
        } // if
        var s_out = null;
        if (len_n === 3) {
            if (s_needle === "|||") {
                s_out =
                raudrohi.base.private_code.replace_all_speedhack_for_triplepillar(
                    s_substitution, s_haystack);
                return s_out;
            } // if
        } // if
        // The following code is based on an idea that
        // originates from
        // http://www.webmasterworld.com/javascript/3484761.htm
        // and is written by a user called Fotiman in a message with an
        // id of #:3485093
        //
        // TODO: refactor it to use the raudrohi.lang.str2regexstr.
        // May be one has to move the htQueue  somewhere else. So, anyway,
        // it'll be some substantial code migration between different
        // namespaces. Currently there's a small mess with this all.

        var ar_in = raudrohi.base.private_code.replace_all_globalvars.ar_in;
        var ar_in_rgx = raudrohi.base.private_code.replace_all_globalvars.ar_in_rgx;
        var ar_middle = raudrohi.base.private_code.replace_all_globalvars.ar_middle;
        var ar_middle_rgx = raudrohi.base.private_code.replace_all_globalvars.ar_middle_rgx;
        var ar_out = raudrohi.base.private_code.replace_all_globalvars.ar_out;

        var ar_replacement_ix = [];

        var i_len = ar_in.length;
        var i = 0;
        var s_needle0 = s_needle;
        var s_needle1 = s_needle;
        var i_s_needle_len0 = s_needle.length;
        var i_s_needle_len1 = i_s_needle_len0;
        var rgx_in = null;
        var s_middle = null;
        for (i = 0; i < i_len; i = i + 1) {
            rgx_in = ar_in_rgx[i];
            s_middle = ar_middle[i];
            s_needle1 = s_needle0.replace(rgx_in, s_middle);
            i_s_needle_len1 = s_needle1.length;
            if (i_s_needle_len1 !== i_s_needle_len0) {
                ar_replacement_ix.push(i);
            } // if
            i_s_needle_len0 = i_s_needle_len1
            s_needle0 = s_needle1;
        } // for
        i = 0;
        i_len = ar_replacement_ix.length;
        var ii = null;
        var rgx_middle = null;
        var s = null;
        for (i = 0; i < i_len; i = i + 1) {
            ii = ar_replacement_ix[i];
            rgx_middle = ar_middle_rgx[ii];
            s = ar_out[ii];
            s_needle1 = s_needle0.replace(rgx_middle, s);
            s_needle0 = s_needle1;
        } // for
        s_out = s_haystack.replace(new RegExp(s_needle0, "g"), s_substitution);
        return s_out;
    } catch (err) {
        raudrohi.tmg('269c1437-2654-48da-b5ea-e181b0505dd7', err +
                                                             '  s_substitution==' +
                                                             s_substitution +
                                                             '  s_needle==' +
                                                             s_needle +
                                                             '  s_haystack==' +
                                                             s_haystack);
    } // catch
} // raudrohi.base.gsub

//------------------------------------------------------------------------
// Returns a string that contains only "\n" as linebreaks.
raudrohi.base.normalize_linebreaks = function (a_string) {
    try {
        raudrohi.base.assert_isString(a_string, 'a_string',
            '43e0d642-b67f-469e-a3ea-e181b0505dd7');
        if (a_string === '') {
            return '';
        } // if
        // A citation from http://en.wikipedia.org/wiki/Newline
        // (visit date: January 2010)
        //
        // The Unicode standard defines a large number of characters that
        // conforming applications should recognize as line terminators: [2]
        //
        //  LF:    Line Feed, U+000A
        //  CR:    Carriage Return, U+000D
        //  CR+LF: CR (U+000D) followed by LF (U+000A)
        //  NEL:   Next Line, U+0085
        //  FF:    Form Feed, U+000C
        //  LS:    Line Separator, U+2028
        //  PS:    Paragraph Separator, U+2029
        var s1 = raudrohi.base.gsub("\n", "\r\n", a_string);
        var s2 = raudrohi.base.gsub("\n", "\r", s1);
        s1 = raudrohi.base.gsub("\n", "\u0085", s2);
        s2 = raudrohi.base.gsub("\n", "\u000C", s1);
        s1 = raudrohi.base.gsub("\n", "\u2028", s2);
        s2 = raudrohi.base.gsub("\n", "\u2029", s1);
        return s2;
    } catch (err) {
        raudrohi.tmg('34e33ab3-0349-47be-a3da-e181b0505dd7', err);
    } // catch
} // raudrohi.base.normalize_linebreaks


// Returns a string that contains only " " as spaces.
raudrohi.base.normalize_whitespaces = function (a_string) {
    try {
        raudrohi.base.assert_isString(a_string, 'a_string',
            '4e5df530-fe1c-494a-94da-e181b0505dd7');
        // Some of the code points and comments as copy-pasted
        // from http://en.wikipedia.org/wiki/Space_(punctuation)
        // in January, 2010:
        //
        // U 0020,  &#32;
        // Normal space, same as ASCII character 0x20
        //
        // U 00A0, 	&nbsp;
        // Identical to U+0020, but not a point at which a line may be broken.
        //
        // U 2002, &ensp;
        // Width of one en (half of one em). U+2000 En Quad is canonically
        // equivalent to this character (En Space is preferred).
        //
        // U 2003, &emsp;
        // Width of one em. U+2001 Em Quad is canonically equivalent to
        // this character (Em Space is preferred).
        //
        // U 2007, 	&#8199;
        // In fonts with monospaced digits, equal to the width of one digit
        //
        // U 200A, &#8202;
        // Thinner than a thin space
        //
        // U 205F, &#8287;
        // Used in mathematical formulae. Four-eighteenths of an em. In
        // mathematical typography, the widths of spaces are usually given in
        // integral multiples of an eighteenth of an em, and 4/18 em may be
        // used in several situations, for example between the a and the + and
        // between the + and the b in the expression a + b.
        //
        // U 3000, &#12288;
        // As wide as a CJK character cell
        //
        var s1 = raudrohi.base.gsub(' ', "\u00A0", a_string);
        var s2 = raudrohi.base.gsub(' ', "\u2002", s1);
        s1 = raudrohi.base.gsub(' ', "\u2003", s2);
        s2 = raudrohi.base.gsub(' ', "\u2007", s1);
        s1 = raudrohi.base.gsub(' ', "\u200A", s2);
        s2 = raudrohi.base.gsub(' ', "\u205F", s1);
        s1 = raudrohi.base.gsub(' ', "\u3000", s2);
        s2 = raudrohi.base.gsub('    ', "\t", s1);
        return s2;
    } catch (err) {
        raudrohi.tmg('0085c12c-c4c1-42e5-91da-e181b0505dd7', err);
    } // catch
} //  raudrohi.base.normalize_whitespaces

// Returns a modified version of the s_haystack.
raudrohi.base.gsubAllLinebreaksSpacesTabs = function (s_haystack) {
    try {
        var s1 = raudrohi.base.normalize_whitespaces(s_haystack);
        var s2 = raudrohi.base.normalize_linebreaks(s1);
        s2 = raudrohi.base.gsub('', ' ', s1);
        s1 = raudrohi.base.gsub('', "\n", s2);
        return s2;
    } catch (err) {
        raudrohi.tmg('11e59b21-daca-449d-aada-e181b0505dd7', err +
                                                             '  s_haystack==' +
                                                             s_haystack);
    } // catch
} // raudrohi.base.gsubAllLinebreaksSpacesTabs

// Applies the raudrohi.base.bisect n times and returns
// an array of the prefix sides of the bisections. If it is
// not possible to bisect the string n times, an exception is thrown.
raudrohi.base.snatchNtimes = function (s_haystack, s_needle, n) {
    try {
        if (n < 1) {
            throw 'n==' + n + '<1';
        } // if
        var modulus = n % 2;
        var a_pair;
        var a_pair1;
        var s_hay = s_haystack;
        var ar = [];
        if (2 <= n) {
            var nn = n;
            if (modulus === 1) {
                nn = nn - 1;
            } // if
            var nnn = nn / 2;
            var i = 0;
            for (i = 0; i < nnn; i++) {
                a_pair = raudrohi.base.bisect(s_hay, s_needle);
                if (a_pair == null) {
                    raudrohi.tmg('6c60cce2-3f8a-47fa-82da-e181b0505dd7',
                        'a_pair==null ' +
                        's_haystack==' + s_haystack +
                        's_needle==' + s_needle + ' n==' + n + ' ');
                } // if
                ar.push(a_pair.a);
                a_pair1 = raudrohi.base.bisect(a_pair.b, s_needle);
                if (a_pair1 == null) {
                    raudrohi.tmg('9b2a0750-99da-447e-a2da-e181b0505dd7',
                        'a_pair1==null ' +
                        's_haystack==' + s_haystack +
                        's_needle==' + s_needle + ' n==' + n + ' ');
                } // if
                ar.push(a_pair1.a);
                s_hay = a_pair1.b;
            } // for
        } // if
        if (modulus === 1) {
            a_pair = raudrohi.base.bisect(s_hay, s_needle);
            if (a_pair == null) {
                raudrohi.tmg('346c1a3e-fbed-474d-847a-e181b0505dd7',
                    'a_pair==null ' +
                    's_haystack==' + s_haystack +
                    's_needle==' + s_needle + ' n==' + n + ' ');
            } // if
            ar.push(a_pair.a);
        } // if
        return ar;
    } catch (err) {
        raudrohi.tmg('1c87cbb4-9e35-424d-b37a-e181b0505dd7', err);
    } // catch
} // raudrohi.base.snatchNtimes

//------------------------------------------------------------------------
// The reason, why it is in the raudrohi.base namespace is that
// this allows one to get setup related configuration from the server.
raudrohi.base.get_var = function (var_name) {
    try {
        raudrohi.base.assert_isString(var_name, 'var_name',
            '8184add4-07c7-4c13-ab7a-e181b0505dd7');
        var x;
        x = document.getElementById('webpage_initiation_data_from_server_' +
                                    var_name);
        if (x === null) {
            raudrohi.adapter.log("get_var: UI text not found.\nid_string==" +
                                 var_name);
        } // if
        return x.innerHTML;
    } catch (err) {
        raudrohi.tmg('28558e52-3f0d-4ed7-876a-e181b0505dd7', err);
    } // catch
}; // raudrohi.base.get_var

//------------------------------------------------------------------------
raudrohi.base.commaseparated_list_2_array = function (a_string) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(a_string, 'a_string',
                '187f1f1c-797d-435b-956a-e181b0505dd7');
        }// if
        var ar1 = a_string.split(',')
        var ar = [];
        var len = ar1.length;
        var i = 0;
        var elem;
        for (i = 0; i < len; i++) {
            elem = ar1[i];
            ar.push(raudrohi.adapter.trim(elem));
        } // for
        return ar;
    } catch (err) {
        raudrohi.tmg('4957f2e3-dcf2-4177-916a-e181b0505dd7', err);
    } // catch
} // raudrohi.base.commaseparated_list_2_array

//------------------------------------------------------------------------
// Infinite bitfield, where bits are denoted with their names.
// By default all of the bits are considered to be unset.
raudrohi.base.bitfield_htbased = function () {
    var self_public_ = this;
    try {
        var ht_ = new Hashtable();

        // This is called only, if a call to the set or the unset
        // methods actually changes the state of the bitfield. It's
        // meant to be optionally overridden by application source.
        // By the time this method is called, the value of the new state
        // has already been stored into the bitfield.
        this.toggle_event_handler =
        function (new_state_boolean_value, bitfield_name) {
        }

        // Returns the bit's boolean value.
        this.is_set = function (bit_name_as_a_string) {
            var s_bn = 'b' + bit_name_as_a_string;
            if (ht_.containsKey(s_bn)) {
                var b = ht_.get(s_bn);
                return b;
            } // if
            return false;
        } // is_set

        // Assigns boolean value of True to the bit.
        this.set = function (bit_name_as_a_string) {
            var s_bn = 'b' + bit_name_as_a_string;
            var toggle_occurs = false;
            if (!ht_.containsKey(s_bn)) {
                toggle_occurs = true;
                ht_.put(s_bn, true);
            } // if
            if (toggle_occurs) {
                self_public_.toggle_event_handler(true, bit_name_as_a_string);
            } // if
        } // set

        // Assigns boolean value of True to the bit.
        // Also allows to store data to an attachment space,
        // where each point of the attachment space has a
        // corresponding point in the bitfield space.
        this.set_with_attachment = function (bit_name_as_a_string, attachment) {
            var s_bn = 'b' + bit_name_as_a_string;
            var s_an = 'a' + bit_name_as_a_string;
            ht_.put(s_bn, true);
            ht_.put(s_an, attachment);
        } // set_with_attachment

        // Returns null, if the bit has a value of False.
        this.get_attachment = function (bit_name_as_a_string) {
            var answer = null;
            var s_bn = 'b' + bit_name_as_a_string;
            if (ht_.containsKey(s_bn)) {
                if (ht_.get(s_bn)) {
                    var s_an = 'a' + bit_name_as_a_string;
                    if (ht_.containsKey(s_an)) {
                        answer = ht_.get(s_an);
                    } // if
                } // if
            } // if
            return answer;
        } // get_attachment

        // Assigns boolean value of False to the bit. By default, all
        // of the bits are considered to have a value of False.
        // If the bit has a corresponding attachment, the attachment
        // is deleted.
        this.unset = function (bit_name_as_a_string) {
            var s_bn = 'b' + bit_name_as_a_string;
            var toggle_occurs = false;
            if (ht_.containsKey(s_bn)) {
                toggle_occurs = true;
                ht_.remove(s_bn);
                var s_an = 'a' + bit_name_as_a_string;
                if (ht_.containsKey(s_an)) {
                    ht_.remove(s_an);
                } // if
            } // if
            if (toggle_occurs) {
                self_public_.toggle_event_handler(false, bit_name_as_a_string);
            } // if
        } // unset

        // Assigns a falue of false to all of the bits
        // within the bitfield.
        this.unset_all_bits = function () {
            ht_.clear();
        } // unset_all_bits

    } catch (err) {
        raudrohi.tmg('e5f33064-fe49-45f2-bf6a-e181b0505dd7', err);
    } // catch
} // raudrohi.base.bitfield_htbased

// A much more lightweight version than the
// raudrohi.base.bitfield_htbased. It's only meant to
// indicate machine states and is used at hide/unhide/shut_dow/star_up
// routines. The idea is that if a widget that contains other widgets,
// has only some of its inner widgets visible, then one needs to maintain
// that state also at the hide and unhide operations. Same applies for
// startup and shutdown.
raudrohi.base.widget_state_bitfield = function () {
    this.is_in_state_startup = false; // false stands for shut down state
    this.is_in_state_hidden = false; // true stands for un-hidden state
}// raudrohi.base.widget_state_bitfield


//------------------------------------------------------------------------
// Idea behind the raudrohi.base.HashtableUtilizer is that
// in the case of some "classes", each of the instance has a lot of
// Hashtable instances, which might get even generated dynamically.
// The current version of the Hashtable has been implemented in JavaScript,
// which means that it is an interpreted version and therefore
// probably much slower than the JavaScript languate base structures.
// It also takes some computation to initialize a Hashtable, at least,
// in the case of the interpreted version.
//
// One alternative is to use the JavaScript arrays, which are probably
// implemented as part of the JavaScript core, but lack
// the features that Hashtables have.
//
// Another alternative to the
// dynamic instantiation of a lot of hashtables is to use only a
// single hashtable, but systematically prefix all of the keys with
// some string that corresponds to the Hashtable instance that is being
// "simulated". This is exactly waht the raudrohi.base.HashtableUtilizer
// does and has been created for.
//
// The downside of using the key prefixing is that ther's one
// extra string concatenation per call to the Hashtable routine.
// Another issue is that there has to be one array per
// raudrohi.base.HashtableUtilizer for storing keys, which need
// to be returned for hashtable iteration. The erasing of single
// elements is also slow, namely, linear. But, what regards to the
// keys array, then the original Hashtable implementation also
// needs at least one array for storing keys, so the extra
// array in the raudrohi.base.HashtableUtilizer is probably not that
// bad.
//
// The public interface of the raudrohi.base.HashtableUtilizer roughly
// equals that of the Hashtable, so it's relatively
// easy to switch between the two.
raudrohi.base.HashtableUtilizer = function (prefix_string, a_hashtable) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(prefix_string, 'prefix_string',
                '41eb8742-859b-45e0-a56a-e181b0505dd7');
            raudrohi.base.assert_isObject(a_hashtable, 'a_hashtable',
                '9ccd241f-c983-4d5b-926a-e181b0505dd7');
        } // if
        var ht_ = a_hashtable;
        var prefix_string_ = 'n_' + prefix_string + ';throw x;';
        var ar_keys_ = [];

        function get_unsafe_impl(key) {
            return ht_.get(prefix_string_ + key);
        } // get_unsafe_impl

        function get_safe_impl(key) {
            try {
                raudrohi.base.assert_isString(key, 'key',
                    '29f9d094-b04c-4c4d-855a-e181b0505dd7');
                return get_unsafe_impl(key);
            } catch (err) {
                raudrohi.tmg('def0b43a-855d-4807-a45a-e181b0505dd7', err);
            } // catch
        } // get_safe_impl

        this.get = function (key) {
        }; // A stub for IDE.

        function put_unsafe_impl(key, value) {
            var key2 = prefix_string_;
            key2 += key;
            if (!ht_.containsKey(key2)) {
                // The contains check is to avoid duplicates within the
                // ar_keys_. However, one has to be able to overwrite the
                // value within the hashtable.
                ar_keys_.push(key);
            } // if
            ht_.put(key2, value);
        } // get_unsafe_impl

        function put_safe_impl(key, value) {
            try {
                raudrohi.base.assert_isString(key, 'key',
                    '3ceba43f-6290-4fb0-925a-e181b0505dd7');
                put_unsafe_impl(key, value);
            } catch (err) {
                raudrohi.tmg('2d41b5a3-e4a2-4bcd-945a-e181b0505dd7', err);
            } // catch
        } // put_safe_impl

        this.put = function (key, value) {
        }; // A stub for IDE.

        function remove_from_keys(a_key) {
            try {
                var len = ar_keys_.length;
                var ar_new = [];
                var elem;
                for (var i = 0; i < len; i++) {
                    elem = ar_keys_[i];
                    if (elem !== a_key) {
                        ar_new.push(elem);
                    } // if
                } // for
                ar_keys_ = ar_new;
            } catch (err) {
                raudrohi.tmg('2377cd32-8c8e-42e1-945a-e181b0505dd7', err);
            } // catch
        } // remove_from_keys

        function remove_unsafe_impl(key) {
            remove_from_keys(key);
            ht_.remove(prefix_string_ + key);
        } // remove_unsafe_impl

        function remove_safe_impl(key) {
            try {
                raudrohi.base.assert_isString(key, 'key',
                    '1bae9ef5-ff66-44e3-945a-e181b0505dd7');
                remove_unsafe_impl(key);
            } catch (err) {
                raudrohi.tmg('b3ecb021-4170-43aa-944a-e181b0505dd7', err);
            } // catch
        } // remove_safe_impl

        this.remove = function (key) {
        }; // A stub for IDE.

        // Quite inefficient, because one has to look up the
        // individual entries from the utilizable hashtable one by one.
        this.clear = function () {
            try {
                var len = ar_keys_.length;
                var key;
                for (var i = 0; i < len; i++) {
                    key = ar_keys_[i];
                    ht_.remove(prefix_string_ + key);
                } // for
                ar_keys_ = [];
            } catch (err) {
                raudrohi.tmg('85e8b952-31ef-487e-954a-e181b0505dd7', err);
            } // catch
        } // clear

        this.keys = function () {
            return ar_keys_;
        } // clear


        this.size = function () {
            return ar_keys_.length;
        } // clear


        function containsKey_unsafe_impl(key) {
            return ht_.containsKey(prefix_string_ + key);
        } // containsKey_unsafe_impl

        function containsKey_safe_impl(key) {
            try {
                raudrohi.base.assert_isString(key, 'key',
                    '43cae110-766d-49ba-834a-e181b0505dd7');
                return containsKey_unsafe_impl(key);
            } catch (err) {
                raudrohi.tmg('1d5abb23-44f4-409b-834a-e181b0505dd7', err);
            } // catch
        } // containsKey_safe_impl


        if (raudrohi_settings_debug_JavaScript === true) {
            this.get = get_safe_impl;
            this.put = put_safe_impl;
            this.remove = remove_safe_impl;
            this.containsKey = containsKey_safe_impl;
        } else {
            this.get = get_unsafe_impl;
            this.put = put_unsafe_impl;
            this.remove = remove_unsafe_impl;
            this.containsKey = containsKey_unsafe_impl;
        } // else

    } catch (err) {
        raudrohi.tmg('bdc8e759-775c-4892-924a-e181b0505dd7', err);
    } // catch
} // raudrohi.base.HashtableUtilizer

//------------------------------------------------------------------------
// It's for avoiding instantiation of Hashtables in cases, where one
// temporarily needs an empty Hashtable, i.e. hahtable that is cleared.
raudrohi.base.pool_of_hashtables = function () {
    try {
        var self_public_ = this;

        // The size of the pool shouldn't be "too big", because as of 2011 the
        // JavaScript is by default a single-threaded programming
        // language (unless one does not experiment with worker threads or
        // someting like that), and the filling of the pool might
        // create a noticable delay.
        // The setTimeout deay in the get_empty_hashtable() and the
        // pool size have been chosen experimentally so that the
        // pool filling has some "probabilistic" chance of taking place
        // during "idle" time, while not creating "too big" of a delay, if
        // the time frame has been missed.
        var i_pool_max_size_ = 600;
        var pooled_hashtables_ = [];

        var b_poolfilling_order_exists_ = false;
        this.fill_pool = function () {
            try {
                var n_to_add = i_pool_max_size_ - pooled_hashtables_.length;
                var i = 0;
                for (i = 0; i < n_to_add; i++) {
                    pooled_hashtables_.push(new Hashtable());
                } // for
                b_poolfilling_order_exists_ = false;
            } catch (err) {
                raudrohi.tmg('89dc5f5a-e10c-4f24-924a-e181b0505dd7', err);
            } // catch
        } // fill_pool
        self_public_.fill_pool();

        this.get_empty_hashtable = function () {
            try {
                var ht;
                if (200 < pooled_hashtables_.length) { // One hopes to gain some speed from lucky timing.
                    ht = pooled_hashtables_.pop();
                } else {
                    ht = new Hashtable();
                    if (b_poolfilling_order_exists_ === false) {
                        b_poolfilling_order_exists_ = true;
                        setTimeout('raudrohi.base.pool_of_hashtables.fill_pool()',
                            5000);
                    } // if
                } // if
                return ht;
            } catch (err) {
                raudrohi.tmg('8f551835-2692-47ab-813a-e181b0505dd7', err);
            } // catch
        } // get_empty_hashtable

        this.return_used_hashtable = function (a_hashtable) {
            try {
                // As of 2011.05.01 the clearing of the hashtable
                // only wastes cycles, but one just wants to detect
                // "abnormal, extraterrestial, activity".
                a_hashtable.clear();

                // As there's some sort of a weird bug somewhere,
                // I suspect that it's in the browser, then in stead of
                // throwing the hashtable back into the pool like this:
                //
                // if(polhl<60){
                //    ooled_hashtables_.push(a_hashtable);
                // } // if
                //
                // one just lets it to be garbage collected. One hopes
                // that the clearing of the hashtable helps the
                // garbage collector.
            } catch (err) {
                raudrohi.tmg('2f2236f3-672f-49ae-9a3a-e181b0505dd7', err);
            } // catch
        } // return_used_hashtable

        // The return_htOfht dismantles the hashtable of hashtables and
        // inserts the individual hashtables to the pool.
        this.return_htOfht = function (a_hashtable_of_hashtables) {
            try {
                var keys = a_hashtable_of_hashtables.keys();
                var len = keys.length;
                var key;
                var reference_2_ht2;
                for (var i = 0; i < len; i++) {
                    key = keys[i];
                    reference_2_ht2 = a_hashtable_of_hashtables.get(key);
                    self_public_.return_used_hashtable(reference_2_ht2);
                } // for
                self_public_.return_used_hashtable(a_hashtable_of_hashtables);
            } catch (err) {
                raudrohi.tmg('d22e5e61-4357-4fbd-b33a-e181b0505dd7', err);
            } // catch
        } // return_htOfht

    } catch (err) {
        raudrohi.tmg('4a6adb3b-2dbe-423a-a13a-e181b0505dd7', err);
    } // catch
} // raudrohi.base.pool_of_hashtables
raudrohi.base.pool_of_hashtables = new raudrohi.base.pool_of_hashtables();

//------------------------------------------------------------------------
// Creates a clone of the a_hashtable. The clone instance is taken
// from the raudrohi.base.pool_of_hashtables. The values
// of the a_hashtable are passed by reference, i.e. the values are
// not cloned.
raudrohi.base.clone_hashtable = function (a_hashtable) {
    try {
        raudrohi.base.assert_isObject(a_hashtable, 'a_hashtable',
            '49de8955-a681-46d6-af3a-e181b0505dd7');
        var ht_clone = raudrohi.base.pool_of_hashtables.get_empty_hashtable();
        var keys = a_hashtable.keys();
        var len = keys.length;
        var key;
        var reference_to_the_value;
        for (var i = 0; i < len; i++) {
            key = keys[i];
            reference_to_the_value = a_hashtable.get(key);
            ht_clone.put(key, reference_to_the_value);
        } // for
        return ht_clone;
    } catch (err) {
        raudrohi.tmg('5f9ed715-a3c5-45a6-a53a-e181b0505dd7', err);
    } // catch
} // raudrohi.base.clone_hashtable


//------------------------------------------------------------------------
raudrohi.base.setA_minus_setB_ar =
function (set_A_elements_array, set_B_elements_array) {
    try {
        var ht = raudrohi.base.pool_of_hashtables.get_empty_hashtable();
        var len = set_B_elements_array.length;
        var i = 0;
        var elem;
        for (i = 0; i < len; i++) {
            elem = set_B_elements_array[i];
            ht.put(elem, 42)
        } // for
        var answer = [];
        len = set_A_elements_array.length;
        i = 0;
        for (i = 0; i < len; i++) {
            elem = set_A_elements_array[i];
            if (!ht.containsKey(elem)) {
                answer.push(elem);
            } // if
        } // for
        raudrohi.base.pool_of_hashtables.return_used_hashtable(ht);
        return answer;
    } catch (err) {
        raudrohi.tmg('36f8e333-dfc5-446d-a32a-e181b0505dd7', err);
    } // catch
} // raudrohi.base.setA_minus_setB_ar

// http://mathworld.wolfram.com/Intersection.html
raudrohi.base.intersection_of_sets =
function (set_A_elements_array, set_B_elements_array) {
    try {
        var ht = raudrohi.base.pool_of_hashtables.get_empty_hashtable();
        var len = set_B_elements_array.length;
        var i = 0;
        var elem;
        for (i = 0; i < len; i++) {
            elem = set_B_elements_array[i];
            ht.put(elem, 42)
        } // for
        var answer = [];
        len = set_A_elements_array.length;
        i = 0;
        for (i = 0; i < len; i++) {
            elem = set_A_elements_array[i];
            if (ht.containsKey(elem)) {
                answer.push(elem);
            } // if
        } // for
        raudrohi.base.pool_of_hashtables.return_used_hashtable(ht);
        return answer;
    } catch (err) {
        raudrohi.tmg('1de82a92-3312-4167-ae2a-e181b0505dd7', err);
    } // catch
} // raudrohi.base.intersection_of_sets

//------------------------------------------------------------------------
// The main use of the raudrohi.base.state_switcher_t1 is in
// building graphical user interfaces. It implements the "bookkeeping"
// part of the state machine.
//
// In this particular case, the model is that the states, which
// can also be denoted as vertices, have a default entry function and a default
// exit function. However, transitions, which can be denoted as directed
// edges in the graph theory's point of view
// (http://mathworld.wolfram.com/DirectedGraph.html ), can be explicitly
// specified by assigning one function to a transition. The transition
// functions override the default exit and entry functions, i.e. if a
// transition has been specified, the default entry and exit functions are
// not called.
//
// An example:
//     Let, A,B,C,D,E be vertices and
//     enterA() and exitA() vertex A default entry and exit functions,
//     enterB() and exitB() vertex B default entry and exit functions,
//     enterC() and exitC() vertex C default entry and exit functions.
//     Vertex D does not have its default exit function defined, but
//     enterD() has been defined as vertex D default entry function.
//     Vertex E does not have any default functions associated with it.
//
//     In addition, a transition from vertex B to vertex C has been
//     associated with function transB2C(), and a transition from
//     vertex A to vertex E has been associated with function transA2E().
//     A transition from vertex D to vertex E has been
//     associated with function transD2E().
//
//     The following describes the functions that get called for the given
//     transitions:
//
//     From A to B:  exitA(), enterB()
//     From B to C:  transB2C()
//     From B to D:  exitB(), enterD()
//     From A to C:  exitA(), enterC()
//     From A to E:  transA2E()
//
//     From B to E:  Transition is not possible, because vertex E does not
//                   have a default entry function, nor is there a
//                   function declared for that transition.
//
//     From D to A:  Transition is not possible, because vertex D is
//                   missing a default exit function, nor is there a
//                   function declared for that transition.
//
//     From D to E:  transD2E()
//
// In the case of the raudrohi.base.state_switcher_t1, there is one
// vertex defined by default. It's called 'zero'. The vertex 'zero'
// has also stub exit and entry functions defined by default.
// Right after initialization, the state machine is in state 'zero'.
//
// None of the transition, nor the default functions, can be overriden,
// redefined, and it actually serves a purpose in the case of the
// state 'zero'. That way all of the other states are obligated to
// instantiate and clear up their resources, set their own, internal,
// "substates", to a proper order.
//
// Another, architectually very influencial, thing within the
// raudrohi.base.state_switcher_t1 is a concept of state(==vertex)
// clusters (vertex set subsets). It is also possible to define
// entry and exit functions for clusters,
// but their declaration is optional.
//
//--------------------------UDPATE-START-------------------------------
// The current implementation is BUGGY from logic point of veiew.
// It tries to support clusters as if it were a true set, i.e. a
// single vertex can be part of multiple clusters, but in practice,
// a limitation that each vertex can be part of at most one cluster,
// is NECESSARY, VERY USEFUL, because then that single cluster can be
// tested against and it also simplifies the implementation. Also,
// if every vertex is part of at most one cluster, then there is no
// issue of the order of the cluster exit/entry/transition funcions and
// the order of functions that get executed duering a transition from
// one cluster to anohter, can be determined and counted on. In practice
// it has also turned out that there is no need for a state to belong
// to multiple clusters at once.
//
// The current implementation is also buggy in a way that it does not
// execute cluster entry functions, if a state transaction takes place
// from non-clustered vertex to a clustered vertex.
//--------------------------UDPATE-END---------------------------------
//
raudrohi.base.state_switcher_t1 = function () {
    var self_public_ = this;
    try {
        var initial_state_ = 'zero';
        var previous_state_ = null;

        this.current_state_ = initial_state_; // to be refactored out
        this.get_current_state = function () {
            return '' + self_public_.current_state_;
        } // get_current_state

        var state_switch_count_ = 0;
        this.get_state_switch_count = function () {
            return state_switch_count_;
        } // get_state_switch_count

        // The increment_state_switch_count() is  useful for
        // simulating state switch events. For example, if
        // a parent widget changes state then by simulating
        // a state change in the subwidget, one can
        // dismiss the data that the subwidget requested before the
        // parent widget's state change, but which arrives to
        // the sub widget after the parent widgat's state change.
        this.increment_state_switch_count = function () {
            state_switch_count_++;
        } // get_state_switch_count

        // Returns a boolean value.
        this.state_exists = function (state_name) {
            try {
                raudrohi.base.assert_isString(state_name,
                    'state_name', '65b8c547-de5f-4744-912a-e181b0505dd7');
                var answer = ht_default_entry_funcs_.containsKey(state_name);
                return answer;
            } catch (err) {
                raudrohi.tmg('8246be06-4ce9-4fc4-bd2a-e181b0505dd7', err);
            } // catch
        } // state_exists

        var ht_ = new Hashtable();
        var ht_transition_funcs_ = new raudrohi.base.HashtableUtilizer(
            'trans', ht_);

        // The s_funcsepar_ should, if possible, have some value that
        // can not be part of a JavaScript function name.
        var s_funcsepar_ = ';throw "x";';
        var ht_default_entry_funcs_ = new raudrohi.base.HashtableUtilizer(
            'entry', ht_);
        var ht_default_exit_funcs_ = new raudrohi.base.HashtableUtilizer(
            'exit', ht_);

        var ht_vertex_2_clusters_ = new raudrohi.base.HashtableUtilizer(
            'v2cl', ht_);
        var ht_cluster_2_vertices_ = new raudrohi.base.HashtableUtilizer(
            'cl2v', ht_);

        var ht_genc_ = 0;

        function create_hashtable() {
            ht_genc_++;
            var ht = new raudrohi.base.HashtableUtilizer('aght' + ht_genc_,
                ht_);
            return ht;
        } // create_hashtable


        // If the machine state changes to the 'zero', the
        // subwidget's chage_state_2('zero') methods are also called.
        var ar_subwidgets_ = [];
        this.register_subwidget = function (a_subwidget_instance) {
            try {
                raudrohi.base.assert_isObject(a_subwidget_instance,
                    'a_subwidget_instance',
                    '286c743a-2a75-4d00-822a-e181b0505dd7');
                ar_subwidgets_.push(a_subwidget_instance);
            } catch (err) {
                raudrohi.tmg('40f7a07f-bc2f-4814-931a-e181b0505dd7', err);
            } // catch
        } // register_subwidget

        this.unregister_all_subwidgets = function () {
            try {
                ar_subwidgets_ = [];
            } catch (err) {
                raudrohi.tmg('03a5c533-d846-48a7-821a-e181b0505dd7', err);
            } // catch
        } // unregister_all_subwidgets

        var ht_cluster_entry_funcs_ = null;
        this.declare_cluster_entry_func =
        function (destination_cluster_name, a_function) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        destination_cluster_name, 'destination_cluster_name',
                        'c2005412-8683-43a5-811a-e181b0505dd7');
                    raudrohi.base.assert_isFunction(a_function, 'a_function',
                        '6abb6d36-854a-465f-a31a-e181b0505dd7');
                } // if
                if (ht_cluster_entry_funcs_ === null) {
                    ht_cluster_entry_funcs_ = create_hashtable();
                } // if
                ht_cluster_entry_funcs_.put(destination_cluster_name,
                    a_function);
            } catch (err) {
                raudrohi.tmg('90c5f125-57f9-4252-951a-e181b0505dd7', err);
            } // catch
        } // declare_cluster_entry_func

        var ht_cluster_exit_funcs_ = null;
        this.declare_cluster_exit_func =
        function (origin_cluster_name, a_function) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        origin_cluster_name, 'origin_cluster_name',
                        '75639df3-c4a3-42d8-b21a-e181b0505dd7');
                    raudrohi.base.assert_isFunction(a_function, 'a_function',
                        '18390ad1-bc5f-42a6-a50a-e181b0505dd7');
                } // if
                if (ht_cluster_exit_funcs_ === null) {
                    ht_cluster_exit_funcs_ = create_hashtable();
                } // if
                ht_cluster_exit_funcs_.put(origin_cluster_name, a_function);
            } catch (err) {
                raudrohi.tmg('3aac4819-44a6-454f-950a-e181b0505dd7', err);
            } // catch
        } // declare_cluster_exit_func

        this.declare_state_transition_func =
        function (destination_state_name, origin_state_name,
            state_transition_function) {
            if (raudrohi_settings_debug_JavaScript === true) {
                raudrohi.base.assert_isString(destination_state_name,
                    'destination_state_name',
                    'b816733e-2720-4e7d-940a-e181b0505dd7');
                raudrohi.base.assert_isString(origin_state_name,
                    'origin_state_name',
                    '27f15d2d-1d29-4aac-b20a-e181b0505dd7');
                raudrohi.base.assert_isFunction(
                    state_transition_function,
                    'state_transition_function',
                    '46ee71f4-1863-49b4-a50a-e181b0505dd7');
                var s_tmp = destination_state_name + s_funcsepar_ +
                            origin_state_name;
                if (ht_transition_funcs_.containsKey(s_tmp)) {
                    raudrohi.tmg('47f618b4-6daa-4954-a20a-e181b0505dd7',
                        'State transition from state "' + origin_state_name +
                        '" to state "' + destination_state_name +
                        '" has been declare ' +
                        'more than once. It does not make sense to declare ' +
                        'state transitions more than once, as the subsequent ' +
                        'declarations would logically override eachother.');
                } // if
            } // if
            var s_trans = destination_state_name + s_funcsepar_ +
                          origin_state_name;
            ht_transition_funcs_.put(s_trans, state_transition_function);
        } // declare_state_transition_func

        this.declare_state_default_entry_func =
        function (destination_state_name, a_function) {
            if (raudrohi_settings_debug_JavaScript === true) {
                raudrohi.base.assert_isString(destination_state_name,
                    'destination_state_name',
                    '6dc84c31-a6a1-4413-b1f9-e181b0505dd7');
                raudrohi.base.assert_isFunction(a_function, 'a_function',
                    '16829d55-ded8-4893-92f9-e181b0505dd7');
            }// if
            ht_default_entry_funcs_.put(destination_state_name, a_function);
        } // declare_state_default_entry_func

        this.declare_state_default_exit_func =
        function (origin_state_name, a_function) {
            if (raudrohi_settings_debug_JavaScript === true) {
                raudrohi.base.assert_isString(origin_state_name,
                    'origin_state_name',
                    '6a297114-2095-4ec8-a5f9-e181b0505dd7');
                raudrohi.base.assert_isFunction(a_function, 'a_function',
                    'b6903d58-7d15-43fa-85f9-e181b0505dd7');
            }// if
            ht_default_exit_funcs_.put(origin_state_name, a_function);
        } // declare_state_default_exit_func

        self_public_.declare_state_default_entry_func(initial_state_,
            function () {
            });
        self_public_.declare_state_default_exit_func(initial_state_,
            function () {
            });

        // The add_cluster_2_vertex_list_of_clusters
        // exists for the 'zero', which belongs to all clusters at once.
        //
        // TODO: That's a stupidity here. Each of the vertices, except
        // zero, should belong to at most one cluster, because that allowes
        // to determine a proper order of cluster entry and exit functions.
        // Refactor it out, because this multiple-cluster incclusion feature
        // is never used in practice, but it does prevent an implementation
        // of a practical feature.
        function add_cluster_2_vertex_list_of_clusters(vertex_name,
            cluster_name) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(cluster_name, 'cluster_name',
                        'efc3d056-a7d6-46f8-92f9-e181b0505dd7');
                    raudrohi.base.assert_isString(vertex_name, 'vertex_name',
                        'd32baf18-5ed3-4294-95e9-e181b0505dd7');
                }// if
                var ht_clusters;
                if (ht_vertex_2_clusters_.containsKey(vertex_name)) {
                    ht_clusters = ht_vertex_2_clusters_.get(vertex_name);
                } else {
                    ht_clusters = create_hashtable();
                } // else
                ht_clusters.put(cluster_name, 42);
                ht_vertex_2_clusters_.put(vertex_name, ht_clusters);
            } catch (err) {
                raudrohi.tmg('e2565f28-ff3d-4c61-a5e9-e181b0505dd7', err);
            } // catch
        } // add_cluster_2_vertex_list_of_clusters

        function add_vertex_2_clusters_list_of_vertices(vertex_name,
            cluster_name) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(cluster_name, 'cluster_name',
                        '6591a62d-1a37-43f3-b3e9-e181b0505dd7');
                    raudrohi.base.assert_isString(vertex_name, 'vertex_name',
                        'a1ea766d-d97a-412e-84e9-e181b0505dd7');
                }// if
                var ht_vertices;
                if (ht_cluster_2_vertices_.containsKey(cluster_name)) {
                    ht_vertices = ht_cluster_2_vertices_.get(cluster_name);
                } else {
                    ht_vertices = create_hashtable();
                } // else
                ht_vertices.put(vertex_name, 42);
                ht_vertices.put('zero', 42);
                ht_cluster_2_vertices_.put(cluster_name, ht_vertices);
            } catch (err) {
                raudrohi.tmg('ba8f5b45-d240-4e96-82e9-e181b0505dd7', err);
            } // catch
        } // add_vertex_2_clusters_list_of_vertices


        this.declare_state_2_be_in_cluster =
        function (cluster_name, vertex_name) {
            if (raudrohi_settings_debug_JavaScript === true) {
                raudrohi.base.assert_isString(cluster_name, 'cluster_name',
                    'd5e1041f-20e3-472d-8fd9-e181b0505dd7');
                raudrohi.base.assert_isString(vertex_name, 'vertex_name',
                    'f48d644d-52f1-438e-85d9-e181b0505dd7');
                if (ht_vertex_2_clusters_.containsKey(vertex_name)) {
                    var ht_cln = ht_vertex_2_clusters_.get(vertex_name);
                    var ar = ht_cln.keys();
                    if (ht_cln !== cluster_name) {
                        raudrohi.tmg('2b6d54e5-e696-4238-94d9-e181b0505dd7',
                            ' Vertex "' + vertex_name + '" is present in ' +
                            'cluster "' + ar[0] + '", while a request is ' +
                            'made to place it to cluster "' + cluster_name +
                            '".');
                    } // if
                } // if
                if (vertex_name === 'zero') {
                    raudrohi.tmg('1d724da7-f036-420d-a1d9-e181b0505dd7',
                        'There\'s no point of inserting the state "zero" ' +
                        'to cluster "' + cluster_name +
                        '", because by default ' +
                        'the "zero" s present in every cluster.');
                } // if
            }// if
            try {
                add_cluster_2_vertex_list_of_clusters(vertex_name,
                    cluster_name);
                add_cluster_2_vertex_list_of_clusters('zero', cluster_name);
                add_vertex_2_clusters_list_of_vertices(vertex_name,
                    cluster_name);
            } catch (err) {
                raudrohi.tmg('a6d4af2f-217b-4aa7-83d9-e181b0505dd7', err);
            } // catch
        } // declare_state_2_be_in_cluster

        function get_names_of_zeroables(destination_vertex_name,
            origin_vertex_name) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(destination_vertex_name,
                        'destination_vertex_name',
                        '8b8f1829-fbdd-4801-b3c9-e181b0505dd7');
                    raudrohi.base.assert_isString(origin_vertex_name,
                        'origin_vertex_name',
                        '16f265d2-e990-43df-a8c9-e181b0505dd7');
                    if (!ht_vertex_2_clusters_.containsKey(origin_vertex_name)) {
                        raudrohi.tmg('eceb2819-3235-4140-b2c9-e181b0505dd7',
                            'origin_vertex_name(==' + origin_vertex_name +
                            ') is missing from the graph.');
                    } // if
                    if (!ht_vertex_2_clusters_.containsKey(destination_vertex_name)) {
                        raudrohi.tmg('3a499928-b94b-4593-82c9-e181b0505dd7',
                            'destination_vertex_name(==' +
                            destination_vertex_name +
                            ') is missing from the graph.');
                    } // if
                    if (origin_vertex_name === destination_vertex_name) {
                        raudrohi.tmg('aedb2596-a1bf-43c2-a3c9-e181b0505dd7',
                            'origin_vertex_name==destination_vertex_name=="' +
                            origin_vertex_name + '"');
                    } // if
                } // if
                var ar_zeroables = [];
                if (origin_vertex_name === 'zero') {
                    return ar_zeroables;
                } // if
                var orig_ht_clusters = ht_vertex_2_clusters_.get(
                    origin_vertex_name);
                var dest_ht_clusters = ht_vertex_2_clusters_.get(
                    destination_vertex_name);
                var orig_ar_cl_keys = orig_ht_clusters.keys();
                var dest_ar_cl_keys = orig_ht_clusters.keys();
                var clusters2scan = raudrohi.base.setA_minus_setB_ar(
                    orig_ar_cl_keys, dest_ar_cl_keys)
                var len = clusters2scan.length;
                var i = 0;
                var cluster_name;
                var ii;
                var len2;
                var ht_cl_vertices;
                var ar_cl_vertices;
                var cl_vertex_name;
                for (i = 0; i < len; i++) {
                    cluster_name = clusters2scan[i];
                    ht_cl_vertices = ht_cluster_2_vertices_.get(cluster_name)
                    ar_cl_vertices = ht_cl_vertices.keys();
                    len2 = ar_cl_vertices.length;
                    ii = 0;
                    for (ii = 0; ii < len2; ii++) {
                        cl_vertex_name = ar_cl_vertices[ii];
                        if ((origin_vertex_name !== cl_vertex_name) &&
                            (cl_vertex_name !== 'zero')) {
                            ar_zeroables.push(cl_vertex_name);
                        } // if
                    } // for
                } // for
                return ar_zeroables;
            } catch (err) {
                raudrohi.tmg('ed29766b-f5bd-4088-8369-e181b0505dd7', err);
            } // catch
        } // get_names_of_zeroables


        function execute_edge(destination_vertex_name, origin_vertex_name) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(destination_vertex_name,
                        'destination_vertex_name',
                        '523b7323-3f94-4f08-8169-e181b0505dd7');
                    raudrohi.base.assert_isString(origin_vertex_name,
                        'origin_vertex_name',
                        '21149f97-bebe-4080-9459-e181b0505dd7');
                    var s_tmp = destination_vertex_name + s_funcsepar_ +
                                origin_vertex_name;
                    if (!ht_transition_funcs_.containsKey(s_tmp)) {
                        if (!ht_default_exit_funcs_.containsKey(origin_vertex_name)) {
                            throw 'Transition from state "' +
                                  origin_vertex_name + '" to state "' +
                                  destination_vertex_name + '" has not been ' +
                                  'explicitly specified and there\'s no ' +
                                  'default exit function specified for the ' +
                                  'state "' + origin_vertex_name + '".';
                        } // if
                        if (!ht_default_entry_funcs_.containsKey(destination_vertex_name)) {
                            throw 'Transition from state "' +
                                  origin_vertex_name + '" to state "' +
                                  destination_vertex_name + '" has not been ' +
                                  'explicitly specified and there\'s no ' +
                                  'default entry function specified for the ' +
                                  'state "' + destination_vertex_name + '".';
                        } // if
                    } // if
                } // if
                if (destination_vertex_name === origin_vertex_name) {
                    return;
                } // if
                try {
                    // Code that uses the state_switch_count_ depends
                    // on a fact that the state_switch_count_ is
                    // incremented before the call to the edge/default
                    // entry/exit execution.
                    state_switch_count_++;
                    var s_trans = destination_vertex_name + s_funcsepar_ +
                                  origin_vertex_name;
                    var a_func;
                    if (ht_transition_funcs_.containsKey(s_trans)) {
                        a_func = ht_transition_funcs_.get(s_trans);
                        a_func();
                        return;
                    } // if
                    a_func = ht_default_exit_funcs_.get(origin_vertex_name);
                    a_func();
                    a_func =
                    ht_default_entry_funcs_.get(destination_vertex_name);
                    a_func();
                    //				raudrohi.adapter.log('mutt orig=='+origin_vertex_name+
                    //					' dest=='+destination_vertex_name);
                } catch (err) {
                    raudrohi.tmg('8aeef535-65f1-4223-8159-e181b0505dd7',
                        "origin_vertex_name==" + origin_vertex_name +
                        "  destination_vertex_name==" +
                        destination_vertex_name + "  " + err);
                } // catch
            } catch (err) {
                raudrohi.tmg('41e55f13-0eba-49ec-8159-e181b0505dd7', err);
            } // catch
        }// execute_edge

        function vertex2FirstCluster(vertex_name) {
            try {
                raudrohi.base.assert_isString(vertex_name, 'vertex_name',
                    '28af5b49-c2e2-4d33-8559-e181b0505dd7');
                var ht_clusters = ht_vertex_2_clusters_.get(vertex_name);
                var ar_cluster_names = ht_clusters.keys();
                return ar_cluster_names[0];
            } catch (err) {
                raudrohi.tmg('3a4a1236-a39a-4292-9349-e181b0505dd7', err);
            } // catch
        } // vertex2FirstCluster

        var change_state_2_in_progress_ = false;
        var queued_jump_destination_ = null;

        function change_state_2_queue_handling() {
            try {
                if (queued_jump_destination_ !== null) {
                    var queued_jump_destination = '' + queued_jump_destination_;
                    queued_jump_destination_ = null;
                    change_state_2_in_progress_ = false;
                    self_public_.change_state_2(queued_jump_destination);
                } // if
                change_state_2_in_progress_ = false;
            } catch (err) {
                raudrohi.tmg('3e0ee123-6d61-4411-9349-e181b0505dd7', err);
            } // catch
        } // change_state_2_queue_handling

        this.change_state_2 = function (destination_state_name) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(destination_state_name,
                        'destination_state_name',
                        '33a8e840-dc19-49a8-b149-e181b0505dd7');
                    // All of the relevant verification also takes
                    // part in the method execute_edge
                } // if
                if (change_state_2_in_progress_ === true) {
                    var b_crash = true;
                    if (raudrohi_settings_debug_JavaScript !== true) {
                        // The content of this if-clause is a
                        // dirty way to probabilistically increase
                        // the tread-safetiness of the client code.
                        // The lack of proper sleep function and
                        // hence threading in JavaScript is
                        // just plain depressing.
                        var i = 0;
                        var n = 500;
                        while (i < n) {
                            raudrohi.core.burnCPUcycles(2);
                            if (change_state_2_in_progress_ === false) {
                                b_crash = false;
                                i = 2 * n;
                            } // if
                            i = i + 1;
                        } // while
                    } // if
                    if (b_crash === true) {
                        if (queued_jump_destination_ === null) {
                            queued_jump_destination_ = destination_state_name;
                            return;
                        } // if
                        raudrohi.adapter.log('Warning: ' +
                                             'GUID==16a1ee2c-258d-4070-81a1-00a755b4e179 ' +
                                             'State "' +
                                             queued_jump_destination_ +
                                             '" is in ' +
                                             'the queue and the change_state_2(...) is still ' +
                                             'executing, but a new state jump request (=="' +
                                             destination_state_name +
                                             '") came in.' +
                                             ' In order to avoid possible brancings within ' +
                                             'the state path, the maximum queue length ' +
                                             'has been defined to 1.');
                    } // if
                } // if
                change_state_2_in_progress_ = true;
                var origin_vertex_name = self_public_.current_state_;
                if (destination_state_name === origin_vertex_name) {
                    change_state_2_queue_handling();
                    return;
                } // if
                var ar_zeroables = get_names_of_zeroables(destination_state_name,
                    origin_vertex_name);
                var len = ar_zeroables.length;
                var i = 0;
                var zeroable_state_name;
                for (i = 0; i < len; i++) {
                    zeroable_state_name = ar_zeroables[i];
                    execute_edge('zero', zeroable_state_name);
                } // for
                if (destination_state_name === 'zero') {
                    var ar_keys_tmp1_len = ar_subwidgets_.length;
                    var a_subwidget;
                    for (i = 0; i < ar_keys_tmp1_len; i++) {
                        a_subwidget = ar_subwidgets_[i];
                        a_subwidget.state_switcher_.change_state_2('zero');
                    } // for
                } // if
                execute_edge(destination_state_name,
                    self_public_.current_state_);
                var origin_cluster_name = vertex2FirstCluster(origin_vertex_name);
                var destination_cluster_name = vertex2FirstCluster(
                    destination_state_name);
                //				raudrohi.adapter.log('orig=='+origin_cluster_name +
                //					'  dest=='+destination_cluster_name+'  orig_vx=='+
                //					origin_vertex_name+'  dest_vx=='+destination_state_name);
                if (destination_cluster_name !== origin_cluster_name) {
                    var a_func;
                    if (ht_cluster_exit_funcs_ !== null) {
                        if (ht_cluster_exit_funcs_.containsKey(origin_cluster_name)) {
                            a_func =
                            ht_cluster_exit_funcs_.get(origin_cluster_name);
                            a_func();
                        } // if
                    } // if
                    if (ht_cluster_entry_funcs_ !== null) {
                        if (ht_cluster_entry_funcs_.containsKey(destination_cluster_name)) {
                            a_func = ht_cluster_entry_funcs_.get(
                                destination_cluster_name);
                            a_func();
                        } // if
                    } // if
                } // if
                previous_state_ = self_public_.current_state_;
                self_public_.current_state_ = destination_state_name;
                change_state_2_queue_handling()
            } catch (err) {
                raudrohi.tmg('17092b05-750f-4337-8439-e181b0505dd7',
                    err + '  ');
            } // catch
        }// change_state_2

        this.clear_declarations = function (new_initial_state) {
            try {
                raudrohi.base.assert_isString(new_initial_state,
                    'new_initial_state',
                    '7e35b538-db17-4a61-9139-e181b0505dd7');
                ht_default_exit_funcs_.clear();
                ht_default_entry_funcs_.clear();
                ht_transition_funcs_.clear();
                self_public_.current_state_ = new_initial_state;
            } catch (err) {
                raudrohi.tmg('f3cf445e-615b-4ec9-b539-e181b0505dd7', err);
            } // catch
        } // clear_declarations

    } catch (err) {
        raudrohi.tmg('528f82f5-aa8d-4ee6-9139-e181b0505dd7', err);
    } // catch
} // raudrohi.base.state_switcher_t1

//------------------------------------------------------------------------
// This method has been Copy-Pasted from
// http://www.bytemycode.com/snippets/snippet/400/
// in December 2009.
raudrohi.base.reverse_string = function (a_string) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(a_string, 'a_string',
                '51bbf9b5-2417-45c1-a329-e181b0505dd7');
        } // if
        if (a_string === '') {
            return '';
        } // if
        var splitext = a_string.split("");
        var revertext = splitext.reverse();
        var reversed = revertext.join("");
        return reversed;
    } catch (err) {
        raudrohi.tmg('c3fe5eef-fdbb-4602-9129-e181b0505dd7', err +
                                                             '  a_string==' +
                                                             a_string);
    } // catch
} // raudrohi.base.reverse_string
//------------------------------------------------------------------------
raudrohi.base.count_substrings = function (s_haystack, s_needle) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(s_haystack, 's_haystack',
                'f9c2401a-4f86-40f0-9429-e181b0505dd7');
            raudrohi.base.assert_isString(s_needle, 's_needle',
                '329f302a-81d0-4db1-b229-e181b0505dd7');
        } // if
        var len_needle = s_needle.length;
        var len0 = s_haystack.length;
        var s = raudrohi.base.gsub('', s_needle, s_haystack);
        var len1 = s.length;
        var len_diff = len0 - len1;
        var n = len_diff / len_needle;
        return n;
    } catch (err) {
        raudrohi.tmg('24f4035d-1a39-46f7-9119-e181b0505dd7', err);
    } // catch
} // raudrohi.base.count_substrings

//------------------------------------------------------------------------
raudrohi.base.regex_has_a_match = function (rgx, s_haystack) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            // The check fails for Google Chrome. For
            // some reason regexes are not objects for the
            // Google Chrome.
            // TODO: fix it.
            //raudrohi.base.assert_isObject(rgx,
            //	'rgx','5229fc18-6adf-4cef-9319-e181b0505dd7');
            raudrohi.base.assert_isString(s_haystack, 's_haystack',
                '4c597a24-e61e-4636-b419-e181b0505dd7');
        } // if
        var b_out = false;
        var s = s_haystack.replace(rgx, "");
        if (s.length !== s_haystack.length) {
            b_out = true;
        } // if
        return b_out;
    } catch (err) {
        raudrohi.tmg('fbf29133-2c69-4c68-a519-e181b0505dd7', err);
    } // catch
} // raudrohi.base.regex_has_a_match

//------------------------------------------------------------------------

// For a case like "42wow.73"
raudrohi.base.private_code.string2float_regex1 =
new RegExp("[^\\d.\\-+,]", "g");
// For a case like "42...5"
raudrohi.base.private_code.string2float_regex2 =
new RegExp("[.\\-+,][.\\-+,]+", "g");
// For a case like "42.5.7" but it must let through "-5.4"
raudrohi.base.private_code.string2float_regex3 =
new RegExp("[.,][\\d]+[.,]", "g");
// For a case like "42.4+7"
raudrohi.base.private_code.string2float_regex4 =
new RegExp("[\\d.,]+[\\-+]", "g");

// Returns raudrohi.core.triple, where
// a_triple.a==false,  if the interpretation of the field
// content as float succeeded and a_triple.a==true, if
// the interpretation failed.
// If the operation succeeded, the a_triple.b is assigned
// a float value. Otherwise it is assigned null.
// If the a_string has a string value that depicts a whole number,
// then the whole number is converted to a floating point number.
//
// If the a_string is an empty string after trimming, then
// the operation is considered to be failed, i.e. a_triple.a===true,
// and the a_triple.c===true. If the a_string is not empty,
// regardless of the operation success/failure, the a_triple.c===false.
//
// A comma is interpreted as a point.
raudrohi.base.private_code.string2float = function (s_haystack) {
    try {
        var s_preprocessed = null;
        var s1 = null;
        var b = null;
        var rgx = null;
        s_preprocessed =
        raudrohi.base.gsubAllLinebreaksSpacesTabs(s_haystack);
        s1 = raudrohi.base.gsub('.', ',', s_preprocessed);
        s_preprocessed = raudrohi.adapter.trim(s1);
        var a_triple = new raudrohi.core.triple();
        a_triple.c = false;
        if (s_preprocessed === "") {
            a_triple.a = true;
            a_triple.b = null;
            a_triple.c = true;
            return a_triple;
        } // if
        var fl_1;
        var b_extraction_complete = false;
        var b_sure_failure = false;
        try {
            fl_1 = parseFloat(s_preprocessed);
            // The parseFloat parses successfully a string like "45AbracaDabra"
            // to 45.0. So, one has to check the parseability also for the
            // reverse string. In the case of the example:"arbaDacarbA54".
            var fl_trash = parseFloat(raudrohi.base.reverse_string(s_preprocessed));
            if ((('' + fl_1) !== 'NaN') && (('' + fl_trash) !== 'NaN')) {
                var n = raudrohi.base.count_substrings(s_preprocessed, '.');
                if (n < 2) {
                    b_extraction_complete = true;
                } else {
                    b_sure_failure = true;
                } // else
            } else {
                b_sure_failure = true;
            } // else
        } catch (err0) {
        } // catch
        if (b_extraction_complete && (!b_sure_failure)) {
            b = false;
            // For a case like "42wow.73"
            rgx = raudrohi.base.private_code.string2float_regex1;
            b = raudrohi.base.regex_has_a_match(rgx, s_preprocessed);
            if (b === true) {
                b_sure_failure = true;
            } else {
                // For a case like "42...5"
                rgx = raudrohi.base.private_code.string2float_regex2;
                b = raudrohi.base.regex_has_a_match(rgx, s_preprocessed);
                if (b === true) {
                    b_sure_failure = true;
                } else {
                    // For a case like "42.5.7"
                    rgx = raudrohi.base.private_code.string2float_regex3;
                    b = raudrohi.base.regex_has_a_match(rgx, s_preprocessed);
                    if (b === true) {
                        b_sure_failure = true;
                    } else {
                        // For a case like "42.4+7"
                        rgx = raudrohi.base.private_code.string2float_regex4;
                        b =
                        raudrohi.base.regex_has_a_match(rgx, s_preprocessed);
                        if (b === true) {
                            b_sure_failure = true;
                        } // if
                    } // else
                } // else
            } // else
        } // if
        if (b_extraction_complete && (!b_sure_failure)) {
            a_triple.a = false;
            a_triple.b = fl_1;
        } else {
            a_triple.a = true;
            a_triple.b = null;
        } // else
        return a_triple;
    } catch (err) {
        raudrohi.tmg('6bd35bb7-131c-4402-b209-e181b0505dd7', err +
                                                             '  s_haystack==' +
                                                             s_haystack);
    } // catch
} // raudrohi.base.private_code.string2float


raudrohi.base.string2float = function (a_string) {
    try {
        var ht_out = raudrohi.base.pool_of_hashtables.get_empty_hashtable();
        var a_triple = raudrohi.base.private_code.string2float(a_string);
        // The next if-else clause is a very weird hack.
        if (a_triple.a === true) {
            ht_out.put('b_failure', true);
        } else {
            ht_out.put('b_failure', false);
        } // else
        if (a_triple.b === null) {
            ht_out.put('value', 0.0);
        } else {
            ht_out.put('value', a_triple.b);
        } // else
        ht_out.put('b_string_is_empty_after_trimming', a_triple.c);
        return ht_out;
    } catch (err) {
        raudrohi.tmg('6743ab23-f6d5-43c0-a409-e181b0505dd7',
            'a_string=="' + a_string + '"  ' + err);
    } // catch
} // raudrohi.base.string2float

//-------------------------------------------------------------------------
// Returns a float.  If the origin type is not supported or
// the conversion is not possible, an exception will be thrown.
raudrohi.base.to_fd = function (i_or_s_or_fd) {
    try {
        var s_in = '' + i_or_s_or_fd;
        var ht = raudrohi.base.string2float(s_in);
        var b_failure = ht.get('b_failure');
        if (b_failure === true) {
            raudrohi.tmg('f647f442-ef5d-44db-a509-e181b0505dd7',
                'Failed to convert the i_or_s_or_fd==' + i_or_s_or_fd +
                ' to a floating point value.');
        } // if
        var fd_out = ht.get('value');
        return fd_out;
    } catch (err) {
        raudrohi.tmg('2c14cf92-e2d9-4735-b5f8-e181b0505dd7', err);
    } // catch
} // raudrohi.base.to_fd

//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
// It's a generic pool that uses an element factory and element resetter
// for creating elements and for resetting returned elemenets.
//
// The element factory is required to have method create_element(), which
// is required to return a new element. The element resetter is rquired
// to have a method named reset_element(element) and it does not have to
// return anything.
raudrohi.base.pool = function (element_factory, element_resetter) {
    try {
        // TODO: Refactor it out so that there would be a "new" analogue,
        // like "get_from_pool" and each of the classes is required to
        // have a return_2_pool metohd that resetts the instance and
        // handles it back to the pool. A syntax example:
        //
        // x=get_from_pool(nice_class);
        // plapla
        // x.return_2_pool();
        //
        // The nice_class will probably need to have a field that encapsulates
        // some of the pooling related implementation.

        var self_public_ = this;
        var pooled_elements_ = [];
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isObject(element_factory,
                'element_factory', '87492618-409d-4eb6-91f8-e181b0505dd7');
            raudrohi.base.assert_isObject(element_resetter,
                'element_resetter', '57eec449-3967-48e1-a5f8-e181b0505dd7');
            if (element_factory['create_element'] === undefined) {
                raudrohi.tmg('17f0de93-d0b7-41c1-a4e8-e181b0505dd7',
                    'The element_factory is missing a public metod ' +
                    'called "create_element".');
            } // if
            if (element_resetter['reset_element'] === undefined) {
                raudrohi.tmg('d08f0c44-0cf0-470a-b1e8-e181b0505dd7',
                    'The element_resetter is missing a public metod ' +
                    'called "reset_element".');
            } // if
            raudrohi.base.assert_isFunction(element_resetter.reset_element,
                'element_resetter.reset_element',
                '29a43be4-799b-4a05-84e8-e181b0505dd7');
            raudrohi.base.assert_isFunction(element_factory.create_element,
                'element_factory.create_element',
                '241f8fac-fef3-42cf-b4e8-e181b0505dd7');
        } // if
        var element_factory_ = element_factory;
        var element_resetter_ = element_resetter;
        for (i = 0; i < 3; i++) {
            pooled_elements_.push(element_factory_.create_element());
        } // for

        this.get_element = function () {
            try {
                var len = pooled_elements_.length;
                var elem;
                if (0 < len) {
                    elem = pooled_elements_.pop();
                } else {
                    elem = element_factory_.create_element();
                } // if
                return elem;
            } catch (err) {
                raudrohi.tmg('7a326a31-469f-40a9-87d8-e181b0505dd7', err);
            } // catch
        } // get_element


        this.return_used_element = function (an_element) {
            try {
                // It might happen that elements that have not been
                // taken from this pool, get returned here. In that
                // case one wants to avoid the "flooding" and memory leak
                // by not taking the elements into the pool, while
                // cleaning them in order to facilitate their release
                // by the garbage collector.
                element_resetter_.reset_element(an_element);
                // The polhl is used for a FireFox 3.0.x bug workaround.
                var polhl = pooled_elements_.length;
                if (polhl < 100) {
                    pooled_elements_.push(an_element);
                } // if
            } catch (err) {
                raudrohi.tmg('ad565e42-1ae7-4631-a1d8-e181b0505dd7', err);
            } // catch
        } // return_used_element

        // The purpose of the method populate is to allow to
        // construct code that instantiates some of the pool
        // elements in a separate thread. The use of this
        // method is optional, i.e. the pool will instanteate
        // new elements whenever it runs out of them.
        this.populate = function (number_of_elements_to_fetch_and_return) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(
                        number_of_elements_to_fetch_and_return,
                        'number_of_elements_to_fetch_and_return',
                        '4550ccb1-b6f9-47cb-91d8-e181b0505dd7');
                } // if
                var ar = [];
                var len = number_of_elements_to_fetch_and_return
                var i = 0;
                var elem;
                for (i = 0; i < len; i++) {
                    elem = self_public_.get_element();
                    ar.push(elem);
                } // for
                for (i = 0; i < len; i++) {
                    elem = ar[i];
                    self_public_.return_used_element(elem);
                } // for
            } catch (err) {
                raudrohi.tmg('42386097-3873-4cce-a3d8-e181b0505dd7', err);
            } // catch
        } // populate

    } catch (err) {
        raudrohi.tmg('49e10e10-434e-429a-b1c8-e181b0505dd7', err);
    } // catch
} // raudrohi.base.pool

//------------------------------------------------------------------------
// Always returns a boolean value.
raudrohi.base.node_exists = function (html_id) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(html_id, 'html_id',
                '39dd6c35-d252-4f92-a3c8-e181b0505dd7');
        } // if
        var b_exists = true;
        try {
            var x = document.getElementById(html_id);
            if ((x === null) || (x === undefined)) {
                b_exists = false;
            } // if
        } catch (err) {
            b_exists = false;
        } // catch
        return b_exists;
    } catch (err) {
        raudrohi.tmg('61e55f3a-2575-4edf-92c8-e181b0505dd7', err);
    } // catch
} // raudrohi.base.node_exists

//------------------------------------------------------------------------
window.raudrohi.base.private_code.count_child_nodes_recursively =
function (parent_node) {
    var ar_children_nodes = parent_node.childNodes;
    var len = ar_children_nodes.length;
    var i = 0;
    var elem;
    var n = 0;
    var x = 0;
    // The node with an id of "wow" in the following example has 5 children.
    // One of them is the text node for text that resides between the
    // div-tags with id-s of "A" and "B":
    // <div id="wow">
    //     Text node #1 with nodeType==3
    //     <div id="A">whatever</div>
    //     <div id="B">whatever</div>
    //     Text node #3 with nodeType==3
    // </div>
    // However, one only wants to count the HTML tag nodes.
    while ((i < len) && (0 <= n)) {
        elem = ar_children_nodes[i];
        if (elem.nodeType === 1) {
            n++;
            try {
                x =
                raudrohi.base.private_code.count_child_nodes_recursively(elem);
                if (0 <= x) {
                    n = n + x;
                } else {
                    n = (-1);
                } // if
            } catch (exception) {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.tmg('b2b1712d-7fb7-4d55-82c8-e181b0505dd7',
                        'Exception in the recursive counting ' +
                        'of the child nodes. ' + exception);
                } // if
                n = (-1);
            } // catch
        } // if
        i++;
    } // while
    return n;
} // raudrohi.base.private_code.count_child_nodes_recursively


// Returns an integer. The parent node, i.e. the container node, is
// expected to exist in the DOM or it throws an exception. It checks
// the count at least twice and waits till the number of children
// stabilizes.
raudrohi.base.count_child_nodes_recursively = function (html_id_of_the_parent) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(html_id_of_the_parent,
                'html_id_of_the_parent',
                '436eabf3-266d-4450-b6b8-e181b0505dd7');
            if (raudrohi.base.node_exists(html_id_of_the_parent) !== true) {
                raudrohi.tmg('f4081c35-cb67-49ff-83b8-e181b0505dd7',
                    'There\'s no node with id=="' + html_id_of_the_parent +
                    '" in the DOM tree.');
            } // if
        } // if
        var container_node = document.getElementById(html_id_of_the_parent);
        var number_of_checks_max = 3;
        var number_of_checks_done = 0;
        var n0 = 0;
        var n1 = 0;
        var x;
        var b = true;
        try {
            while (number_of_checks_done < number_of_checks_max) {
                number_of_checks_done++;
                x = raudrohi.base.private_code.count_child_nodes_recursively(
                    container_node);
                if (x < 0) {
                    number_of_checks_done = 0;
                } // if
                if (b === true) {
                    n1 = x;
                    b = false;
                } else {
                    n0 = x;
                    b = true;
                } // else
                if (n1 !== n0) {
                    number_of_checks_done = 0;
                } // if
            } // while
            return n0;
        } catch (err) {
            raudrohi.tmg('4fc4a403-8fac-4300-97b8-e181b0505dd7', err);
        } // catch
    } catch (err) {
        raudrohi.tmg('3187d660-28b0-47aa-b2b8-e181b0505dd7', err);
    } // catch
} // raudrohi.base.count_child_nodes_recursively

//------------------------------------------------------------------------

raudrohi.base.node_tag_is = function (node_tag_caseinsensitive_name, a_node) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(node_tag_caseinsensitive_name,
                'node_tag_caseinsensitive_name',
                '2572be42-a525-4b6c-82a8-e181b0505dd7');
            raudrohi.base.assert_isObject(a_node, 'a_node',
                '2e7d22b2-5d85-434b-aaa8-e181b0505dd7');
        } // if
        var s_expected = node_tag_caseinsensitive_name.toLowerCase();
        var s_tag = a_node.nodeName.toLowerCase();
        if (s_expected === s_tag) {
            return true;
        } // if
        return false;
    } catch (err) {
        raudrohi.tmg('348b2232-290f-49a0-a2a8-e181b0505dd7', err);
    } // catch
} // raudrohi.base.node_tag_is

//------------------------------------------------------------------------
// The main and only purpose of this function is to work around
// a set of bugs in the FireFox and the Micro$oft Internet Expolorer,
// whenever it is possible at all.
//
// The main bug, that as of March 2010 seems to be present on both,
// Internet Explorer and FireFox, is that
// the innerHTML does not work properly in
// nested tables. The raudrohi.base.set_innerHTML does not
// contain a workaround to that fault. One can read more about the
// fault at: http://www.jonlee.ca/cant-use-innerhtml-on-tables-in-ie-heres-why/
// and http://www.ericvasilik.com/2006/07/code-karma.html
//
// From the comments of
// http://www.sweetvision.com/2007/04/08/dynamic-tables-in-javascript-for-ie-and-firefox/
// I read that, supposedly, the dom methods of insertRow() and
// insertCell() work in some cases. In practice, as of March 2010
// the innerHTML seems to work on the very first table, but not in
// nested tables.
//
//
// A few references to the FireFox bug, which often emerges from the
// comments of the postings:
// http://www.kenvillines.com/archives/69.html
// http://bytes.com/topic/javascript/answers/478639-innerhtml-bug-mozilla-firefox-ajax
// http://www.designerstalk.com/forums/help-me/9793-javascript-innerhtml-firefox-alternative.html
//
// A few references to the Micro$oft Internet Explorer bug:
// http://domscripting.com/blog/display/99
// http://alexle.net/archives/150
//
// For credits one mentions that the solution of
// creating a fresh DOM node and attatching it to the DOM tree
// originates from the http://domscripting.com/blog/display/99
// According to the http://domscripting.com/blog/display/99 the
// original author of the workaround is Toby Cole.
//
// And last, but not least, the "IE is Being Mean to Me",
// an original song written and performed by Scott Ward, sums it all up.
// http://www.youtube.com/watch?v=vTTzwJsHpU8
raudrohi.base.set_innerHTML = function (html_id, a_string) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(html_id, 'html_id',
                '3ae880e5-1683-4a39-84a8-e181b0505dd7');
            raudrohi.base.assert_isString(a_string, 'a_string',
                'e919794b-eaa1-410c-9298-e181b0505dd7');
            if (raudrohi.base.node_exists(html_id) !== true) {
                raudrohi.tmg('dad02c39-a8c0-481c-8498-e181b0505dd7',
                    'There\'s no node with id=="' + html_id +
                    '" in the DOM tree.');
            } // if
        } // if
        var node_container = document.getElementById(html_id);
        // The following loop has been copy-pasted from
        // http://snippets.jc21.com/snippets/javascript/remove-all-children-from-a-node/
        while (node_container.hasChildNodes() === true) {
            node_container.removeChild(node_container.firstChild);
        }// while
        var node_a = document.createElement('div');
        node_a.innerHTML = a_string;
        node_container.appendChild(node_a);
    } catch (err) {
        raudrohi.tmg('36417c59-85e5-40ca-8198-e181b0505dd7', err);
    } // catch
} //raudrohi.base.set_innerHTML


// For buffering.
raudrohi.base.private_code.string_contains_spacestabs_regex =
new RegExp("[\\s]", "g");

raudrohi.base.string_contains_spacestabs = function (s_haystack) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(s_haystack, 's_haystack',
                '1c9d6db4-c01f-4253-ab98-e181b0505dd7');
        } // if
        var b_out = false;
        var rgx = raudrohi.base.private_code.string_contains_spacestabs_regex;
        var s = s_haystack.replace(rgx, "");
        if (s.length !== s_haystack.length) {
            b_out = true;
        } // if
        return b_out;
    } catch (err) {
        raudrohi.tmg('92edb313-5384-485c-a188-e181b0505dd7', err);
    } // catch
} // raudrohi.base.string_contains_spacestabs

//------------------------------------------------------------------------
// Returns a string. It's useful for debugging.
raudrohi.base.ht2s_t1 = function (ht) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isObject(ht, 'ht',
                '559d53b2-9138-4fc6-8388-e181b0505dd7');
        } // if
        var keys = ht.keys();
        var len = keys.length;
        var key;
        var s_out = "";
        var lc_s_linebreak = "\n";
        var lc_s_equlsequals = "==";
        for (var i = 0; i < len; i++) {
            key = keys[i];
            s_out = s_out + lc_s_linebreak +
                    key + lc_s_equlsequals + ht.get(key);
        } // for
        s_out = s_out + lc_s_linebreak;
        return s_out;
    } catch (err) {
        raudrohi.tmg('3b3b1785-1031-4950-8188-e181b0505dd7', err);
    } // catch
} // raudrohi.base.ht2s_t1

//------------------------------------------------------------------------
//=========================================================================
//
// https://github.com/martinvahi/mmmv_notes/tree/master/mmmv_notes/phenomenon_scrutinization/string_concatenation
//
//=========================================================================

raudrohi.base.s_concat_array_of_strings_watershed = function(ar_in) {
	var s_lc_emptystring = "";
	var s_out = s_lc_emptystring; // needs to be inited to the ""
	var i_n = ar_in.length;
	if (i_n < 3) {
		if (i_n == 2) {
			s_out = ar_in[0] + ar_in[1];
			return s_out;
		} else {
			if (i_n == 1) {
				// For the sake of consistency one
				// wants to make sure that the returned
				// string instance always differs from those
				// that are within the ar_in.
				s_out = s_lc_emptystring + ar_in[0];
				return s_out;
			} else { // i_n==0
				s_out = s_lc_emptystring;
				return s_out;
			} // if
		} // if
	} // if

	// In its essence the rest of the code here implements
	// a tail-recursive version of this function. The idea is that
	//
	// s_out='something_very_long'.'short_string_1'.short_string_2'
	// uses a temporary string of length
	// 'something_very_long'.'short_string_1'
	// but
	// s_out='something_very_long'.('short_string_1'.short_string_2')
	// uses a much more CPU-cache fri}ly temporary string of length
	// 'short_string_1'.short_string_2'
	//
	// Believe it or not, but as of January 2012 the speed difference
	// in PHP can be at least about 20% and in Ruby about 50%.
	// Please do not take my word on it. Try it out yourself by
	// modifying this function and assembling strings of length
	// 10000 from single characters.
	//
	// This here is probably not the most optimal solution, because
	// within the more optimal solution the the order of
	// "concatenation glue placements" dep}s on the lengths
	// of the tokens/strings, but as the analysis and "gluing queue"
	// assembly also has a computational cost, the version
	// here is almost always more optimal than the totally
	// naive version.
	var ar_1 = ar_in;

	// http://longterm.softf1.com/specifications/array_indexing_by_separators/
	var b_take_from_ar_1 = true;
	var b_not_ready = true;
	var s_1 = null;
	var s_2 = null;
	var s_3 = null;
	var i_0 = null;
	var i = null;
	//------loop---init-----
	var i_ar_in_len = ar_1.length;
	var i_reminder = i_ar_in_len % 2;
	var i_loop = (i_ar_in_len - i_reminder) / 2;
	var ar_2 = new Array(i_loop + i_reminder);
	while (b_not_ready === true) {
		// The next if-statement is to avoid copying temporary
		// strings between the ar_1 and the ar_2.
		if (b_take_from_ar_1) {
			for (i = 0; i < i_loop; i++) {
				i_0 = i * 2;
				s_1 = ar_1[i_0];
				s_2 = ar_1[i_0 + 1];
				s_3 = s_1 + s_2;
				ar_2[i] = s_3;
			} // loop
			if (i_reminder === 1) {
				s_3 = ar_1[i_ar_in_len - 1];
				ar_2[i_loop] = s_3;
			} // if
			i_ar_in_len = ar_2.length;
			if (1 < i_ar_in_len) {
				i_reminder = i_ar_in_len % 2;
				i_loop = (i_ar_in_len - i_reminder) / 2;
				i = i_loop + i_reminder;
				// It's OK to allocate the arrays, because 
				// for 2^32 concatable strings there will 
				// be 32 array instantiations and the 
				// benefit is that the garbabe collector 
				// has a chance to destroy considerable amount
				// of temporary strings from the memory.
				ar_1 = new Array(i);
			} else {
				b_not_ready = false;
			} // else
		} else { // b_take_from_ar_1==false
			for (i = 0; i < i_loop; i++) {
				i_0 = i * 2;
				s_1 = ar_2[i_0];
				s_2 = ar_2[i_0 + 1];
				s_3 = s_1 + s_2;
				ar_1[i] = s_3;
			} // loop
			if (i_reminder === 1) {
				s_3 = ar_2[i_ar_in_len - 1];
				ar_1[i_loop] = s_3;
			} // if
			i_ar_in_len = ar_1.length;
			if (1 < i_ar_in_len) {
				i_reminder = i_ar_in_len % 2;
				i_loop = (i_ar_in_len - i_reminder) / 2;
				i = i_loop + i_reminder;
				ar_2 = new Array(i);
			} else {
				b_not_ready = false;
			} // else
		} // else
		b_take_from_ar_1 = !b_take_from_ar_1;
	} // while
	if (i_ar_in_len === 1) {
		if (b_take_from_ar_1) {
			s_out = ar_1[0];
		} else {
			s_out = ar_2[0];
		} // if
	} else {
		if (0 < i_ar_in_len) {
			throw(new Exception("This function is flawed.\n" +
				"GUID='ec42b3f4-73ce-418e-8e23-617100104dd7'"));
		} else {
			throw(new Exception("This function is flawed. \n" +
				"i_ar_in_len == 0 \n" +
				"GUID='36a8a552-4e02-4330-9913-617100104dd7'"));
		} // else
	} // if
	// The s_out has been inited to "".
	return s_out;
} // raudrohi.base.s_concat_array_of_strings_watershed 


// Implements watershed concatenation.
raudrohi.base.s_concat_array_of_strings = function(ar_in) {
	try {
		if (raudrohi_settings_debug_JavaScript === true) {
			raudrohi.base.assert_isArray(ar_in, 'ar_in',
				'92c11359-43a6-44e2-b163-617100104dd7');
		} // if
		// The implementation is in a separate function to 
		// allow the s_concat_array_of_strings_watershed to be
		// copy/pasted to projects that do not use the RJSL.
		var s_out = raudrohi.base.s_concat_array_of_strings_watershed(
			ar_in);
		return s_out;
	} catch (err) {
		throw(new Exception("This function is flawed.\n" + err +
			"\nGUID='e41003cf-c72e-4425-b882-617100104dd7'"));
	} // catch
} // raudrohi.base.s_concat_array_of_strings

//=========================================================================
//=========================================================================

if (window.raudrohi_lang_exists !== true) {
    window.raudrohi.lang = {};
    window.raudrohi_lang_exists = true;
} // if
if (window.raudrohi_lang_private_code_exists !== true) {
    window.raudrohi.lang.private_code = {};
    window.raudrohi_lang_private_code_exists = true;
} // if
if (window.raudrohi_lang_debug_exists !== true) {
    window.raudrohi.lang.debug = {};
    window.raudrohi_lang_debug_exists = true;
} // if
if (window.raudrohi_lang_comm_exists !== true) {
    window.raudrohi.lang.comm = {};
    window.raudrohi_lang_comm_exists = true;
} // if
if (window.raudrohi_lang_comm_phonestation_exists !== true) {
    window.raudrohi_lang_comm_phonestation = {};
    window.raudrohi_lang_comm_phonestation_exists = true;
} // if
if (window.raudrohi_lang_comparison_exists !== true) {
    window.raudrohi.lang.comparison = {};
    window.raudrohi_lang_comparison_exists = true;
} // if
if (window.raudrohi_lang_comparison_goe_exists !== true) {
    window.raudrohi.lang.comparison.goe = {};
    window.raudrohi_lang_comparison_goe_exists = true;
} // if

if (window.raudrohi_lang_selftests_exists !== true) {
    // TODO: move all selftests from this file to the selftests file.
    raudrohi.lang.selftests = {};
    window.raudrohi_lang_selftests_exists = true;
} // if


//-------------------------------------------------------------------------
window.raudrohi_core_burnCPUcycles_helpervar_ = 0;
window.raudrohi_core_burnCPUcycles_helpervar2_ = 0;
// This is the classic dirty, code monkey way of implementing the delay()
// function. Hooray to the JavaScript language design!!!
raudrohi.core.burnCPUcycles = function (number_of_batches) {
    try {
        if (number_of_batches < 0) {
            raudrohi.tmg('806c712c-2a7e-44cc-822a-310261704dd7',
                'number_of_batches(==' + number_of_batches + ') < 0');
        } // if
        var i = 0;
        while ((i++) <= number_of_batches) {
            window.raudrohi_core_burnCPUcycles_helpervar_ = number_of_batches +
                                                            window.raudrohi_core_burnCPUcycles_helpervar_;
            if ((i % 3) === 0) {
                // The if-clause is to make it harder for the interpreter
                // to optimize this loop.
                window.raudrohi_core_burnCPUcycles_helpervar_++;
            } // if
            var s_vardec_in_a_loop = "" + (i % 23);
            switch (s_vardec_in_a_loop) {
                case '1':
                    window.raudrohi_core_burnCPUcycles_helpervar_ = 2 + i +
                                                                    window.raudrohi_core_burnCPUcycles_helpervar_;
                    break;
                case '7':
                    window.raudrohi_core_burnCPUcycles_helpervar_ = 5 - i +
                                                                    window.raudrohi_core_burnCPUcycles_helpervar_;
                    break;
                case '17':
                    window.raudrohi_core_burnCPUcycles_helpervar2_ = 11 +
                                                                     window.raudrohi_core_burnCPUcycles_helpervar_ +
                                                                     number_of_batches;
                    break;
                default:
            } // switch
        } // while
    } catch (err) {
        raudrohi.tmg('5e3c6e8d-c091-45a0-911a-310261704dd7', err);
    } // catch
} // raudrohi.core.burnCPUcycles


//-------------------------------------------------------------------------
// The htQueue is a hashtable based queue implementaton.
// It's written by martin.vahi@softf1.com and is in
// public domain. It depends on the hashtable library by Tim Down.
//
// The idea is that for every element pushed to the queue,
// one increases a counter N and the element that is the
// first to pop always resides at the least possible index,
// which also increases with every removal of a queue element.
// it's not even meant to be a very efficient implementation,
// but the adding and removing of queue elements does not impose
// any copying or shifting of them, except when the N reaches
// its maximum, which is determined by the integer type.
//
// It has a property that the value of its elements can be
// efectively replaced while the elements stay in the queue.
raudrohi.lang.htQueue = function () {
    // The -100 is a dirty, incorrect, thing for safety due to the
    // non-threadsafetyness of the queue.
    var N_max_ = raudrohi.core.safe_positive_int - 100;
    var N_high_ = 1; // 0 is interpreted as null in Hashtable().
    var N_low_ = 1;
    var ht_ = new Hashtable();

    // Element ID-s are the strings that can be used for
    // accessing the elements in the queue from the outer world
    // in a random access manner. The ht_keys_ associates them
    // with the actual keys of the ht_.
    var ht_keys_ = new Hashtable();
    var ht_keys_reverse_ = new Hashtable();

    function rehash_if_needed() {
        // The sole purpose of this function is to shift the
        // indexes back next to 1.
        try {
            if (N_high_ < N_max_) {
                return;
            }
            if (N_low_ === 1) {
                throw "htQueue.push(): Queue maximum length exceeded.";
            }
            var elemIDs = ht_keys_.keys();
            var new_ht = new Hashtable();
            var elemID;
            var old_ht_key;
            var new_ht_key;
            var len = elemIDs.length;
            for (var i = 0; i < len; i++) {
                elemID = elemIDs[i];
                old_ht_key = ht_keys_.get(elemID);
                new_ht_key = old_ht_key - N_low_ + 1;
                new_ht.put(new_ht_key, ht_.get(old_ht_key));
                ht_keys_.put(elemID, new_ht_key);
                ht_keys_reverse_.remove(old_ht_key);
                ht_keys_reverse_.put(new_ht_key, elemID);
            } // for
            N_high_ = N_high_ - N_low_ + 1;
            N_low_ = 1;
            ht_ = new_ht;
        }
        catch (err) {
            raudrohi.tmg('b42ad731-d878-4f91-b41a-310261704dd7', err);
        } // catch
    } // rehash_if_needed()

    // Returns a string that allow one to replace the element
    // within the queue. Returns an element_id that is a key to
    // the element in the hashtable.
    this.push = function (element) {
        try {
            rehash_if_needed();
            var elem_id = raudrohi.base.generate_id();
            ht_keys_.put(elem_id, N_high_);
            ht_keys_reverse_.put(N_high_, elem_id);
            ht_.put(N_high_++, element);
            return elem_id;
        } catch (err) {
            raudrohi.tmg('cb752140-48b4-471f-931a-310261704dd7', err);
        } // catch
    }; // this.push

    this.is_empty = function () {
        return (N_high_ === N_low_);
    }; // this.is_empty()

    // Returns null, if the queue is empty.
    this.pop = function () {
        try {
            if (N_low_ === N_high_) {
                return null;
            }
            var elem = ht_.get(N_low_);
            var elem_id = ht_keys_reverse_.get(N_low_);
            ht_keys_reverse_.remove(N_low_);
            ht_.remove(N_low_++);
            ht_keys_.remove(elem_id);
            if (N_low_ === N_high_) {
                // We'll avoid the costly rehashing.
                N_low_ = 1;
                N_high_ = 1;
            } // if
            return elem;
        } catch (err) {
            raudrohi.tmg('dd593d5e-a054-4ff2-940a-310261704dd7', err);
        } // catch
    }; // this.pop

    this.length = function () {
        return N_high_ - N_low_;
    }; // this.length

    // Replaces a value of an element. The new element will
    // have exactly the same position in the queue as the old one.
    // Returns true, if operation succeeded. Otherwise returns false.
    this.replace_value = function (element_id, element_new_value) {
        if (ht_keys_.containsKey(element_id) !== true) {
            return false;
        }
        try {
            // The try is because some other thread might
            // intervene, for example, the element might be
            // popped or something. In the case of this method.
            // one actually relies on this "thread safety".
            var htkey = ht_keys_.get(element_id);
            ht_.put(htkey, element_new_value);
            return true;
        } catch (err) {
            if (raudrohi_settings_debug_JavaScript === true) {
                raudrohi.tmg('52186bad-aa85-4296-a40a-310261704dd7', err);
            }
            return false;
        } // catch
        return false; // Just to get rid of IDE warnings.
    }; // this.replace_value

    // Returns a reference to the element. The element_id is
    // expected to be the one that got returned  by the push().
    // Returns null, if the element_id is invalid or the
    // element has been removed from the queue.
    this.get = function (element_id) {
        try {
            if (ht_keys_.containsKey(element_id) !== true) {
                return null;
            } // if
            var htkey = ht_keys_.get(element_id);
            var elem = ht_.get(htkey);
            return elem;
        }
        catch (err) {
            raudrohi.tmg('fc397b50-64d7-47f1-b10a-310261704dd7', err);
        } // catch
    } // get

    // The same as the pop a clone or reference to the
    // element is returned in stead of the real instance and the
    // queue is left unchanged. It returns null, if the queue is
    // empty.
    this.get_a_clone_of_the_first_element_to_exit = function () {
        try {
            if (N_low_ === N_high_) {
                return null;
            }
            var elem = ht_.get(N_low_);
            return elem;
        } catch (err) {
            raudrohi.tmg('2b05b11d-f6ac-47fd-850a-310261704dd7', err);
        } // catch
    }; // this.get_a_clone_of_the_first_element_to_exit

    // Empties the queue.
    this.clear = function () {
        ht_.clear();
        N_low_ = 1;
        N_high_ = 1;
    }; // this.clear
}; // raudrohi.lang.htQueue

//-------------------------------------------------------------------------
// a_function_name is expected to be a string.
// ht is an instance of the Tim Down's Hashtable class.
// a_function_argument is whatever, which is not null
raudrohi.lang.map_hashtable =
function (ht, a_function_name, a_function_argument) {
    try {
        // TODO: refactor it heavily. Further comments reside next to
        // the raudrohi.lang.map_hashtable_t2
        var keys = ht.keys();
        var ht_key;
        var reference2_ht_value;
        var a_func;
        var cmd = 'a_func=reference2_ht_value.' + a_function_name + ';';
        var len = keys.length;
        for (var i = 0; i < len; i++) {
            ht_key = keys[i];
            reference2_ht_value = ht.get(ht_key);
            eval(cmd, this);
            a_func(a_function_argument);
        } // for
    }
    catch (err) {
        raudrohi.tmg('ecf1b914-2c27-41dd-830a-310261704dd7', err);
    } // catch
}; // raudrohi.lang.map_hashtable

// It's the same as the raudrohi.lang.map_hashtable, except that
// for argumentless functions.
raudrohi.lang.map_hashtable_t2 = function (ht, a_function_name) {
    try {
        // TODO: refactor it out by merging it with the
        // raudrohi.lang.map_hashtable and turning that
        // to a general version that takes the number of
        // function arguments in as an integer or uses reflection
        // to find that out.
        var keys = ht.keys();
        var ht_key;
        var reference2_ht_value;
        var a_func;
        var cmd = 'a_func=reference2_ht_value.' + a_function_name + ';';
        var len = keys.length;
        for (var i = 0; i < len; i++) {
            ht_key = keys[i];
            reference2_ht_value = ht.get(ht_key); // It's being used in the eval.
            eval(cmd, this);
            a_func();
        } // for
    }
    catch (err) {
        raudrohi.tmg('6a99bd21-0fbf-44b5-a40a-310261704dd7', err);
    } // catch
}; // raudrohi.lang.map_hashtable_t2

//------------------------------------------------------------------------

// multiply_string('Hi',3)==='HiHiHi'. It's inspired by the Ruby
// feature, where 'Hi'*3==='HiHiHi'.
raudrohi.lang.multiply_string = function (a_string, an_integer) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(a_string, 'a_string',
                'ada86e50-aa1c-4e45-a30a-310261704dd7');
            raudrohi.base.assert_isNumber(an_integer, 'an_integer',
                '4984b215-d85b-42bc-b80a-310261704dd7');
        } // if
        if (an_integer < 0) {
            raudrohi.tmg('574e9088-09ba-4d31-94f9-310261704dd7',
                'an_integer(==' + an_integer + ')<0');
        } // if
        if (an_integer === 0) {
            return '';
        } // if
        var s = '';
        for (var i = 0; i < an_integer; i++) {
            s = s + a_string;
        } // for
        return s;
    }
    catch (err) {
        raudrohi.tmg('788d8545-7512-4f28-b5f9-310261704dd7', err);
    } // catch
} // raudrohi.lang.multiply_string


//------------------------------------------------------------------------
// Returns HTML string of a table that has one row and 3 columns.
// Only the center column is visible.
raudrohi.lang.fixed_width_string_html =
function (fixed_string_length, substring, substring_horizontal_alignment) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isNumber(fixed_string_length,
                'fixed_string_length', 'adf65d38-5d7d-44f2-84f9-310261704dd7');
            raudrohi.base.assert_isString(substring, 'substring',
                'b8ffb343-3354-47fe-93f9-310261704dd7');
            raudrohi.base.assert_isString(substring_horizontal_alignment,
                'substring_horizontal_alignment',
                'd8093023-6edd-401c-93f9-310261704dd7');
            if (fixed_string_length < substring.length) {
                raudrohi.tmg('4441c4a6-0393-405d-91f9-310261704dd7',
                    'fixed_string_length == ' + fixed_string_length +
                    ' < substring.length == ' + substring.length);
            } // if
        } // if
        var s_left = '';
        var s_center = raudrohi.adapter.trim(substring);
        var s_right = '';
        var n_of_spaces = fixed_string_length - s_center.length;
        var x;
        var xx;
        var s_an_em = '&nbsp;';//'x';
        switch (substring_horizontal_alignment) {
            case 'left':
                s_right = raudrohi.lang.multiply_string(s_an_em, n_of_spaces);
                break;
            case 'right':
                s_left = raudrohi.lang.multiply_string(s_an_em, n_of_spaces);
                break;
            case 'center':
                if ((n_of_spaces % 2) === 0) {
                    x = n_of_spaces / 2;
                    xx = raudrohi.lang.multiply_string(s_an_em, x);
                    s_left = xx;
                    s_right = xx;
                } else {
                    x = (n_of_spaces - 1) / 2;
                    xx = raudrohi.lang.multiply_string(s_an_em, x);
                    s_left = xx;
                    s_right = xx + s_an_em;
                } // else
                break;
            default:
                if (raudrohi_settings_debug_JavaScript === true) {
                    throw raudrohi.tmg(
                        '165e2b91-e109-480f-92f9-310261704dd7',
                        'There\'s no branching for substring_horizontal_alignment(==' +
                        substring_horizontal_alignment + ').');
                } // if
        } // switch
        //		var answer=''+
        //		'<table class="raudrohi_positioning_table"><tbody>'+
        //		'<tr>'+
        //		'<td><div style="visibility:visible;">'+s_left+'</div></td>'+
        //		'<td><div style="visibility:visible;">'+s_center+'</div></td>'+
        //		'<td><div style="visibility:visible;">'+s_right+'</div></td>'+
        //		'</tr>'+
        //		'</tbody></table>';
        var answer = s_left + s_center + s_right;
        return answer;
    } catch (err) {
        raudrohi.tmg('3b1cc423-f11b-4fed-bbf9-310261704dd7', err);
    } // catch
} // fixed_width_string_html

//------------------------------------------------------------------------
// The impl exist only for easying the testing.
raudrohi.lang.generate_nonexisting_needle_impl =
function (haystack_string, an_integer) {
    try {
        raudrohi.base.assert_isString(haystack_string, 'haystack_string',
            'a7000a57-d921-47e4-81e9-310261704dd7');
        var s0 = raudrohi.base.normalize_whitespaces(haystack_string);
        var s1 = raudrohi.base.normalize_linebreaks(s0);
        s0 = raudrohi.base.gsub('', ' ', s1);
        s1 = raudrohi.base.gsub('', "\n", s0);
        s0 = 'X' + an_integer;
        while (s1.indexOf(s0, 0) !== (-1)) {
            s0 += 'Y';
        } // while
        return s0;
    }
    catch (err) {
        raudrohi.tmg('07c4724f-bdec-4dca-93e9-310261704dd7', err);
    } // catch
} // generate_nonexisting_needle_impl

// It's quite an expensive function. It returns a string that is not
// present within the haystack string. It interprets the haystack_string
// as if all of its linebreaks and spaces were empty strings.
raudrohi.lang.generate_nonexisting_needle = function (haystack_string) {
    try {
        var s_needle = raudrohi.lang.generate_nonexisting_needle_impl(
            haystack_string, raudrohi.base.rand(100, 999));
        return s_needle;
    } catch (err) {
        raudrohi.tmg('c4265f54-07ca-49c4-b3e9-310261704dd7', err);
    } // catch
} // generate_nonexisting_needle

raudrohi.lang.selftests.generate_nonexisting_needle = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        var s = 'aroundaboutla51wsomebodyX5';
        var s_needle = raudrohi.lang.generate_nonexisting_needle_impl(s, 7);
        if (s_needle !== 'X7') {
            ar_failed_tests.push('X7, s_needle==' + s_needle);
        } // if
        s_needle = raudrohi.lang.generate_nonexisting_needle_impl(s, 5);
        if (s_needle !== 'X5Y') {
            ar_failed_tests.push('X5Y, s_needle==' + s_needle);
        } // if
        var b = false;
        try {
            s_needle = raudrohi.lang.generate_nonexisting_needle(s);
        }
        catch (err0) {
            b = true;
        }// catch err0
        if (b) {
            ar_failed_tests.push('b, s_needle==' + s_needle);
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.generate_nonexisting_needle');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    }
    catch (err) {
        raudrohi.tmg('62254fbb-f49a-4d88-a7e9-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.generate_nonexisting_needle

//------------------------------------------------------------------------

// Retunrs an array of lines. The array always contains at
// least one element. Basically, it's almost just a wrapper to the JavaScript
// split() method, but it takes care of the different kinds of
// linebreaks and it assumes that the linebreak always separates
// 2 strings, even if they are empty strings. For example, a string like
// "\nAbba\nCa\dabbra\n" is split to 5 lines, the first and the last
// line are considered to consist of an empty string.
raudrohi.lang.str2lines = function (a_string) {
    try {
        raudrohi.base.assert_isString(a_string, 'a_string',
            'bd930d11-538c-4c48-91e9-310261704dd7');
        var ar = [];
        if (a_string === '') {
            ar.push(a_string);
            return ar;
        } // if
        var s0 = raudrohi.base.normalize_linebreaks(a_string);
        // The trickery is due to a fact that the JavaScript
        // standard split does not work with  the "\n".
        var s_needle_linebreak = raudrohi.lang.generate_nonexisting_needle(s0);
        var s_needle_bounds = raudrohi.lang.generate_nonexisting_needle(s0 +
                                                                        s_needle_linebreak);
        var s1 = raudrohi.base.gsub(
            s_needle_bounds + s_needle_linebreak + s_needle_bounds, "\n", s0);
        ar = s1.split(s_needle_linebreak);
        var ar1 = [];
        var len = ar.length;
        var i = 0;
        var s_line;
        for (i = 0; i < len; i++) {
            s_line = ar[i];
            ar1.push(raudrohi.base.gsub('', s_needle_bounds, s_line));
        } // for
        return ar1;
    } catch (err) {
        raudrohi.tmg('0a11022b-4e2a-481b-94e9-310261704dd7', err);
    } // catch
} // str2lines

raudrohi.lang.selftests.str2lines = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        var s = "line1\nline2";
        var ar = raudrohi.lang.str2lines(s);
        // One has to store the ar.length to the x, because otherwise the
        // FireFox 3.0.x won't handle the case correctly.
        var x = ar.length;
        if (x !== 2) {
            ar_failed_tests.push('2!=ar.lenght==' + x);
        } // if
        if (ar[0] !== 'line1') {
            ar_failed_tests.push('l1 ar[0]!=\'line1\'==' + ar[0]);
        } // if
        if (ar[1] !== 'line2') {
            ar_failed_tests.push('l2 ar[1]!=\'line2\'==' + ar[1]);
        } // if
        s = "\nline77\nline99\n";
        ar = raudrohi.lang.str2lines(s);
        x = ar.length; // Do not refactor this line out. See the comment above.
        if (x !== 4) {
            ar_failed_tests.push('4!=ar.lenght==' + x);
        } // if
        if (ar[0] !== '') {
            ar_failed_tests.push('4liner ar[0]==' + ar[0]);
        }// if
        if (ar[3] !== '') {
            ar_failed_tests.push('4liner ar[3]==' + ar[3]);
        }// if
        if (ar[1] !== 'line77') {
            ar_failed_tests.push('4liner ar[1]==' + ar[1]);
        }// if
        if (ar[2] !== 'line99') {
            ar_failed_tests.push('4liner ar[2]==' + ar[2]);
        }// if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name', 'raudrohi.lang.selftests.str2lines');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('22444345-a0fe-4869-b2e9-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.str2lines


// Converts a multiline string to a HTML string of a table. It retains
// all spaces, including multiple spaces.
raudrohi.lang.fixed_size_string_html = function (a_multiline_string) {
    try {
        raudrohi.base.assert_isString(a_multiline_string, 'a_multiline_string',
            '35bdc31f-7ba1-4b84-a3d9-310261704dd7');
        var s_html = '<table class="raudrohi_positioning_table"><tbody>';
        var s1 = raudrohi.base.gsub('&nbsp;', ' ',
            raudrohi.base.normalize_whitespaces(a_multiline_string));
        var ar = raudrohi.lang.str2lines(s1);
        var len = ar.length;
        var i = 0;
        var elem;
        for (i = 0; i < len; i++) {
            elem = ar[i];
            s_html = s_html + '<tr><td>' + elem + '</td></tr>';
        } // for
        s_html = s_html + '</tbody></table>';
        return s_html;
    } catch (err) {
        raudrohi.tmg('3b39f634-7067-4d31-b2d9-310261704dd7', err);
    } // catch
} // fixed_size_string_html

//-------------------------------------------------------------------------
raudrohi_lang_comm_phonecall =
function (origin_phone_number, destination_phone_number, data, data2) {
    raudrohi.base.assert_isString(data, 'data',
        '04470449-d3ff-4d3e-a1d9-310261704dd7');
    this.data = data;
    // data2 is for optional binary data transfer
    this.data2 = 0;
    if (typeof(data2) !== "undefined") {
        this.data2 = data2;
    } // if
    this.dest_phone_number = destination_phone_number;
    this.origin_phone_number = origin_phone_number;
}; //raudrohi_lang_comm_phonecall

// key   == raudrohi.lang.comm.phone.phone_number
// value == raudrohi.lang.comm.phone
// It's a list of all phones that are "within the phone network".
raudrohi_lang_comm_phonestation.phones = new Hashtable();

// Basic API for for propagating signals downstream and between objects.
// Practically, a phone is meant to be an object that if it is
// poneowner.properties.phone, then it allows the phoneowner to
// communicate with other phone owners. It also has a function that it
// automatically transmits signals to subordinate objects and keeps
// track of them.
//
// One just has to take care that it won't get stolen, since it is
// among the public properties. :-) The phone also allows to take
// "long distance calls" to the server and cancel the long distance
// calls automatically, if the server has not
// "picked up its phone"(sent a response) yet.
raudrohi.lang.comm.phone = function (a_phone_number_as_a_string) {
    // TODO: Refactor the whole phoneing system so that it
    // supports whole-program trace with tracing point classes, i.e.
    // so that one can switch in and out different groups of tracing
    // points. The call-trace should be a list of GUIDs in console and
    // it should cross different programming languages, i.e. It will
    // probably have to travel to the server and back in the debugging
    // mode, so that when there's a crash back at the JavaScript
    // side, one can take a look by navigating to the source code
    // regions that have the GUIDs, what the call graph was.
    var self_public_ = this;
    var phone_number_ = a_phone_number_as_a_string;
    this.get_phone_number = function () {
        return phone_number_;
    }; // this.get_phone_number
    var is_connected_ = false;
    this.is_connected = function () {
        return is_connected_;
    }; // this.is_connected

    this.connect2phonestation = function () {
        try {
            if (is_connected_) {
                return;
            }
            if (raudrohi_lang_comm_phonestation.phones.containsKey(phone_number_)) {
                raudrohi.tmg('499f7d91-50ae-43cc-9ed9-310261704dd7',
                    'A phone with a phone number of ' + phone_number_ +
                    ' has already been registered to the phonestation.');
            }//if
            raudrohi_lang_comm_phonestation.phones.put(phone_number_,
                self_public_);
            is_connected_ = true;
        }
        catch (err) {
            raudrohi.tmg('5e3cd1a3-6a8e-494c-a3d9-310261704dd7', err);
        } // catch
    }; // this.connect2phonestation
    self_public_.connect2phonestation();

    this.disconnect_from_phonestation = function () {
        try {
            if (!is_connected_) {
                return;
            }
            raudrohi_lang_comm_phonestation.phones.remove(phone_number_);
            is_connected_ = false;
        }
        catch (err) {
            raudrohi.tmg('401b2730-e4db-425a-81d9-310261704dd7', err);
        } // catch
    }; // this.disconnect_from_phonestation

    // It's OK for the phone to be connected to the network
    // duering this operation. Calls to the old phone number
    // will be dismissed.
    this.reset_phone_number = function (new_phone_number) {
        var b1 = is_connected_;
        if (b1) {
            self_public_.disconnect_from_phonestation();
        }
        phone_number_ = new_phone_number;
        if (b1) {
            self_public_.connect2phonestation();
        }
    }; // this.reset_phone_number

    this.receive_phonecall = function (a_phonecall_instance) {
        throw "\n------------------------\n" +
              'raudrohi.lang.comm.phone.receive_phonecall has to be overriden.' +
              "\nGUID=='04aeca5a-badf-4645-b2d9-310261704dd7'";
    }; // this.receive

    this.call = function (destination_phone_number, data, data2) {
        try {
            if (raudrohi_lang_comm_phonestation.phones.containsKey(destination_phone_number) !==
                true) {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.tmg('40a9d05f-3b30-4321-91c9-310261704dd7',
                        'Phone # ' + destination_phone_number +
                        ' was not in phonenetwork.');
                } // if
                return;
            } // if
            var phone = raudrohi_lang_comm_phonestation.phones.get(
                destination_phone_number);
            var data2_local = 0;
            if (typeof(data2) !== "undefined") {
                data2_local = data2;
            } // if
            var phonecall = new raudrohi_lang_comm_phonecall(phone_number_,
                destination_phone_number, data, data2_local);
            phone.receive_phonecall(phonecall);
        } catch (err) {
            var err_supplement1 = err + data;
            raudrohi.tmg('3d79a8ca-a459-4fbd-84c9-310261704dd7',
                'self_public_.get_phone_number()==' +
                self_public_.get_phone_number() +
                "\n destination_phone_number==" + destination_phone_number +
                ' ' + err_supplement1);
        } // catch
    }; // this.call


    // It's a kind of maffia-like method: explode the phone with the
    // person, who has it in its pocket.
    this.destruct_phone = function () {
        try {
            raudrohi_lang_comm_phonestation.phones.remove(phone_number_);
        } catch (err) {
            raudrohi.tmg('a5e84e4c-9ade-4d6e-84c9-310261704dd7', err);
        } // catch
    }; // this.destruct

}; //raudrohi.lang.phone

//-------------------------------------------------------------------------
// I's a black hole for useless phonecalls, just like the /dev/null
// is in Linux.
raudrohi.lang.phonebooth_dev_null = function () {
    this.phone = new raudrohi.lang.comm.phone('/dev/null');
    this.phone.receive_phonecall = function (a_phonecall_instance) {
    }
} // raudrohi.lang.phonebooth_dev_null

//-------------------------------------------------------------------------
raudrohi.lang.userinterface_text = function () {
    try {
        // TODO: implement a mechanism, where user interface texts
        // are downloaded "on-demand" and are available only
        // to authenticated users. For example there might be a
        // method that takes an array of message numbers and then
        // preorders them from the server. The arrived messages
        // should be placed into the ht_cache_, which makes the pre-ordered
        // texts available through the get(...) method.

        var ht_cache_ = new Hashtable(); // key==<s_text_number> value==<text>


        // The DOM operations are said to be rather expensive.
        function get_from_DOM(i_text_number) {
            try {
                var element_id;
                if (raudrohi_settings_debug_JavaScript === true) {
                    if (raudrohi_adapter_isNumber(i_text_number) !== true) {
                        raudrohi.adapter.log(i_text_number +
                                             " is not a number");
                    } // if
                    element_id = '' +
                                 'webpage_initiation_data_from_server_sirel_dictionary_msg_' +
                                 i_text_number;
                    if (raudrohi.base.node_exists(element_id) !== true) {
                        raudrohi.tmg('149de612-3f70-4a80-95c9-310261704dd7',
                            'There\'s no node with id=="' + element_id +
                            '" in the DOM tree.');
                    } // if
                } // if
                element_id = '' +
                             'webpage_initiation_data_from_server_sirel_dictionary_msg_' +
                             i_text_number;
                var x;
                x = document.getElementById(element_id);
                if (x === null) {
                    raudrohi.adapter.log("UI text not found.\n" +
                                         'element_id==' + element_id);
                } // if
                return x.innerHTML;
            } catch (err) {
                raudrohi.tmg('75992458-0471-41a3-a2c9-310261704dd7', err);
            } // catch
        } // get_from_DOM

        this.get = function (i_text_number) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(
                        i_text_number, 'i_text_number',
                        'f4fdcdc4-4359-4a53-aac9-310261704dd7');
                } // if
                var s_out = null;
                var s_key = '' + i_text_number;
                if (ht_cache_.containsKey(s_key) === true) {
                    s_out = ht_cache_.get(s_key);
                } else {
                    s_out = get_from_DOM(i_text_number);
                    ht_cache_.put(s_key, s_out);
                } // else
                return "" + s_out;
            }
            catch (err) {
                raudrohi.tmg('2f18feb6-dc29-4c0a-83c9-310261704dd7', err);
            } // catch
        } // get

    }
    catch (err) {
        raudrohi.tmg('5c745965-7a95-47ce-abb9-310261704dd7', err);
    } // catch
} // raudrohi.lang.userinterface_text


//-------------------------------------------------------------------------
// If show_them==false, the elements are hidden. Otherwise the elements
//  are made visible.
raudrohi.lang.set_visibility_ar =
function (an_array_of_element_names, show_them) {
    try {
        var len = an_array_of_element_names.length;
        var an_elem_name;
        var cache_func_ras = raudrohi.adapter.setAttribute; // IE optimization
        for (var i = 0; i < len; i++) {
            an_elem_name = an_array_of_element_names[i];
            if (show_them) {
                cache_func_ras(an_elem_name, 'style', 'visibility:visible;');
            } else {
                cache_func_ras(an_elem_name, 'style', 'visibility:hidden;');
            } // else
        } // for
    } catch (err) {
        raudrohi.tmg('7bc2064d-4a15-4336-a5b9-310261704dd7', err);
    } // catch
} // raudrohi.lang.set_visibility_ar

raudrohi.lang.set_visibility =
function (element_id, true_if_element_is_visible) {
    var ss_id = '';
    try {
        if (!raudrohi_adapter_isString(element_id)) {
            raudrohi.tmg('04118021-cac4-442e-9969-310261704dd7',
                'The element_id is not a string and has a value of ' +
                element_id);
        } // if
        ss_id = element_id;
        if (!raudrohi_adapter_isBoolean(true_if_element_is_visible)) {
            raudrohi.tmg('8cf27e16-42eb-47fd-b569-310261704dd7',
                'The true_if_element_is_visible is not a boolean and ' +
                'has a value of ' + true_if_element_is_visible);
        } // if
        if (true_if_element_is_visible) {
            raudrohi.adapter.setAttribute(element_id,
                'style', 'visibility:visible;');
        } else {
            raudrohi.adapter.setAttribute(element_id,
                'style', 'visibility:hidden;');
        } // else
    } catch (err) {
        raudrohi.tmg('de4b222b-3922-4445-9469-310261704dd7',
            err + ' element_id==' + ss_id);
    } // catch
} //raudrohi.lang.set_visibility

//-------------------------------------------------------------------------
// The gate is open to only the first thread that tries to pass it.
// The trhead that got through it, must unlock it before it exits.
// An example:
//
// var gate=new raudrohi.lang.mutex_gate();
// function where_at_most_one_thread_is_in(){
//         if(!gate.lock_it_successfully()){
//                  return;
//                  } // if
//         // Stuff that's being executed only by one thread at a time.
//         gate.unlock();
// } // function
//
// An side effect of the raudrohi.lang.mutex_gate is that if the gate
// is unlocked and at least 2 threads that try to pass it have
// appropriate timing, none of the 2 threads get through the gate.
raudrohi.lang.mutex_gate = function () {
    var number_of_locks_ = 0;
    var c1_ = 0;
    var c2_ = 0;

    this.lock_it_successfully = function () {
        try {
            var answer = false;
            if (number_of_locks_ === 0) {
                c1_++;
                if (c1_ === 1) {
                    c2_++;
                    if (c2_ === 1) {
                        number_of_locks_++;
                        answer = true;
                    } // if
                    c2_--;
                } // if
                c1_--;
            } // if
            return answer;
        } catch (err) {
            raudrohi.tmg('051e8411-79f4-4c0f-a559-310261704dd7', err);
        } // catch
    } // lock_it_successfully

    this.unlock = function () {
        if (0 < number_of_locks_) {
            number_of_locks_--;
        } // if
    } // unlock

    this.is_locked = function () {
        var answer = false;
        if (0 < number_of_locks_) {
            answer = true;
        } // if
        return answer;
    } // is_locked

} // raudrohi.lang.threadsafe_flag

//-------------------------------------------------------------------------
// Implements a logic for a "machine" startup and shutdown buttons,
// with an assumption that it takes some time for the machine to
// start up and some time for it to shut down. Sample code:
//
// a_machine=function(){
// var startup_shutdown_handler_=new raudrohi.lang.startup_shutdown_handler(this);
//
//     this.startup=function(){
//     if(startup_shutdown_handler_.hook_startup_started()){
//             return;
//             } // if;
//     // The rest of the start up sequence.
//     startup_shutdown_handler_.hook_startup_complete();
//     } // startup
//
//     this.shutdown=function(){
//     if(startup_shutdown_handler_.hook_shutdown_started()){
//             return;
//             } // if;
//     // The rest of the shut down sequence.
//     startup_shutdown_handler_.hook_shutdown_complete();
//     } // startup
//
// this.onoff_switch=function(turn_machine_on){
//        if(turn_machine_on){
//                startup_shutdown_handler_.startbutton_pushed();
//        } else {
//                startup_shutdown_handler_.stopbutton_pushed();
//                } // else
//        } // onoff_switch
//
// } // a_machine
//
//
// Methods machine_instance_.private_code_.widget_startup_sequence() and
// machine_instance_.only_for_raudrohi_core_developers.widget_shutdown_sequence() are compulsory.
raudrohi.lang.startup_shutdown_handler = function (machine_instance) {
    try {
        var self_public_ = this;
        var machine_instance_ = machine_instance;
        var shutdown_in_progress_ = false;
        var startup_in_progress_ = false;
        var machine_is_running_ = false;
        this.machine_is_running = function () {
            return machine_is_running_;
        } // machine_is_running
        var next_state_is_run_ = false;

        var stop_indication_request_ = {};
        stop_indication_request_.set = false;
        stop_indication_request_.phone_number = 'not set, ' +
                                                'GUID=="ee3be743-2096-4ac2-b21a-310261704dd7"';
        stop_indication_request_.data = 'not set, ' +
                                        'GUID=="150a9131-9358-48ef-a11a-310261704dd7"';
        stop_indication_request_.binary_data = null;

        var start_indication_request_ = {};
        start_indication_request_.set = false;
        start_indication_request_.phone_number = 'not set, ' +
                                                 'GUID=="cfbe7325-9ce8-4bc3-911a-310261704dd7"';
        start_indication_request_.data = 'not set, ' +
                                         'GUID=="6131295a-b871-4836-931a-310261704dd7"';
        start_indication_request_.binary_data = null;


        function update_machine_state() {
            try {
                // The idea behind the sIr is that may be
                // some thread might modify the
                // <start/stop>_indication_request_
                // fields while the startup/shutdown takes place.
                // The local copy "saves the state" of the
                // <start/stop>_indication_request_
                var sIr;
                if (next_state_is_run_) {
                    if (machine_is_running_ || startup_in_progress_) {
                        return;
                    } // if
                    if (!shutdown_in_progress_) {
                        sIr = start_indication_request_;
                        machine_instance_.only_for_raudrohi_core_developers.widget_startup_sequence();
                        if (sIr.set) {
                            machine_instance_.phone.call(sIr.phone_number,
                                sIr.data, sIr.binary_data);
                            start_indication_request_.set = false;
                        } // if
                    } // if
                } else {
                    if ((!machine_is_running_) || shutdown_in_progress_) {
                        return;
                    } // if
                    if (!startup_in_progress_) {
                        sIr = stop_indication_request_;
                        machine_instance_.only_for_raudrohi_core_developers.widget_shutdown_sequence();
                        if (stop_indication_request_.set) {
                            machine_instance_.phone.call(sIr.phone_number,
                                sIr.data, sIr.binary_data);
                            stop_indication_request_.set = false;
                        } // if
                    } // if
                } // else
            } catch (err) {
                raudrohi.tmg('17421885-edce-4abc-af59-310261704dd7', err);
            } // catch
        } // update_machine_state

        this.startbutton_pushed = function () {
            try {
                next_state_is_run_ = true;
                update_machine_state();
            } catch (err) {
                raudrohi.tmg('4bd91952-6f7d-473d-b359-310261704dd7', err);
            } // catch
        } // startbutton_pushed

        this.stopbutton_pushed = function () {
            try {
                next_state_is_run_ = false;
                update_machine_state();
            } catch (err) {
                raudrohi.tmg('a29d4a47-b35e-45cc-a159-310261704dd7', err);
            } // catch
        } // stopbutton_pushed

        // One of the applications of this method is to start one
        // machine right after another machine has stopped. The prerequisite
        // for such an application is that the machines can be started up
        // by making a special "phine call" to them.
        this.stopbutton_pushed_with_indication_request =
        function (phone_number_of_an_instance_to_call_when_shutdown_complete,
            data_string_to_send_for_indication,
            binary_data_to_send_for_indication) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        phone_number_of_an_instance_to_call_when_shutdown_complete,
                        'phone_number_of_an_instance_to_call_when_shutdown_complete',
                        '9e997358-b1d5-4e10-8559-310261704dd7');
                    raudrohi.base.assert_isString(
                        data_string_to_send_for_indication,
                        'data_string_to_send_for_indication',
                        'f2ff3ed1-8dde-4ebd-b859-310261704dd7');
                } // if
                stop_indication_request_.phone_number = '' +
                                                        phone_number_of_an_instance_to_call_when_shutdown_complete;
                stop_indication_request_.data =
                data_string_to_send_for_indication;
                stop_indication_request_.binary_data =
                binary_data_to_send_for_indication;
                stop_indication_request_.set = true;
                self_public_.stopbutton_pushed();
            }
            catch (err) {
                raudrohi.tmg('a0204432-4093-4f42-8749-310261704dd7', err);
            } // catch
        } // stopbutton_pushed_with_indication_request

        this.startbutton_pushed_with_indication_request =
        function (phone_number_of_an_instance_to_call_when_startup_complete,
            data_string_to_send_for_indication,
            binary_data_to_send_for_indication) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        phone_number_of_an_instance_to_call_when_startup_complete,
                        'phone_number_of_an_instance_to_call_when_startup_complete',
                        'd76dc159-3338-4fc0-9349-310261704dd7');
                    raudrohi.base.assert_isString(
                        data_string_to_send_for_indication,
                        'data_string_to_send_for_indication',
                        '96364f41-edd3-424b-b149-310261704dd7');
                } // if
                start_indication_request_.phone_number = '' +
                                                         phone_number_of_an_instance_to_call_when_startup_complete;
                start_indication_request_.data =
                data_string_to_send_for_indication;
                start_indication_request_.binary_data =
                binary_data_to_send_for_indication;
                start_indication_request_.set = true;
                self_public_.startbutton_pushed();
            } catch (err) {
                raudrohi.tmg('1d41a672-41e4-481d-8d49-310261704dd7', err);
            } // catch
        } // startbutton_pushed_with_indication_request

        this.hook_startup_started = function () {
            try {
                if ((machine_is_running_) && (!shutdown_in_progress_)) {
                    return true;
                } // if
                if (startup_in_progress_) {
                    return true;
                } // if
                if (shutdown_in_progress_) {
                    next_state_is_run_ = true;
                    return true;
                } // if
                startup_in_progress_ = true;
                return false;
            } catch (err) {
                raudrohi.tmg('aa56dc25-37e4-4496-b449-310261704dd7', err);
            } // catch
        } // hook_startup_started

        this.hook_startup_complete = function () {
            try {
                machine_is_running_ = true;
                startup_in_progress_ = false;
                if (!next_state_is_run_) {
                    machine_instance_.only_for_raudrohi_core_developers.widget_shutdown_sequence();
                } // if
            } catch (err) {
                raudrohi.tmg('0757245c-95b4-434d-9249-310261704dd7', err);
            } // catch
        } // hook_startup_complete

        this.hook_shutdown_started = function () {
            try {
                if ((!machine_is_running_) && (!startup_in_progress_)) {
                    return true;
                } // if
                if (shutdown_in_progress_) {
                    return true;
                } // if
                if (startup_in_progress_) {
                    next_state_is_run_ = false;
                    return true;
                } // if
                shutdown_in_progress_ = true;
                return false;
            }
            catch (err) {
                raudrohi.tmg('c614c216-d397-47f3-b539-310261704dd7', err);
            } // catch
        } // hook_shutdown_started

        this.hook_shutdown_complete = function () {
            try {
                machine_is_running_ = false;
                shutdown_in_progress_ = false;
                if (next_state_is_run_) {
                    machine_instance_.private_code_.widget_startup_sequence();
                } // if
            } catch (err) {
                raudrohi.tmg('bb639946-4676-4693-8239-310261704dd7', err);
            } // catch
        } // hook_shutdown_complete

    } catch (err) {
        raudrohi.tmg('833dc44a-7a17-4613-8139-310261704dd7', err);
    } // catch
} // raudrohi.lang.startup_shutdown_handler

//-------------------------------------------------------------------------
raudrohi.lang.startup_shutdown_machines =
function (array_of_machines, true_if_startup, a_phone_instance) {
    if (raudrohi_settings_debug_JavaScript === true) {
        if (!raudrohi_adapter_isArray(array_of_machines)) {
            raudrohi.tmg('2f1442e5-be3a-42d5-9639-310261704dd7',
                'array_of_machines(==' + array_of_machines +
                ') is not an array and has a value of ' + array_of_machines +
                '.');
        } // if
        if (!raudrohi_adapter_isBoolean(true_if_startup)) {
            raudrohi.tmg('9dba9d20-6a9c-4ab3-8339-310261704dd7',
                'The true_if_startup is not a boolean and ' +
                'has a value of ' + true_if_startup);
        } // if
        if (!raudrohi_adapter_isObject(a_phone_instance)) {
            raudrohi.tmg('d167011d-26c9-4df8-b439-310261704dd7',
                'The a_phone_instance is of some basic type.');
        } // if
    } // if
    try {
        var len = array_of_machines.length;
        var i = 0;
        var elem;
        if (true_if_startup) {
            for (i = 0; i < len; i++) {
                elem = array_of_machines[i];
                a_phone_instance.call(elem.phone.get_phone_number(),
                    'startup|||', '');
            } // for
        } else {
            for (i = 0; i < len; i++) {
                elem = array_of_machines[i];
                a_phone_instance.call(elem.phone.get_phone_number(),
                    'shutdown|||', '');
            } // for
        } // else
    }
    catch (err) {
        raudrohi.tmg('397c8136-9528-4f77-8129-310261704dd7', err);
    } // catch
} // startup_shutdown_machines

//-------------------------------------------------------------------------
raudrohi.lang.deserialize_htOfht_from_ProgFTE = function (a_string) {
    try {
        var htOfht = raudrohi.lang.ProgFTE2ht(a_string);
        var ht_out = raudrohi.base.pool_of_hashtables.get_empty_hashtable();
        var keys = htOfht.keys();
        var len = keys.length;
        var key;
        var ref_2_s_progfte;
        var cache_func_rlP = raudrohi.lang.ProgFTE2ht; // IE optimization
        for (var i = 0; i < len; i++) {
            key = keys[i];
            ref_2_s_progfte = htOfht.get(key);
            ht_out.put(key, cache_func_rlP(ref_2_s_progfte));
        } // for
        raudrohi.base.pool_of_hashtables.return_used_hashtable(htOfht);
        return ht_out;
    } catch (err) {
        raudrohi.tmg('60366553-193d-499d-8429-310261704dd7', err +
                                                             ' a_string==' +
                                                             a_string);
    } // catch
} // raudrohi.lang.deserialize_htOfht_from_ProgFTE

//-------------------------------------------------------------------------
raudrohi.lang.extract_column_from_htOfht =
function (hashtable_of_hashtables, column_name) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isObject(hashtable_of_hashtables,
                'hashtable_of_hashtables',
                'ae232a5d-e504-47ce-8229-310261704dd7');
            raudrohi.base.assert_isString(column_name, 'column_name',
                '5aa84931-5fa7-4087-8429-310261704dd7');
        } // if
        var ar_out = [];
        var keys = hashtable_of_hashtables.keys();
        var len = keys.length;
        var key;
        var ref2ht;
        var i;
        if (raudrohi_settings_debug_JavaScript === true) {
            for (i = 0; i < len; i++) {
                key = keys[i];
                raudrohi.base.assert_isString(key, 'key',
                    'e4a39d2f-d6e9-4323-9329-310261704dd7');
                ref2ht = hashtable_of_hashtables.get(key);
                raudrohi.base.assert_isObject(ref2ht, 'ref2ht',
                    'fd314c3e-bad3-4068-8529-310261704dd7');
                if (!ref2ht.containsKey(column_name)) {
                    raudrohi.tmg('a99b083d-eafd-4580-8119-310261704dd7',
                        'ref2ht does not contain key "' +
                        column_name + '" for htOfht key of "' + key +
                        ' and i==' + i);
                } // if
                ar_out.push(ref2ht.get(column_name));
            } // for
        } else {
            for (i = 0; i < len; i++) {
                key = keys[i];
                ref2ht = hashtable_of_hashtables.get(key);
                ar_out.push(ref2ht.get(column_name));
            } // for
        } // else
        return ar_out;
    } catch (err) {
        raudrohi.tmg('3967cd65-4c25-41f5-b419-310261704dd7', err);
    } // catch
} // raudrohi.lang.deserialize_htOfht_from_ProgFTE


//-------------------------------------------------------------------------
// Returns a string that consist of all of the key-falue pairs concatenated
// to a single string. It's practically the same as ht2ProgFTE,
// but without the structure and without any randomly generated parts within
// the string. There's also an extra requirement that
raudrohi.lang.hashtable_signature = function (a_hashtable) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isObject(a_hashtable, 'a_hashtable',
                '0f196629-ebb3-43c4-8d19-310261704dd7')
        } // if
        var keys = a_hashtable.keys();
        var len = keys.length;
        var key;
        var reference_to_the_value;
        var s = '';
        var i;
        if (raudrohi_settings_debug_JavaScript === true) {
            for (i = 0; i < len; i++) {
                key = keys[i];
                raudrohi.base.assert_isString(key, 'key',
                    'a0569425-00c8-417f-9119-310261704dd7')
                s += ':';
                s += key;
                s += ':';
                reference_to_the_value = a_hashtable.get(key);
                if (!raudrohi_adapter_isString(reference_to_the_value)) {
                    if (!raudrohi_adapter_isBoolean(reference_to_the_value)) {
                        raudrohi.base.assert_isNumber(reference_to_the_value,
                            'reference_to_the_value',
                            '4e2482f1-c85b-4e99-b419-310261704dd7',
                            'key==' + key);
                    } // if
                } // if
                s += reference_to_the_value;
            } // for
        } else {
            for (i = 0; i < len; i++) {
                key = keys[i];
                s += ':';
                s += key;
                s += ':';
                reference_to_the_value = a_hashtable.get(key);
                s += reference_to_the_value;
            } // for
        } // else
        return s;
    } catch (err) {
        raudrohi.tmg('fb83ca4f-63fa-45f8-b419-310261704dd7', err);
    } // catch
} // raudrohi.lang.hashtable_signature


raudrohi.lang.is_a_hexadecimal_digit =
function (hex_digit_candidate_as_a_string) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(hex_digit_candidate_as_a_string,
                'hex_digit_candidate_as_a_string',
                'daba4c3e-191f-44ed-8309-310261704dd7')
        } // if
        if (hex_digit_candidate_as_a_string.length !== 1) {
            return false;
        } // if
        var answer = true;
        var s = hex_digit_candidate_as_a_string.toLowerCase();
        switch (s) {
            case '0':
                break;
            case '1':
                break;
            case '2':
                break;
            case '3':
                break;
            case '4':
                break;
            case '5':
                break;
            case '6':
                break;
            case '7':
                break;
            case '8':
                break;
            case '9':
                break;
            case 'a':
                break;
            case 'b':
                break;
            case 'c':
                break;
            case 'd':
                break;
            case 'e':
                break;
            case 'f':
                break;
            default:
                answer = false;
        } // switch
        return answer;
    } catch (err) {
        raudrohi.tmg('1d10db30-1807-45a7-9209-310261704dd7', err);
    } // catch
} // raudrohi.lang.is_a_hexadecimal_digit

raudrohi.lang.is_a_hexadecimal_number =
function (hex_digit_candidate_as_a_string) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(hex_digit_candidate_as_a_string,
                'hex_digit_candidate_as_a_string',
                '35149a55-837d-410c-9309-310261704dd7')
        } // if
        var answer = true;
        var len = hex_digit_candidate_as_a_string.length
        var i;
        var chr;
        for (i = 0; i < len; i++) {
            chr = hex_digit_candidate_as_a_string.charAt(i);
            if (raudrohi.lang.is_a_hexadecimal_digit(chr) !== true) {
                answer = false;
                break;
            } // if
        } // for
        return answer;
    } catch (err) {
        raudrohi.tmg('495e0225-2b3e-442a-9409-310261704dd7', err);
    } // catch
} // raudrohi.lang.is_a_hexadecimal_number

raudrohi.lang.selftests.is_a_hexadecimal_number = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        if (raudrohi.lang.is_a_hexadecimal_number('ff') !== true) {
            ar_failed_tests.push('ff');
        } // if
        if (raudrohi.lang.is_a_hexadecimal_number('ff00ff') !== true) {
            ar_failed_tests.push('ff00ff');
        } // if
        if (raudrohi.lang.is_a_hexadecimal_number('0000') !== true) {
            ar_failed_tests.push('0000');
        } // if
        if (raudrohi.lang.is_a_hexadecimal_number('1234567890') !== true) {
            ar_failed_tests.push('1234567890');
        } // if
        if (raudrohi.lang.is_a_hexadecimal_number('ABCDEF') !== true) {
            ar_failed_tests.push('ABCDEF');
        } // if
        if (raudrohi.lang.is_a_hexadecimal_number('ABcDeF') !== true) {
            ar_failed_tests.push('ABcDeF');
        } // if
        if (raudrohi.lang.is_a_hexadecimal_number('XX') !== false) {
            ar_failed_tests.push('XX, value==' +
                                 raudrohi.lang.is_a_hexadecimal_number('XX'));
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.is_a_hexadecimal_number');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('5a1efaf4-60e5-4ee1-a809-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.is_a_hexadecimal_number

//-------------------------------------------------------------------------
raudrohi.lang.private_code.is_a_whole_number_x_or_s =
function (i_or_s_whole_number_candidate, b_allow_string_representation) {
    try {
        if (i_or_s_whole_number_candidate === null) {
            // This if-clause exists here to overcome
            // autoconversion sideeffects. For example,
            // Math.abs(null)===0 and 3.14+null===3.14
            return false;
        } // if
        var i_x1 = null;
        var i_x2 = null;
        // According to // http://ecma262-5.com/ELS5_HTML.htm#Section_8.5
        // JavaScript integers are stored in a form of the
        // double's (8B), but some of the JavaScript buit-in functions
        // use autoconversion and work only with the 4B integers.
        if (raudrohi_adapter_isString(i_or_s_whole_number_candidate)) {
            if (b_allow_string_representation === false) {
                return false;
            } // if
        } else {
            // It might be that in stead of the Number type
            // the i_or_s_whole_number_candidate is of an Object type or
            // Null type, etc. The inappropreite types will probably
            // cause an exception to be thrown.
            try {
                i_x1 = Math.abs(i_or_s_whole_number_candidate);
                i_x2 = Math.floor(i_x1);
                if (0 < (i_x1 - i_x2)) {
                    return false;
                } // if
                return true;
            } catch (err) {
                return false;
            } // catch
        } // if
        var s_1 = i_or_s_whole_number_candidate;
        var rgx_space = new RegExp("[\\s\\t]", "g");
        var s_2 = s_1.replace(rgx_space, '');
        if (s_2.length === 0) {
            return false;
        } // if
        var rgx = new RegExp("[^\\d]", "g");
        // s_1 is used in stead of the s_2 because
        // one wants to return false for strings like "1 2"
        var s_3 = s_1.replace(rgx, '');
        if (s_3.length !== s_1.length) {
            return false;
        } // if
        return true;
    } catch (err) {
        raudrohi.tmg('8fe5475d-c47e-44bb-9409-310261704dd7', err);
    } // catch
} // raudrohi.lang.private_code.is_a_whole_number_x_or_s

raudrohi.lang.is_a_whole_number_x_or_s =
function (whole_number_candidate_as_int_or_string) {
    try {
        var b_allow_string_representation = true;
        var b_out = raudrohi.lang.private_code.is_a_whole_number_x_or_s(
            whole_number_candidate_as_int_or_string,
            b_allow_string_representation);
        return b_out;
    } catch (err) {
        raudrohi.tmg('13cdf452-4d03-47d0-abf8-310261704dd7', err);
    } // catch
} // raudrohi.lang.is_a_whole_number_x_or_s


raudrohi.lang.is_a_whole_number =
function (whole_number_candidate_as_int_or_string) {
    try {
        var b_allow_string_representation = false;
        var b_out = raudrohi.lang.private_code.is_a_whole_number_x_or_s(
            whole_number_candidate_as_int_or_string,
            b_allow_string_representation);
        return b_out;
    } catch (err) {
        raudrohi.tmg('be5b9022-cbe7-4248-b1f8-310261704dd7', err);
    } // catch
} // raudrohi.lang.is_a_whole_number

raudrohi.lang.assert_is_a_whole_number =
function (a_variable, a_variable_name, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    if (!raudrohi.lang.is_a_whole_number(a_variable)) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            a_variable_name + '(==' + a_variable + ') is not ' +
            'a whole number of class Number. ' + s_optional_errmsg_suffix);
    } // if
} // raudrohi.lang.assert_is_a_whole_number

//-------------------------------------------------------------------------
// HTML colors are expected to be in the form of #xxxxxx, where x={0...9,A..F}
raudrohi.lang.is_an_HTML_color = function (color_candidate_as_a_string) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(color_candidate_as_a_string,
                'color_candidate_as_a_string',
                'd5329e54-9cad-449f-a2f8-310261704dd7')
        } // if
        if (color_candidate_as_a_string.length !== 7) {
            return false;
        } // if
        if (color_candidate_as_a_string.charAt(0) !== '#') {
            return false;
        } // if
        var hex_number_candidate_as_a_string = color_candidate_as_a_string.substr(
            1, 6);
        var answer = true;
        var i;
        var chr;
        for (i = 0; i < 6; i++) {
            chr = hex_number_candidate_as_a_string.charAt(i);
            if (raudrohi.lang.is_a_hexadecimal_digit(chr) !== true) {
                answer = false;
                break;
            } // if
        } // for
        return answer;
    }
    catch (err) {
        raudrohi.tmg('5426fc4c-5f35-4e6b-a3f8-310261704dd7', err);
    } // catch
} // raudrohi.lang.is_an_HTML_color

raudrohi.lang.assert_is_an_HTML_color =
function (a_variable, a_variable_name, Globally_Unique_Identifier_as_string,
    s_optional_errmsg_suffix) {
    s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                               'undefined' ? s_optional_errmsg_suffix : '';
    if (!raudrohi_adapter_isString(a_variable)) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            a_variable_name + '(==' + a_variable + ') is not a string. ' +
            s_optional_errmsg_suffix);
    } // if
    if (!raudrohi.lang.is_an_HTML_color(a_variable)) {
        raudrohi.tmg(Globally_Unique_Identifier_as_string,
            a_variable_name + '(==' + a_variable + ') does not ' +
            'qualify to be an HTML color.  ' + s_optional_errmsg_suffix);
    } // if
} // raudrohi.lang.assert_is_an_HTML_color

//-------------------------------------------------------------------------
raudrohi.lang.number2str =
function (a_number, a_string_that_marks_the_floating_point) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isNumber(a_number, 'a_number',
                '974edd3d-bf1f-4d78-a1f8-310261704dd7');
            raudrohi.base.assert_isString(
                a_string_that_marks_the_floating_point,
                'a_string_that_marks_the_floating_point',
                '82dd5b1a-c410-4721-b5f8-310261704dd7')
            if (a_string_that_marks_the_floating_point === '') {
                raudrohi.tmg('7f4e8320-ae62-46f0-81e8-310261704dd7',
                    'The floating point separator is not allowed ' +
                    'to be an empty string.');
            } // if
        } // if
        var s = raudrohi.base.gsub(a_string_that_marks_the_floating_point,
            '.', '' + a_number);
        return s;
    } catch (err) {
        raudrohi.tmg('93a3d2c8-e780-4f5f-b4e8-310261704dd7', err);
    } // catch
} // number2str


raudrohi.lang.selftests.number2str = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        var s = raudrohi.lang.number2str(44.72, 'Z');
        if (s !== '44Z72') {
            ar_failed_tests.push('44Z72, s==' + s);
        } // if
        s = raudrohi.lang.number2str(99, ',');
        if (s !== '99') {
            ar_failed_tests.push('99, s==' + s);
        } // if
        s = raudrohi.lang.number2str(33.7, ',');
        if (s !== '33,7') {
            ar_failed_tests.push('33,7 , s==' + s);
        } // if
        s = raudrohi.lang.number2str(55.61, '.');
        if (s !== '55.61') {
            ar_failed_tests.push('55.61 , s==' + s);
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.number2str');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('49645418-035f-4ab0-92e8-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.number2str
//-------------------------------------------------------------------------

// Needles are [CODEGENERATION_BLANK_0], [CODEGENERATION_BLANK_1], etc.
// The needle suffixes 0], 1], etc., depict
// ar_needle_replacement_values indices.
raudrohi.lang.fill_form = function (ar_needle_replacement_values, s_form) {
    try {
        // RENESSAATOR_BLOCK_START
// RENESSAATOR_BLOCK_ID=block_7dab1510-3323-43cd-5df2-0149f5b1e752_city
// RENESSAATOR_SOURCE_LANGUAGE=Ruby
// RENESSAATOR_SOURCE_START
// RAUDROHI_HOME=ENV['RAUDROHI_HOME']
// require(RAUDROHI_HOME+"/src/dev_tools/code_generation/raudrohi_cg0.rb")
// require(RAUDROHI_CODE_GENERATION+"/raudrohi_cg1.rb")
// puts Raudrohi_cg_debug_verification.new(
// ['Array','ar_needle_replacement_values'],['String','s_form']).to_s
// RENESSAATOR_SOURCE_END
//
// RENESSAATOR_AUTOGENERATED_TEXT_START
    if(raudrohi_settings_debug_JavaScript===true){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_debug_verification 
            raudrohi.base.assert_isArray(ar_needle_replacement_values,'ar_needle_replacement_values',
                'a2b73a40-0f9a-4ec4-b1ad-403371705dd7');
raudrohi.base.assert_isString(s_form,'s_form',
                'b6ac9b95-5d7a-4257-b1bd-403371705dd7');

    } // if

// RENESSAATOR_AUTOGENERATED_TEXT_END
// RENESSAATOR_BLOCK_END
        var s_out = '' + s_form;
        var len = ar_needle_replacement_values.length;
        var i = 0;
        var s = null;
        var s_needle = null;
        var s_needle_prefix = '[CODEGENERATION_BLANK_';
        var s_substitution = null;
        for (i = 0; i < len; i++) {
            s_needle = s_needle_prefix + i + ']';
            s_substitution = ar_needle_replacement_values[i];
            s = raudrohi.base.gsub(s_substitution, s_needle, s_out);
            s_out = s
        } // for
        return s_out;
    } catch (err) {
        raudrohi.tmg('3e7137c1-ab8e-45a4-84d8-310261704dd7', err);
    } // catch
} // raudrohi.lang.fill_form


raudrohi.lang.selftests.fill_form = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        var s_form = "X[CODEGENERATION_BLANK_0]Y" +
                     "[CODEGENERATION_BLANK_1]\nZ[CODEGENERATION_BLANK_2]WW";
        var ar = ['AA', 'BB']
        var s_expected = "XAAY" +
                         "BB\nZ[CODEGENERATION_BLANK_2]WW";
        var s_filled = raudrohi.lang.fill_form(ar, s_form);
        if (s_filled !== s_expected) {
            ar_failed_tests.push('test 1, s_filled=="' + s_filled + '"');
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.fill_form');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('62490117-0056-4992-93d8-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.fill_form

//-------------------------------------------------------------------------
raudrohi.lang.queueCache = function (i_max_size) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isNumber(i_max_size, 'i_max_size',
                '553e2052-9757-478c-95d8-310261704dd7');
        } // if
        var ht_cache_ = new Hashtable();
        var queue_ = new raudrohi.lang.htQueue();
        var i_max_size_ = i_max_size;
        var i_dismissal_size_ = Math.floor((i_max_size * 1.0) / 20.0);
        if (i_dismissal_size_ < 1) {
            i_dismissal_size_ = 1;
        } // if


        this.containsKey = ht_cache_.containsKey;

        this.put = function (s_key, x) {
            try {
                var b = ht_cache_.containsKey(s_key);
                ht_cache_.put(s_key, x);
                if (b === true) {
                    return;
                } // if
                queue_.push(x);
                var i_size = queue_.length();
                if (i_max_size_ < i_size) {
                    if ((i_size + 1) < i_dismissal_size_) {
                        return;
                    } // if
                    // TODO: There's a bug in the Hashtable class, which
                    // is that the remove(<a key>) does not work.
                    //raudrohi.adapter.log("i_dismissal_size_=="+i_dismissal_size_);
                    //raudrohi.adapter.log("i_size=="+i_size);
                    try {
                        var s;
                        var i = 0;
                        for (i = 0; i < i_dismissal_size_; i++) {
                            s = queue_.pop();
                            ht_cache_.remove(s);
                            //raudrohi.adapter.log("s=="+s);
                        } // for
                    } catch (err) {
                        raudrohi.tmg('d668b15a-8327-4fe9-94d8-310261704dd7',
                            err);
                    } // catch
                } // if
            } catch (err) {
                raudrohi.tmg('a9450d4c-3e4d-4779-b3d8-310261704dd7', err);
            } // catch
        } // put

        this.get = ht_cache_.get;


        this.clear = function () {
            try {
                ht_cache_.clear();
                queue_.clear();
            } catch (err) {
                raudrohi.tmg('5ad12719-1bdd-405a-a5c8-310261704dd7', err);
            } // catch
        } // containsKey


    } catch (err) {
        raudrohi.tmg('cbf31f53-1041-404c-a3c8-310261704dd7', err);
    } // catch
} // raudrohi.lang.queueCache

raudrohi.lang.selftests.queueCache = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        var ob_cache = new raudrohi.lang.queueCache(10);
        var len = 20;
        var i = 0;
        var s_key = null;
        for (i = 0; i < len; i++) {
            s_key = "" + i;
            ob_cache.put(s_key, i);
        } // for
        if (ob_cache.containsKey("1") === true) {
            ar_failed_tests.push('test 1 ');
        } // if
        if (ob_cache.containsKey("3") === true) {
            ar_failed_tests.push('test 2 ');
        } // if
        if (ob_cache.containsKey("19") === false) {
            ar_failed_tests.push('test 3 ');
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.queueCache');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('1dbf9945-9a64-44d2-9578-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.queueCache


//-------------------------------------------------------------------------

// This one is expensive.
raudrohi.lang.private_code.str2regexstr_do_it = function (s_needle) {
    try {
        // From raudrohi.base....:
        //      ar_in.push("|");
        //		ar_in_rgx.push(new RegExp("[|]","g"));
        //		s_middle=s_prefix+"sinGLEPilLAR_14867";
        //		ar_middle.push(s_middle);
        //		ar_middle_rgx.push(new RegExp(s_middle,"g"));
        //		ar_out.push("[|]");

        var ar_in = raudrohi.base.private_code.replace_all_globalvars.ar_in;
        var ar_in_rgx = raudrohi.base.private_code.replace_all_globalvars.ar_in_rgx;
        var ar_middle = raudrohi.base.private_code.replace_all_globalvars.ar_middle;
        var ar_middle_rgx = raudrohi.base.private_code.replace_all_globalvars.ar_middle_rgx;
        var ar_out = raudrohi.base.private_code.replace_all_globalvars.ar_out;
        var len = ar_in.length;
        var i = 0;
        var rgx_in = null;
        var rgx_middle = null;
        var s_middle = null;
        var s_arout = null;
        var s1 = s_needle;
        var s2 = null;
        for (i = 0; i < len; i++) {
            rgx_in = ar_in_rgx[i];
            s_middle = ar_middle[i];
            s2 = s1.replace(rgx_in, s_middle);
            s1 = s2;
        } // for
        for (i = 0; i < len; i++) {
            rgx_middle = ar_middle_rgx[i];
            s_arout = ar_out[i];
            s2 = s1.replace(rgx_middle, s_arout);
            s1 = s2;
        } // for
        var s_out = s1;
        return s_out;
    } catch (err) {
        raudrohi.tmg('62a0b158-fc69-47ee-8468-310261704dd7', err);
    } // catch
} // raudrohi.base.private_code.str2regexstr_do_it

// TODO: refactor it to use the queueCache.
raudrohi.lang.private_code.str2regexstr_ht_cache = new Hashtable();
// The queue is for throwing the oldest cached items out of the
// cache first. By putting a limit on the cache size, one avoids
// a memory leak.
raudrohi.lang.private_code.str2regexstr_ht_cache_queue =
new raudrohi.lang.htQueue();

raudrohi.lang.str2regexstr = function (s_needle) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(s_needle, 's_needle',
                '84d58c36-56e9-410f-a168-310261704dd7');
        } // if
        var ht_cache = raudrohi.lang.private_code.str2regexstr_ht_cache;
        var s_out = null;
        if (ht_cache.containsKey(s_needle) === true) {
            s_out = ht_cache.get(s_needle);
            return "" + s_out;
        } // if
        s_out = raudrohi.lang.private_code.str2regexstr_do_it(s_needle);
        var queue = raudrohi.lang.private_code.str2regexstr_ht_cache_queue;
        var s = null;
        if (400 <= queue.length()) {
            var len = 20;
            var i = 0;
            for (i = 0; i < len; i++) {
                s = queue.pop();
                ht_cache.remove(s);
            } // for
        } // if
        queue.push(s_needle);
        ht_cache.put(s_needle, s_out);
        return "" + s_out;
    } catch (err) {
        raudrohi.tmg('fc82be3e-8f26-4723-8368-310261704dd7', err);
    } // catch
} // raudrohi.lang.str2regexstr

raudrohi.lang.selftests.str2regexstr = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        var s = null;
        var s_needle = null;
        var s_expected = null;
        s_needle = "|$";
        s_expected = "[|][$]";
        s = raudrohi.lang.str2regexstr('-^ff');
        s = raudrohi.lang.str2regexstr('(FF]');
        s = raudrohi.lang.str2regexstr('^44');
        s = raudrohi.lang.str2regexstr(s_needle);
        if (s !== s_expected) {
            ar_failed_tests.push('test 1, s=="' + s + '"');
        } // if
        s_needle = "([";
        s_expected = "[(][\\[]";
        s = raudrohi.lang.str2regexstr(s_needle);
        if (s !== s_expected) {
            ar_failed_tests.push('test 2, s=="' + s + '"');
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.str2regexstr');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('2b1ecaa3-5b41-4d71-a568-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.str2regexstr

//-------------------------------------------------------------------------
// Returns a string, where all of the ar elements have
// been surrounded by the s_left and s_right and separated
// from eachother by the s_separator. An example:
// ["A","B"]  -> "XAY,XBY"
// if the s_separator==",", s_left=="X", s_right=="Y".
raudrohi.lang.ar2xseparated_list = function (ar, s_separator, s_left, s_right) {
    try {
        s_left = typeof(s_left) !== 'undefined' ? s_left : "";
        s_right = typeof(s_right) !== 'undefined' ? s_right : "";
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isArray(ar, 'ar',
                '2e12991e-016a-4f60-9358-310261704dd7');
            raudrohi.base.assert_isString(s_separator, 's_separator',
                '6358295b-885f-417a-9458-310261704dd7');
            raudrohi.base.assert_isString(s_left, 's_left',
                'e342ee7e-c360-4526-a158-310261704dd7');
            raudrohi.base.assert_isString(s_right, 's_right',
                'a34d1950-8af7-43f0-a558-310261704dd7');
        } // if
        var s_out = "";
        var b_is_nonfirst = false;
        var len = ar.length;
        var i = 0;
        var elem = null;
        for (i = 0; i < len; i++) {
            elem = ar[i];
            if (b_is_nonfirst === true) {
                s_out = s_out + s_separator;
            } // if
            s_out = s_out + s_left + elem + s_right;
            b_is_nonfirst = true;
        } // for
        return s_out;
    } catch (err) {
        raudrohi.tmg('ef99a83f-9b03-46a1-9158-310261704dd7', err);
    } // catch
} // raudrohi.lang.ar2xseparated_list

raudrohi.lang.selftests.ar2xseparated_list = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        var s = raudrohi.lang.ar2xseparated_list(["A", "B"], ":", "X", "Y");
        var s_expected = "XAY:XBY";
        if (s !== s_expected) {
            ar_failed_tests.push('test 1, s=="' + s + '"');
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.ar2xseparated_list');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('9926373e-c30e-4ab1-b348-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.ar2xseparated_list


//-------------------------------------------------------------------------

window.raudrohi.lang.private_code.word_wrap_fake_but_fast_ht_rgx =
new Hashtable();
var x = new Array((new RegExp("^[\\s]+", "g")), (new RegExp("[\\s]+", "g")),
    (new RegExp("[\\s]+$", "g")));
// TODO: There's some sort of a bug that the FireFox JavaScript
// parser goes crazy, if a totally correct instantiation of the queueCache is used.
// Hence the dull and weird cache size limitation mechanism in the funcs.
window.raudrohi.lang.private_code.word_wrap_fake_but_fast_ht_rgx.put(" ", x);

// Returns an array of words that does not contain emptystrings or separators.
window.raudrohi.lang.private_code.word_wrap_fake_but_fast_get_ar_rgx =
function (s_separator) {
    try {
        var ar_rgx = null;
        var ht_rgx = window.raudrohi.lang.private_code.word_wrap_fake_but_fast_ht_rgx;
        if (ht_rgx.containsKey(s_separator) === true) {
            ar_rgx = ht_rgx.get(s_separator);
            return ar_rgx;
        } // if
        var s_rgx = raudrohi.lang.str2regexstr(s_separator);
        var rgx_start = new RegExp("^(" + s_rgx + ")+", "g");
        var rgx_middle = new RegExp("(" + s_rgx + ")+", "g");
        var rgx_end = new RegExp("(" + s_rgx + ")+$", "g");
        ar_rgx = [rgx_start, rgx_middle, rgx_end];
        if (ht_rgx.size() < 20) {
            ht_rgx.put(s_separator, ar_rgx);
        } // if
        return ar_rgx;
    } catch (err) {
        raudrohi.tmg('208d754c-b163-4719-b248-310261704dd7', err);
    } // catch
} // window.raudrohi.lang.private_code.word_wrap_fake_but_fast_get_ar_rgx

window.raudrohi.lang.private_code.word_wrap_fake_but_fast =
function (s_text, i_max_line_width, s_linebreak, s_separator) {
    try {
        var s_emptystring = "";
        var ar_rgx = window.raudrohi.lang.private_code.word_wrap_fake_but_fast_get_ar_rgx(s_separator);
        var rgx_start = ar_rgx[0];
        var rgx_middle = ar_rgx[1];
        var rgx_end = ar_rgx[2];
        var s_in = "" + s_text;
        // The result of the use of the regexes is that the
        // array will not contain any empty strings, which
        // saves one from manually comparing all elements
        // of the array with an ampty-string, and copying
        // all the rest of the elements, which are words,
        // to a new array.
        var s1 = s_in.replace(rgx_start, s_emptystring);
        var s2 = s1.replace(rgx_end, s_emptystring);
        s1 = s2.replace(rgx_middle, s_separator);
        var ar_words = s1.split(s_separator);

        var s_out = "";
        var i_lenarwords = ar_words.length;
        if (i_lenarwords === 0) {
            return s_out;
        } // if
        if (i_lenarwords === 1) {
            s_out = ar_words[0];
            return s_out;
        } // if

        var ar_lines = [];
        var i_word_ix = 1;
        var s_word = null;
        var i_s_wordlen = null;
        var s_line = ar_words[0];
        var i_line_wordcount = 1;
        var i_assembled_line_width = s_line.length;
        var i_separatorlen = s_separator.length
        var i_afterconcat = null;
        while (i_word_ix < i_lenarwords) {
            s_word = ar_words[i_word_ix];
            i_s_wordlen = s_word.length;
            if (i_max_line_width <= i_s_wordlen) {
                if (0 < i_line_wordcount) {
                    ar_lines.push(s_line);
                    s_line = "";
                    i_line_wordcount = 0;
                    i_assembled_line_width = 0;
                }  // if
                ar_lines.push(s_word);
            } else {
                i_afterconcat =
                i_assembled_line_width + i_separatorlen + i_s_wordlen;
                if (i_max_line_width < i_afterconcat) {
                    ar_lines.push(s_line);
                    s_line = s_word;
                    i_line_wordcount = 1;
                    i_assembled_line_width = i_s_wordlen;
                } else {
                    s_line = s_line + s_separator + s_word;
                    i_assembled_line_width = i_afterconcat;
                    i_line_wordcount++;
                } // else
            } // else
            i_word_ix++;
        } // while
        if (0 < i_line_wordcount) {
            ar_lines.push(s_line);
        } // if
        s_out = raudrohi.lang.ar2xseparated_list(ar_lines, s_linebreak);
        return s_out;
    } catch (err) {
        raudrohi.tmg('40c65345-086d-4c2b-8348-310261704dd7', err);
    } // catch
} // window.raudrohi.lang.private_code.word_wrap_fake_but_fast

window.raudrohi.lang.private_code.word_wrap_correct_but_slow =
function (s_text, i_max_line_width, s_linebreak, s_separator) {
    try {
        throw "This still has to be implemented.";
    } catch (err) {
        raudrohi.tmg('d1c4dd3d-4243-454d-9348-310261704dd7', err);
    } // catch
} // window.raudrohi.lang.private_code.word_wrap_correct_but_slow


raudrohi.lang.word_wrap =
function (s_text, i_max_line_width, s_linebreak, s_separator,
    b_use_fake_but_fast) {
    try {
        b_use_fake_but_fast = typeof(b_use_fake_but_fast) !==
                              'undefined' ? b_use_fake_but_fast : true;
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(s_text, 's_text',
                '9868d93d-cb59-4527-a248-310261704dd7');
            raudrohi.base.assert_isNumber(i_max_line_width, 'i_max_line_width',
                '29530a79-7a4b-4310-b238-310261704dd7');
            raudrohi.base.assert_isString(s_linebreak, 's_linebreak',
                '651b142d-8d3a-47b6-9438-310261704dd7');
            raudrohi.base.assert_isString(s_separator, 's_separator',
                'ac3c7240-60b2-4c61-9138-310261704dd7');
            raudrohi.base.assert_isBoolean(b_use_fake_but_fast,
                'b_use_fake_but_fast',
                '2431dee1-1462-4088-a538-310261704dd7');
            if (s_separator.length === 0) {
                throw "s_separator.length==" + s_separator.length
            } // if
            if (s_linebreak.length === 0) {
                throw "s_linebreak.length==" + s_linebreak.length
            } // if
            if (i_max_line_width < 1) {
                throw "i_max_line_width==" + i_max_line_width + " < 1 "
            } // if
        } // if
        var s_out = "";
        if (b_use_fake_but_fast === true) {
            s_out =
            window.raudrohi.lang.private_code.word_wrap_fake_but_fast(s_text,
                i_max_line_width, s_linebreak, s_separator);
        } else {
            s_out =
            window.raudrohi.lang.private_code.word_wrap_correct_but_slow(s_text,
                i_max_line_width, s_linebreak, s_separator);
        } // else
        return s_out;
    } catch (err) {
        raudrohi.tmg('082fa026-940a-435d-9338-310261704dd7', err);
    } // catch
} // raudrohi.lang.word_wrap

raudrohi.lang.selftests.word_wrap = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        var s_hay = '';
        var s_expected = '';
        var s_wrapped = '';
        s_hay = "A B C";
        s_expected = "AXBXC";
        s_wrapped = raudrohi.lang.word_wrap(s_hay, 1, "X", " ", true);
        if (s_wrapped !== s_expected) {
            ar_failed_tests.push('test 1, s_wrapped=="' + s_wrapped + '"');
        } // if
        s_hay = "A B C";
        s_expected = "A\nB\nC";
        s_wrapped = raudrohi.lang.word_wrap(s_hay, 2, "\n", " ", true);
        if (s_wrapped !== s_expected) {
            ar_failed_tests.push('test 2, s_wrapped=="' + s_wrapped + '"');
        } // if
        s_hay = "AA B CC";
        s_expected = "AAXBXCC";
        s_wrapped = raudrohi.lang.word_wrap(s_hay, 2, "X", " ", true);
        if (s_wrapped !== s_expected) {
            ar_failed_tests.push('test 3, s_wrapped=="' + s_wrapped + '"');
        } // if
        s_hay = "AAA B CC";
        s_expected = "AAAXBXCC";
        s_wrapped = raudrohi.lang.word_wrap(s_hay, 2, "X", " ", true);
        if (s_wrapped !== s_expected) {
            ar_failed_tests.push('test 4, s_wrapped=="' + s_wrapped + '"');
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.word_wrap');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('135e02d7-67d4-49e3-b528-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.word_wrap

//-------------------------------------------------------------------------
raudrohi.lang.private_code.normalize_linebreaks_rgx_CR_LF =
new RegExp("[\\r][\\n]", "g");
raudrohi.lang.private_code.normalize_linebreaks_rgx_CR =
new RegExp("[\\r]", "g");
raudrohi.lang.private_code.normalize_linebreaks_rgx_LF =
new RegExp("[\\n]", "g");
// Returns a string.
raudrohi.lang.normalize_linebreaks =
function (s_haystack, s_resultant_linebreak) {
    try {
        s_resultant_linebreak = typeof(s_resultant_linebreak) !==
                                'undefined' ? s_resultant_linebreak : "\n";
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(s_haystack, 's_haystack',
                '458b9925-32c8-4e1a-a328-310261704dd7');
            raudrohi.base.assert_isString(s_resultant_linebreak,
                's_resultant_linebreak',
                '45c5ad41-204f-4717-a628-310261704dd7');
        } // if
        var rgx_cr_lf = raudrohi.lang.private_code.normalize_linebreaks_rgx_CR_LF;
        var rgx_cr = raudrohi.lang.private_code.normalize_linebreaks_rgx_CR;
        var rgx_lf = raudrohi.lang.private_code.normalize_linebreaks_rgx_LF;
        var s_lf = "\n";
        var s1 = s_haystack.replace(rgx_cr_lf, s_lf);
        var s2 = s1.replace(rgx_cr, s_lf);
        s1 = s2.replace(rgx_lf, s_resultant_linebreak);
        return s1;
    } catch (err) {
        raudrohi.tmg('19e57c21-e82e-426d-8128-310261704dd7', err);
    } // catch
} // raudrohi.lang.normalize_linebreaks

raudrohi.lang.selftests.normalize_linebreaks = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        var s_hay = "AA\nBB\rCC\r\nDD"
        var s_normalized = raudrohi.lang.normalize_linebreaks(s_hay, "x");
        var s_expected = "AAxBBxCCxDD";
        if (s_normalized !== s_expected) {
            ar_failed_tests.push('test 1, s_normalized=="' + s_normalized +
                                 '"');
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.normalize_linebreaks');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('284bb665-c64c-4b0f-8728-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.normalize_linebreaks


//-------------------------------------------------------------------------
raudrohi.lang.private_code.word_wrap_with_normalization_t1_rgx_S_T =
new RegExp("[\\s\\t]", "g");
raudrohi.lang.word_wrap_with_normalization_t1 =
function (s_text, i_max_line_width, s_linebreak) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(s_text, 's_text',
                'f5c5e34b-00a6-4030-9318-310261704dd7');
            raudrohi.base.assert_isNumber(i_max_line_width, 'i_max_line_width',
                '422035a1-a449-4c99-be18-310261704dd7');
            raudrohi.base.assert_isString(s_linebreak, 's_linebreak',
                '9252f755-045c-4d60-a218-310261704dd7');
            if (s_linebreak.length === 0) {
                throw "s_linebreak.length==" + s_linebreak.length
            } // if
            if (i_max_line_width < 1) {
                throw "i_max_line_width==" + i_max_line_width + " < 1 "
            } // if
        } // if
        var rgx_s_t = raudrohi.lang.private_code.word_wrap_with_normalization_t1_rgx_S_T;
        // The "\n" at the next line is not a mistake.
        var s_normalized = raudrohi.lang.normalize_linebreaks(s_text, "\n");
        var s_space = " ";
        var s1 = s_normalized.replace(rgx_s_t, s_space);
        var s_wrapped = raudrohi.lang.word_wrap(s1, i_max_line_width,
            s_linebreak, s_space, true);
        return s_wrapped;
    } catch (err) {
        raudrohi.tmg('5ee1cd52-d0b6-47fe-a318-310261704dd7', err);
    } // catch
} // raudrohi.lang.word_wrap_with_normalization_t1

raudrohi.lang.selftests.word_wrap_with_normalization_t1 = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        var s_hay = "AA   BB\n CC\r\n D E  "
        var s_wrapped = raudrohi.lang.word_wrap_with_normalization_t1(s_hay,
            3, "x");
        var s_expected = "AAxBBxCCxD E";
        if (s_wrapped !== s_expected) {
            ar_failed_tests.push('test 1, s_wrapped=="' + s_wrapped + '"');
        } // if
        s_hay = "AABB CC"
        s_wrapped = raudrohi.lang.word_wrap_with_normalization_t1(s_hay,
            2, "<br/>");
        s_expected = "AABB<br/>CC";
        if (s_wrapped !== s_expected) {
            ar_failed_tests.push('test 2, s_wrapped=="' + s_wrapped + '"');
        } // if
        s_hay = "AA BB CC"
        s_wrapped = raudrohi.lang.word_wrap_with_normalization_t1(s_hay,
            6, "<br/>");
        s_expected = "AA BB<br/>CC";
        if (s_wrapped !== s_expected) {
            ar_failed_tests.push('test 3, s_wrapped=="' + s_wrapped + '"');
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.word_wrap_with_normalization_t1');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('f3af0321-bc7a-4ab3-9418-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.word_wrap_with_normalization_t1

//-------------------------------------------------------------------------
raudrohi.lang.get_from_ht_by_array_of_keys_index = function (i_index, ht) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isNumber(i_index, 'i_index',
                'af24165f-fb8e-4473-b308-310261704dd7');
            raudrohi.base.assert_isObject(ht, 'ht',
                '45c44235-d7c1-461d-a208-310261704dd7');
            if (i_index < 0) {
                raudrohi.tmg('21e4c95f-20f6-40bf-9308-310261704dd7',
                    "i_index==" + i_index + " < 0");
            } // if
        } // if
        var keys = ht.keys();
        var max_index = keys.length - 1;
        if (max_index < i_index) {
            raudrohi.tmg('6f0b962e-24a5-4d12-9308-310261704dd7',
                "There are " + keys.length + " elements in the " +
                "array of hashtable keys, but i_index==" + i_index + " .");
        } // if
        var key = keys[i_index];
        var reference_to_the_value = ht.get(key);
        return    reference_to_the_value;
    } catch (err) {
        raudrohi.tmg('9ebf61ea-35df-4027-ac08-310261704dd7', err);
    } // catch
} // raudrohi.lang.get_from_ht_by_array_of_keys_index

raudrohi.lang.selftests.get_from_ht_by_array_of_keys_index = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        var ht_test = new Hashtable();
        var s_expected = 'Value of AA';
        ht_test.put('AA', s_expected);
        var s = raudrohi.lang.get_from_ht_by_array_of_keys_index(0, ht_test);
        if (s !== s_expected) {
            ar_failed_tests.push('test 1, s=="' + s + '"');
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.get_from_ht_by_array_of_keys_index');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('6445c153-f423-4882-b1f7-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.get_from_ht_by_array_of_keys_index

//-------------------------------------------------------------------------
raudrohi.lang.cg_table_t1 = function (s_lines_HTML_code, ar_class_names) {
    try {
        var s;
        var i = 0;
        var len = null;
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(s_lines_HTML_code,
                's_lines_HTML_code',
                '947dbf35-23b8-4067-a5f7-310261704dd7');
            raudrohi.base.assert_isArray(ar_class_names, 'ar_class_names',
                '2164ec4f-d34c-484d-a4f7-310261704dd7');
            len = ar_class_names.length;
            for (i = 0; i < len; i++) {
                s = ar_class_names[i];
                raudrohi.base.assert_isString(s, 's',
                    '721eb237-23d4-444e-a1f7-310261704dd7');
            } // for
        } // if
        var s_classes = "";
        len = ar_class_names.length;
        for (i = 0; i < len; i++) {
            s = ar_class_names[i];
            s_classes = " " + s;
        } // for
        var s_out = "\n" +
                    "<table class=\"" + s_classes + "\">\n" +
                    "<tbody>\n" +
                    "" +
                    s_lines_HTML_code +
                    "\n" +
                    "</tbody>\n" +
                    "</table>\n";
        return s_out;
    } catch (err) {
        raudrohi.tmg('fec81346-814f-4229-95e7-310261704dd7', err);
    } // catch
} // raudrohi.lang.cg_table_t1

raudrohi.lang.selftests.cg_table_t1 = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        // Just to execute it.
        var s = raudrohi.lang.cg_table_t1("", ["a_class_name"]);
        if (s === (s + "none")) {
            // just to get rid of IDE warnings
            raudrohi.tmg('15e7c94f-acf4-4936-92e7-310261704dd7',
                "this can not be happening");
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.cg_table_t1');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('5fb696d7-3b1b-49be-a2e7-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.cg_table_t1


//-------------------------------------------------------------------------
raudrohi.lang.s_dec2hex = function (i_int) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isNumber(i_int, 'i_int',
                '3e9d1eaf-2e48-45e8-b1e7-310261704dd7');
        } // if
        // Credits for the singleliner go to
        // http://javascript.about.com/library/blh2d.htm
        // access date: September 2011
        var s_out = i_int.toString(16).toLowerCase();
        return s_out;
    } catch (err) {
        raudrohi.tmg('4b1cc074-6928-4e97-a3e7-310261704dd7', err);
    } // catch
} // raudrohi.lang.s_dec2hex

raudrohi.lang.selftests.s_dec2hex = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        var s = null;
        s = raudrohi.lang.s_dec2hex(15);
        if (s !== 'f') {
            ar_failed_tests.push('test 1, s=="' + s + '"');
        } // if
        s = raudrohi.lang.s_dec2hex(0);
        if (s !== '0') {
            ar_failed_tests.push('test 2, s=="' + s + '"');
        } // if
        s = raudrohi.lang.s_dec2hex(17);
        if (s !== '11') {
            ar_failed_tests.push('test 3, s=="' + s + '"');
        } // if
        s = raudrohi.lang.s_dec2hex(-18);
        if (s !== '-12') {
            ar_failed_tests.push('test 4, s=="' + s + '"');
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.s_dec2hex');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('1bafcac4-1fdf-414c-93d7-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.s_dec2hex

raudrohi.lang.i_hex2dec = function (s_integer_in_base_16_format) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(s_integer_in_base_16_format,
                's_integer_in_base_16_format',
                '9f98cb84-d927-40fa-84d7-310261704dd7');
        } // if
        // Credits for the singleliner go to
        // http://javascript.about.com/library/blh2d.htm
        // access date: September 2011
        var i_out = parseInt(s_integer_in_base_16_format.toLowerCase(), 16);
        return i_out;
    } catch (err) {
        raudrohi.tmg('4f7ac803-a031-4cec-83d7-310261704dd7', err);
    } // catch
} // raudrohi.lang.i_hex2dec

raudrohi.lang.selftests.i_hex2dec = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        var i = null;
        i = raudrohi.lang.i_hex2dec('a');
        if (i !== 10) {
            ar_failed_tests.push('test 1, i=="' + i + '"');
        } // if
        i = raudrohi.lang.i_hex2dec('11');
        if (i !== 17) {
            ar_failed_tests.push('test 2, i=="' + i + '"');
        } // if
        i = raudrohi.lang.i_hex2dec('a0');
        if (i !== 160) {
            ar_failed_tests.push('test 3, i=="' + i + '"');
        } // if
        i = raudrohi.lang.i_hex2dec('-f3');
        if (i !== (-15 * 16 - 3)) {
            ar_failed_tests.push('test 4, i=="' + i + '"');
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.i_hex2dec');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('4e79639e-dc1f-4e99-84d7-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.i_hex2dec

//-------------------------------------------------------------------------
// This function here is mostly in a role of a 
// set of "functional notes". In practice there are 
// less things to look up during the reading of code 
// if the single-liner is used in stead of this function.
//
// The extra computational expense  of using
// this function is probably not that favourable either, if
// compared to the direct use of the singleliner.
raudrohi.lang.i_number_of_digits = function (i_int, i_base) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            // The number of digits does not make that
            // much sense, if the number is the same
            // for 10000, 0.123, 10,11, 101,1
            raudrohi.lang.assert_is_a_whole_number(i_int, 'i_int',
                '05ea4627-8c47-4069-85c7-310261704dd7');
            raudrohi.lang.assert_is_a_whole_number(i_base, 'i_base',
                '4d93738b-f4b4-4a97-91c7-310261704dd7');
        } // if
        // Credits for the singleliner go to
        // http://javascript.about.com/library/blh2d.htm
        // access date: September 2011
        var i_out = Math.abs(i_int).toString(i_base).length;
        return i_out;
    } catch (err) {
        raudrohi.tmg('ea4d064e-72e5-47a5-92c7-310261704dd7', err);
    } // catch
} // raudrohi.lang.i_number_of_digits

raudrohi.lang.selftests.i_number_of_digits = function () {
    try {
        var ht = new Hashtable();
        ht.put('test_passed', 't');
        var ar_failed_tests = [];
        //---tests-start------------------
        var i = null;
        i = raudrohi.lang.i_number_of_digits(15, 10);
        if (i !== 2) {
            ar_failed_tests.push('test 1, i==' + i);
        } // if
        i = raudrohi.lang.i_number_of_digits(15, 16);
        if (i !== 1) {
            ar_failed_tests.push('test 2, i==' + i);
        } // if
        i = raudrohi.lang.i_number_of_digits(17, 16);
        if (i !== 2) {
            ar_failed_tests.push('test 3, i==' + i);
        } // if
        i = raudrohi.lang.i_number_of_digits(-18, 10); // the minus sign
        if (i !== 2) {
            ar_failed_tests.push('test 4, i==' + i);
        } // if
        //---tests-end--------------------
        var x_FireFox_bug_workaround = ar_failed_tests.length;
        if (0 < x_FireFox_bug_workaround) {
            ht.put('test_passed', 'f');
            ht.put('code_region_name',
                'raudrohi.lang.selftests.i_number_of_digits');
            ht.put('ar_failed_tests', ar_failed_tests);
        } // if
        return ht;
    } catch (err) {
        raudrohi.tmg('d78f8d56-7307-4484-a4c7-310261704dd7', err);
    } // catch
} // raudrohi.lang.selftests.i_number_of_digits

//-------------------------------------------------------------------------
// Retunrs an array that has the fd_min at index 0 and
// the fd_max at its greatest index.
// It's OK for the fd_min==fd_max, but then the array
// will always contain only a single element, which is
// the fd_min, bacause the elements of the array
// will always differ from one another.
//
// A requirement: 0<=i_maximum_number_of_intermittant_numbers
//
// if b_use_integer_mode==true, then the fd_min and 
// the fd_max are required to be whole numbers and 
// all of the elements of the output array are integers.
raudrohi.lang.ar_interpolate =
function (fd_min, fd_max, i_maximum_number_of_intermittant_numbers,
    b_use_integer_mode) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isNumber(fd_min, 'fd_min',
                '2b58ca72-ef6b-4a45-b7c7-310261704dd7');
            raudrohi.base.assert_isNumber(fd_max, 'fd_max',
                '620a7f1f-e886-4a55-b4b7-310261704dd7');
            raudrohi.base.assert_isBoolean(
                b_use_integer_mode, 'b_use_integer_mode',
                '0d7a582d-f356-4057-84b7-310261704dd7');
        } // if
        if (fd_max < fd_min) {
            raudrohi.tmg('4d140065-5896-43bf-a2b7-310261704dd7',
                'fd_max == ' + fd_max + ' < fd_min == ' + fd_min);
        } // if
        raudrohi.lang.assert_is_a_whole_number(
            i_maximum_number_of_intermittant_numbers,
            'i_maximum_number_of_intermittant_numbers',
            'c680251e-aad1-4541-b357-310261704dd7');
        if (i_maximum_number_of_intermittant_numbers < 0) {
            raudrohi.tmg('720fef39-4d22-4ea5-a357-310261704dd7',
                'i_maximum_number_of_intermittant_numbers == ' +
                i_maximum_number_of_intermittant_numbers + ' < 0 ');
        } // if
        var ar_out = [];
        ar_out.push(fd_min);
        if (fd_min === fd_max) {
            return ar_out;
        } // if
        var i = 0;
        var elem;
        var fd_location = null;
        var fd_delta = null;
        var ar_tmp = [];
        var i_len = 42;
        if (b_use_integer_mode === true) {
            raudrohi.lang.assert_is_a_whole_number(fd_min, 'fd_min',
                '38813881-c84a-4317-9257-310261704dd7');
            raudrohi.lang.assert_is_a_whole_number(fd_max, 'fd_max',
                '7d96c141-00f8-43dd-9547-310261704dd7');
            // fd_min==1, 2, 3, 4, 5==fd_max
            var i_length = fd_max - fd_min + 1; // like number of pixels
            if (i_length <= (i_maximum_number_of_intermittant_numbers + 2)) {
                // fd_min is aready in the ar_out
                for (i = (fd_min + 1); i <= fd_max; i++) {
                    ar_out.push(i);
                } // for
                return ar_out;
            } // if
            // think of a situation, were
            // i_maximum_number_of_intermittant_numbers==2,
            // fd_min==1, 2, 3, 4, 5==fd_max
            var i_n_of_subparts = i_maximum_number_of_intermittant_numbers + 1;
            fd_delta = i_length / i_n_of_subparts;
            // The trickery is due to a fact that not all subparts
            // are equal in length and one does not want the last
            // subpart length to "considerably" differ from the
            // lengths of the other subparts.

            // Further comments are in the branch, where
            // b_use_integer_mode==false
            fd_location = fd_min;
            ar_tmp.push(fd_location);
            i = 0;
            for (i = 0; i < i_maximum_number_of_intermittant_numbers; i++) {
                fd_location = fd_location + fd_delta;
                ar_tmp.push(Math.floor(fd_location));
            } // for
            ar_tmp.push(fd_max);
            i_len = ar_tmp.length;
            fd_1 = ar_tmp[0]; // ==fd_min
            for (i = 1; i < i_len; i++) {
                elem = ar_tmp[i];
                if (fd_1 !== elem) {
                    ar_out.push(elem);
                    fd_1 = elem;
                } // if
            } // for
        } else { // b_use_integer_mode!==true
            var fd_1 = 42.1;
            // fd_min==0...1...2...3==fd_max
            // If arbitrary precision real numbers are used
            // and fd_min!=fd_max, then
            // it's always possible to divide the range [fd_min,fd_max]
            // to arbitrary number of subranges. In the case of
            // limited number of bits, like in the case of the
            // floats and doubles, there are rounding related
            // issues in a form of x+delta_x==x
            var fd_len = fd_max - fd_min;
            var i_n_of_subranges = i_maximum_number_of_intermittant_numbers + 1;
            fd_delta = fd_len / i_n_of_subranges;

            fd_location = fd_min;
            // It's like with the tree-building algorithm.
            // Once the root node is in place, one just adds
            // components that consist of an edge and a node that
            // is connected to one side of the edge.
            ar_tmp.push(fd_location); // the "root node" analoque
            i = 0;
            // The i_maximum_number_of_intermittant_numbers is not a
            // mistake, because ... comments after the loop.
            for (i = 0; i < i_maximum_number_of_intermittant_numbers; i++) {
                fd_location = fd_location + fd_delta;
                ar_tmp.push(fd_location); // the new-edge-new-node component
            } // for
            // To counterbalance various rounding effects, the
            // fd_max is used in stead of the fd_location+fd_delta
            // for the last subrange endpoint, i.e. "node".
            ar_tmp.push(fd_max);
            // ar_out loop is partly for the x+delta_x==x counterbalancing.
            i_len = ar_tmp.length;
            fd_1 = ar_tmp[0]; // hence the i=1 in stead of i=0 in the for-clause
            for (i = 1; i < i_len; i++) {
                elem = ar_tmp[i];
                if (fd_1 !== elem) {
                    ar_out.push(elem);
                    fd_1 = elem;
                } // if
            } // for
            // There's no problems even, if the number of iterations ==0.
        } // else
        if (raudrohi_settings_debug_JavaScript === true) {
            i = ar_out.length;
            if ((i_maximum_number_of_intermittant_numbers + 2) < i) {
                raudrohi.tmg('25309bb2-5bac-4c74-bd47-310261704dd7',
                    '(i_maximum_number_of_intermittant_numbers+2)==' +
                    (i_maximum_number_of_intermittant_numbers + 2) +
                    ' < ar_out.length==' + i);
            } // if
        } // if
        return ar_out;
    } catch (err) {
        raudrohi.tmg('2d6a1afe-1d3b-4ab1-b147-310261704dd7', err);
    } // catch
} // raudrohi.lang.ar_interpolate

//-------------------------------------------------------------------------
raudrohi.lang.assert_hashtable_contains_key =
function (a_variable, a_variable_name, s_key,
    Globally_Unique_Identifier_as_string, s_optional_errmsg_suffix) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(s_key, 's_key',
                'ceb4c21a-38ed-4038-a437-310261704dd7');
        } // if
        s_optional_errmsg_suffix = typeof(s_optional_errmsg_suffix) !==
                                   'undefined' ? s_optional_errmsg_suffix : '';
        if (!raudrohi.base.isObject(a_variable)) {
            raudrohi.tmg(Globally_Unique_Identifier_as_string,
                a_variable_name + '(==' + a_variable +
                ') is not a hashtable. ' +
                s_optional_errmsg_suffix);
        } // if
        if (!a_variable_name.containsKey(s_key)) {
            raudrohi.tmg(Globally_Unique_Identifier_as_string,
                'A hashtable candidate ' + a_variable_name +
                ' does not contain a key named "' + s_key + '".');
        } // if
    } catch (err) {
        raudrohi.tmg('0e9f7432-cbc5-43dd-b537-310261704dd7', err);
    } // catch
} // raudrohi.lang.assert_hashtable_contains_key

//-------------------------------------------------------------------------
// In JavaScript the array assignment is by reference.
// For example:
// var ar1=["Hello","World"];
// var ar2=ar1;  ar2.pop();
// if(ar1.length==1){
//     document.write(' The World dissapeared from ar1.');
//     } // if
//
// The raudrohi.lang.ar_clone_array makes a copy of the ar_in.
raudrohi.lang.ar_clone_array = function (ar_in) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isArray(ar_in, 'ar_in',
                '4893f921-aefa-4b5a-8337-310261704dd7');
        } // if
        var ar_out = [];
        var i_len = ar_in.length;
        var i = 0;
        var elem;
        for (i = 0; i < i_len; i++) {
            elem = ar_in[i];
            ar_out.push(elem);
        } // for
        return ar_out;
    } catch (err) {
        raudrohi.tmg('301537c4-1b65-4ef0-9d27-310261704dd7', err);
    } // catch
} // raudrohi.lang.ar_clone_array

//-------------------------------------------------------------------------
raudrohi.lang.comparison.goe.number = function (a, b) {
    try {
        var b_out = false;
        if (a <= b) {
            b_out = true;
        } // if
        return b_out;
    } catch (err) {
        raudrohi.tmg('e1e27e2a-75a0-4947-8227-310261704dd7', err);
    } // catch
} // raudrohi.lang.comparison.goe.funcs.number

//-------------------------------------------------------------------------
// One of the valid values for the func_comparison is
// raudrohi.lang.comparison.goe.funcs.number
//
// Another example of the func_comparison:
// func_comparison=function(a,b){return (a<=b);}
raudrohi.lang.comparison.equals = function (a, b, func_comparison) {
    try {
        var b_a_equals_b = (func_comparison(a, b) && func_comparison(b, a));
        return b_a_equals_b;
    } catch (err) {
        raudrohi.tmg('3e287dd2-11d7-48ef-8227-310261704dd7', err);
    } // catch
} // raudrohi.lang.comparison.equals

//-------------------------------------------------------------------------
// The raudrohi.lang.sort differs from the classical sort function
// by a fact that it facilitates the recursive sorting of 
// tables, where first all rows are sorted by the first column, 
// then, those rows that have equal values within their  
// first column, are sorted amongst themselves according to the
// second column, etc.
//
// If one were to sort only according to the first 3 columns,
// starting from 1. column, then sorting according to the 2. column 
// and then sorting according to the 3. column, then 
// the content of the ar_or_func_comparison is:
// ar_or_func_comparison[0]===<comparison function for the 3. column>
// ar_or_func_comparison[1]===<comparison function for the 2. column>
// ar_or_func_comparison[2]===<comparison function for the 1. column>
//
// The comparizon functions, func(a,b), are expected to return only
// boolean values and the returned value must be "false", unless the a<=b.
// For short: comparison_function=function(a,b){return (a<=b);}
//
// s_mode inSet {'ascending','descending'}
//
// If the b_sort_in_place==true, the ar_data is modified.
raudrohi.lang.sort =
function (ar_data, ar_or_func_comparison, s_mode, b_sort_in_place) {
    try {
        b_sort_in_place =
        typeof(b_sort_in_place) !== 'undefined' ? b_sort_in_place : true;
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isArray(ar_data, 'ar_data',
                '4027f158-fc96-4069-b317-310261704dd7');
            raudrohi.base.assert_isString(s_mode, 's_mode',
                '87411d57-41b9-4438-8317-310261704dd7');
            raudrohi.base.assert_isBoolean(b_sort_in_place, 'b_sort_in_place',
                '4f236f34-53a0-40cc-9417-310261704dd7');
        } // if
        var ar_data_out = null;
        if (b_sort_in_place) {
            ar_data_out = ar_data;
        } else {
            ar_data_out = raudrohi.lang.ar_clone_array(ar_data);
        } // else
        if (ar_data_out.length < 2) {
            return ar_data_out; // there's nothing to sort
        } // if
        var ar_funcs = null;
        var s = null;
        if (raudrohi_adapter_isArray(ar_or_func_comparison)) {
            ar_funcs = ar_or_func_comparison;
        } else {
            if (raudrohi_adapter_isFunction(ar_or_func_comparison)) {
                ar_funcs = [ar_or_func_comparison];
            } else {
                s = '' + typeof(ar_comparizon_functions);
                raudrohi.tmg('a29eab53-5f7a-4dd2-a707-310261704dd7',
                    'typeof(ar_comparizon_functions) == ' + s +
                    'but it is allowed to be an array or a function.');
            } // else
        } // else
        if (ar_funcs.length === 0) {
            return ar_data_out;
        } // if
        var b_ascending = false;
        switch (s_mode) {
            case 'ascending':
                b_ascending = true;
                break;
            case 'descending':
                break;
            default:
                if (raudrohi_settings_debug_JavaScript) {
                    throw raudrohi.tmg(
                        'c417232c-763d-4eba-b507-310261704dd7',
                        'There\'s no branching for s_mode(==' +
                        s_mode + ').');
                } // if
        } // switch
        var ar_funcs_minus_one = raudrohi.lang.ar_clone_array(ar_funcs);
        var func_comparison = ar_funcs_minus_one.pop();
        ar_data_out.sort(func_comparison);
        // By default the
        // ar.sort(function(a,b){return (a<=b);})
        // sorts in a descending order.
        if (b_ascending) {
            ar_data_out.reverse();
        } // if
        if (ar_funcs_minus_one.length === 0) {
            return ar_data_out;
        } // if
        // TODO: Optimize it in terms of the reuse of
        // the comparison functions arrays and may be,
        // if possible, also in terms of in-place sorting.
        var i = null;
        var ar_data_out_2 = [];
        var func_equals = raudrohi.lang.comparison.equals; // function lookup optimization
        var func_sort = raudrohi.lang.sort;
        var i_len = ar_data_out.length;
        var elem_0 = ar_data_out[0];
        var ar_subpart = [];
        ar_subpart.push(elem_0);
        var elem = null;
        // a b b b c c d e f f
        for (i = 1; i < i_len; i++) { // i==1 due to elem_0 preassignment
            elem = ar_data_out[i];
            if (func_equals(elem_0, elem, func_comparison) === false) {
                if (1 < ar_subpart.length) { // just for speed
                    ar_subpart = func_sort(ar_subpart, ar_funcs_minus_one,
                        s_mode, true);
                } // if
                ar_data_out_2 = ar_data_out_2.concat(ar_subpart);
                ar_subpart = [];
            } // if
            ar_subpart.push(elem);
            elem_0 = elem;
        } // for
        if (1 < ar_subpart.length) { // just for speed
            ar_subpart = func_sort(ar_subpart, ar_funcs_minus_one,
                s_mode, true);
        } // if
        ar_data_out_2 = ar_data_out_2.concat(ar_subpart);
        return ar_data_out_2;
    } catch (err) {
        raudrohi.tmg('e5c66a2c-b9c0-4f3a-b307-310261704dd7', err);
    } // catch
} // raudrohi.lang.sort

//-------------------------------------------------------------------------
raudrohi.lang.private_code.ar_scale_number_of_frames_ix_short2long =
function (i_ar_in_len, i_number_of_frames_in_the_output_series) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            if (i_number_of_frames_in_the_output_series <= i_ar_in_len) {
                raudrohi.tmg('5b37c412-5e56-4f73-92f6-310261704dd7',
                    'i_number_of_frames_in_the_output_series == ' +
                    i_number_of_frames_in_the_output_series + ' <= ' +
                    'i_ar_in_len == ' + i_ar_in_len);
            } // if
            if (i_ar_in_len < 2) {
                raudrohi.tmg('37243059-2062-43e3-a4f6-310261704dd7',
                    'i_ar_in_len == ' + i_ar_in_len + ' < 2');
            } // if
            if (i_number_of_frames_in_the_output_series < 2) {
                raudrohi.tmg('84d6795c-e202-4c8c-b3f6-310261704dd7',
                    'i_number_of_frames_in_the_output_series == ' +
                    i_number_of_frames_in_the_output_series + ' < 2');
            } // if
        } // if
        var ar_ix = [];
        var i = null;
        var i_ix = null;
        for (i = 0; i < i_number_of_frames_in_the_output_series; i++) {
            ar_ix.push(-1); // no valid index has the value of (-1)
        } // for
        ar_ix[0] = 0;
        ar_ix[i_number_of_frames_in_the_output_series - 1] = i_ar_in_len - 1;
        // X o o o X
        // X o o X
        var i_n_of_frames_left_2_distribute = i_ar_in_len - 2;
        if (0 < i_n_of_frames_left_2_distribute) {
            var i_n_of_deltas = i_n_of_frames_left_2_distribute + 1;
            var fd_delta = (i_number_of_frames_in_the_output_series - 2) /
                           i_n_of_deltas;
            var fd_location = 1; // ar_ix[0] is already set
            for (i = 0; i < i_n_of_frames_left_2_distribute; i++) {
                i_ix = Math.floor(fd_location + fd_delta);
                ar_ix[i_ix] = i + 1; // == ar_input_frame_series index
            } // for
        } // if
        return ar_ix;
    } catch (err) {
        raudrohi.tmg('dd1f7e47-f08a-4421-83e6-310261704dd7', err);
    } // catch
} //raudrohi.lang.private_code.ar_scale_number_of_frames

// One of the valid values for the func_comparison is
// raudrohi.lang.comparison.goe.funcs.number
//
// Another example of the func_comparison:
// func_comparison=function(a,b){return (a<=b);}
//
// This function makes a copy of the ar_input_frame_series
// and then multiplies or removes frames from 
// the copy. If the ar_input_frame_series contained movie frames,
// then this function could be used for creating
// slow motion clips and fast motion clips
raudrohi.lang.ar_scale_number_of_frames =
function (ar_input_frame_series, i_number_of_frames_in_the_output_series) {
    try {
        var i = null;
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isArray(ar_input_frame_series,
                'ar_input_frame_series',
                '2237853e-e3e8-43e2-85e6-310261704dd7');
            raudrohi.lang.assert_is_a_whole_number(
                i_number_of_frames_in_the_output_series,
                'i_number_of_frames_in_the_output_series',
                '51e82ef3-eb36-4d65-85e6-310261704dd7');
        } // if
        var i_ar_in_len = ar_input_frame_series.length;
        if (i_ar_in_len < 1) {
            raudrohi.tmg('33c0c763-d2fa-4cb4-91d6-310261704dd7',
                'ar_frames_series.length == ' + i_ar_in_len + ' < 1');
        } // if
        if (i_number_of_frames_in_the_output_series < 1) {
            raudrohi.tmg('a4b95904-c195-416a-bad6-310261704dd7',
                'i_number_of_frames_in_the_output_series==' +
                i_number_of_frames_in_the_output_series + ' < 1');
        } // if
        var ar_output_series = null;
        if (i_ar_in_len === i_number_of_frames_in_the_output_series) {
            ar_output_series =
            raudrohi.lang.ar_clone_array(ar_input_frame_series);
            return ar_output_series;
        } // if
        ar_output_series = [];
        var x_frame = null;
        if (i_ar_in_len === 1) {
            x_frame = ar_input_frame_series[0];
            for (i = 0; i < i_number_of_frames_in_the_output_series; i++) {
                ar_output_series.push(x_frame);
            } // for
            return ar_output_series;
        } // if
        // On this line the 1<i_ar_in_len
        if (i_number_of_frames_in_the_output_series === 1) {
            x_frame = ar_input_frame_series[0];
            ar_output_series.push(x_frame);
            return ar_output_series;
        } // if
        // On this line the 1<i_number_of_frames_in_the_output_series
        var ar_ix = null; // indexes of the ar_input_frame_series
        var i_ix = null;
        if (i_ar_in_len < i_number_of_frames_in_the_output_series) {
            ar_ix =
            raudrohi.lang.private_code.ar_scale_number_of_frames_ix_short2long(
                i_ar_in_len, i_number_of_frames_in_the_output_series);
            x_frame = ar_input_frame_series[0];
            for (i = 0; i < i_number_of_frames_in_the_output_series; i++) {
                i_ix = ar_ix[i];
                if ((-1) < i_ix) {
                    x_frame = ar_input_frame_series[i_ix];
                } // if
                ar_output_series.push(x_frame);
            } // for
        } else { // i_number_of_frames_in_the_output_series<i_ar_in_len
            // "Shringing" the input array of frames is an
            // inverse of expanding the input array.
            var ar_ix_short2long = raudrohi.lang.private_code.ar_scale_number_of_frames_ix_short2long(
                i_number_of_frames_in_the_output_series, i_ar_in_len);
            for (i = 0; i < i_ar_in_len; i++) {
                // If this were an expansion, then the
                // (-1) would indicate a copy of a frame.
                if (ar_ix_short2long[i] !== (-1)) {
                    x_frame = ar_input_frame_series[i];
                    ar_output_series.push(x_frame);
                } // if
            } // for
        } // else
        return ar_output_series;
    } catch (err) {
        raudrohi.tmg('3d9cc4c9-2de5-45c9-95d6-310261704dd7', err);
    } // catch
} // raudrohi.lang.ar_scale_number_of_frames

//-------------------------------------------------------------------------
// Converts an integer to base i_base and writes the value
// to a string that has exactly i_maximum_number_of_digits.
// The string length is adjusted by adding leading zeros.
//
// It's useful for assembling HTML color strings from
// arrays like [15,7,0] (==="#ff0700")
//
// This function throws, if the toString(i_base)
// produces a string that is longer than the
// i_maximum_number_of_digits.
raudrohi.lang.s_num2s_with_leading_zero_normalization =
function (i_or_fd_in, i_base, i_number_of_characters) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isNumber(i_or_fd_in, 'i_or_fd_in',
                'ca350d3d-f97d-4b6d-95c6-310261704dd7');
            raudrohi.lang.assert_is_a_whole_number(i_base, 'i_base',
                'a3c53145-56c7-4016-94c6-310261704dd7');
            raudrohi.lang.assert_is_a_whole_number(
                i_number_of_characters, 'i_number_of_characters',
                '398d863f-f1e2-4cab-b1c6-310261704dd7');
            if (i_base < 2) {
                raudrohi.tmg('ad102057-0896-481e-a2c6-310261704dd7',
                    'i_base == ' + i_base + ' < 2');
            } // if
            if (i_number_of_characters < 1) {
                raudrohi.tmg('7495502f-8a3e-433d-b1b6-310261704dd7',
                    'i_maximum_number_of_digits== ' +
                    i_number_of_characters + ' < 2');
            } // if
        } // if
        var s_converted = i_or_fd_in.toString(i_base).toLowerCase();
        var i_len = s_converted.length;
        if (i_number_of_characters < i_len) {
            // The point of a floating point number is also a character.
            raudrohi.tmg('7d335e1b-766d-4ae7-b5b6-310261704dd7',
                'i_number_of_characters==' + i_number_of_characters +
                ' < i_or_fd_in.toString(i_base).length==' + i_len);
        } // if
        var i_number_of_leading_zeros_to_add = i_number_of_characters - i_len;
        var i = null;
        var s_lc_zero = '0';
        var s_zeros = '';
        for (i = 0; i < i_number_of_leading_zeros_to_add; i++) {
            s_zeros = s_zeros + s_lc_zero;
        } // for
        var s_out = s_zeros + s_converted;
        return s_out;
    } catch (err) {
        raudrohi.tmg('49bece11-b820-4ae1-83b6-310261704dd7', err);
    } // catch
} //raudrohi.lang.s_num2s_with_leading_zero_normalization


//-------------------------------------------------------------------------
// If the b_will_be_wrapped_in_JavaScript_source_by_singlequotes==false,
// then the quotation marks that will be used for wrapping the 
// output of this method are expected to be double quotes.
//
// This function is useful for assembling JavaScript source that
// is intended to be fed into the eval(...).
raudrohi.lang.s_escape_for_eval =
function (s_in, b_will_be_wrapped_in_JavaScript_source_by_singlequotes) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(s_in, 's_in',
                '7e1c7935-ba74-4964-99a6-310261704dd7');
            raudrohi.base.assert_isBoolean(
                b_will_be_wrapped_in_JavaScript_source_by_singlequotes,
                'b_will_be_wrapped_in_JavaScript_source_by_singlequotes',
                'f765c85f-5ebe-456a-85a6-310261704dd7');
        } // if
        // ---verbatim--start----
        // var s_0='ab"c\'\\d/\\n$\n@';
        // var s_1="ab\"c'\\d/\\n$\n@";
        // var s_2=s_0+'HH'+s_1;
        // document.write('<pre>'+s_2+'</pre>');
        // ---verbatim--end------
        //
        // The output:
        // ---verbatim--start----
        // ab"c'\d/\n$
        // @HHab"c'\d/\n$
        // @
        // ---verbatim--end------
        //
        var s_lc_g = 'g';
        var rgx_backslash = new RegExp('[\\\\]', s_lc_g);
        var s_1 = '' + s_in;
        var s_2 = s_1.replace(rgx_backslash, '\\\\');
        var rgx_q = null;
        if (b_will_be_wrapped_in_JavaScript_source_by_singlequotes) {
            rgx_q = new RegExp("[']", s_lc_g);
            s_1 = "\\'";
        } else {
            rgx_q = new RegExp('["]', s_lc_g);
            s_1 = '\\"';
        } // else
        var s_out = s_2.replace(rgx_q, s_1);
        return s_out;
    } catch (err) {
        raudrohi.tmg('23752e3f-a9df-45c3-a5a6-310261704dd7', err);
    } // catch
} //raudrohi.lang.s_escape_for_eval

//-------------------------------------------------------------------------

// is intended to be fed into the eval(...).
// 
// The credits for the code in this function go to:
// http://www.ejeliot.com/blog/109
// and
// http://ntt.cc/2008/02/10/4-ways-to-dynamically-load-external-javascriptwith-source.html
// 
raudrohi.lang.load_javascript_from_site_server_t1 =
function (s_URL, func_to_execute_if_loading_complete) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(s_URL, 's_URL',
                '199d52e1-7816-4ddd-b1a6-310261704dd7');
            raudrohi.base.assert_isFunction(
                func_to_execute_if_loading_complete,
                'func_to_execute_if_loading_complete',
                '907aa657-b973-4f3d-9496-310261704dd7');
        } // if
        var ob_domelem_head = document.getElementsByTagName('head')[0];
        var ob_domelem_script = document.createElement('script');
        ob_domelem_script.type = 'text/javascript';
        ob_domelem_script.src = s_URL;
        ob_domelem_script.onload = func_to_execute_if_loading_complete;
        ob_domelem_head.appendChild(ob_domelem_script);
    } catch (err) {
        raudrohi.tmg('16b3713d-ffb6-4997-a596-310261704dd7', err);
    } // catch
} //raudrohi.lang.load_javascript_from_site_server_t1

//-------------------------------------------------------------------------

// ar_opmem[0]===ixs_low
// ar_opmem[1]===1 if the string could not be found.
// ar_opmem[1]===0 if the is available, i.e. "no errors".
//
// Speedhack requires that the ar_opmem consists of
// only a single type of elements, preferably of a basic type.
// the idea is that then a JavaScript VM can map it to a plain array.
raudrohi.lang.s_extract_substring_t1 =
function (s_terminatorstring, s_haystack, ar_opmem) {
    try {
        var s_out = null;
        var ixs_low = null;
        var i_len_s_terminatorstring = null;
        var i_len_s_haystack = null;
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(s_terminatorstring,
                's_terminatorstring',
                'b5dd101a-c394-4d1a-b396-310261704dd7');
            raudrohi.base.assert_isString(s_haystack, 's_haystack',
                '5d4e5147-6028-414e-a486-310261704dd7');
            raudrohi.base.assert_isArray(ar_opmem, 'ar_opmem',
                'f5a9e635-2b5c-4e77-8186-310261704dd7');

            var i_len_ar_opmem = ar_opmem.length
            raudrohi.base.assert_isWithinDomain(
                i_len_ar_opmem, 'ar_opmem.length',
                '3c337c22-d589-487b-8786-310261704dd7', [1, 2]);
            ixs_low = ar_opmem[0];
            raudrohi.base.assert_isNumber(ixs_low, 'ixs_low',
                'df687cbf-c209-434f-8586-310261704dd7');
            if (i_len_ar_opmem === 2) {
                raudrohi.base.assert_isNumber(ar_opmem[1], 'ar_opmem[1]',
                    '3b499281-f2ef-4e99-8976-310261704dd7');
            } // if
        } // if
        i_len_s_terminatorstring = s_terminatorstring.length;
        raudrohi.base.assert_X1_isSmallerThanOrEqualTo_X2(1, '1',
            '512a6233-5cee-42ff-b376-310261704dd7',
            i_len_s_terminatorstring, 's_terminatorstring.length');
        ixs_low = ar_opmem[0];
        raudrohi.base.assert_X1_isSmallerThanOrEqualTo_X2(0, '0',
            '56bfe550-7dab-4f11-9476-310261704dd7',
            ixs_low, 'ar_opmem[0]');

        i_len_s_haystack = s_haystack.length;
        raudrohi.base.assert_X1_isSmallerThanOrEqualTo_X2(ixs_low,
            'ar_opmem[0]', '81ac3645-1868-49f7-a376-310261704dd7',
            i_len_s_haystack, 's_haystack.length');
        if (i_len_s_haystack === 0) {
            ar_opmem[1] = 0;
            s_out = "";
            return s_out;
        } // if
        var ixs_low_max = i_len_s_haystack - i_len_s_terminatorstring;
        ar_opmem[1] = 1;
        return s_out;
    } catch (err) {
        raudrohi.tmg('a6c4cb37-c479-4a27-9566-310261704dd7', err);
    } // catch
} // raudrohi.lang.s_extract_substring_t1

//=========================================================================
//=========================================================================
//
// http://longterm.softf1.com/specifications/progfte/
//
//=========================================================================

//-------------------------------------------------------------------------

raudrohi.lang.ProgFTE_v0 = function () {
    var self_public_ = this;
    try {
        self_public_.private_code_ = {};
        var prc_ = self_public_.private_code_;

        // http://longterm.softf1.com/specifications/progfte/
        prc_.ht2ProgFTE_v0_impl = function (a_hashtable,
            string_to_substitute_the_triplepillars_within_the_ht_keys_and_values) {
            try {
                var tpss = string_to_substitute_the_triplepillars_within_the_ht_keys_and_values;
                var keys = a_hashtable.keys();
                var s_key;
                var reference_to_the_value;
                var s_lc_3p = '|||';
                var s_lc_s = '';
                var ar_s = [];
                var s_0 = s_lc_s + keys.length + s_lc_3p + (tpss + s_lc_3p);
                ar_s.push(s_0);
                var len = keys.length;
                // There's the problem that if the JavaScript side has
                // a very heavy load, different threads will collide at
                // global variables. In this case, probably the problem
                // is that the raudrohi.base.gsub has thread
                // collisions. That's why there's this "newer" version
                // that creates a separate RegExp instace for every call.

                var rgx = new RegExp("[|]", "g"); 
                for (var i = 0; i < len; i++) {
                    s_key = keys[i];
                    // The ''+ on the next line is for converting numbers to strings.
                    reference_to_the_value = s_lc_s + a_hashtable.get(s_key);
                    s_0 = s_key.replace(rgx, tpss);
                    ar_s.push(s_0);
                    ar_s.push(s_lc_3p);
                    s_0 = reference_to_the_value.replace(rgx, tpss);
                    ar_s.push(s_0);
                    ar_s.push(s_lc_3p);
                } // for
                var answer = raudrohi.base.s_concat_array_of_strings(ar_s);
                return answer;
            } catch (err) {
                raudrohi.tmg('5049f605-22b2-4a78-9504-220260904dd7', err);
            } // catch
        } // prc_.ht2ProgFTE_v0_impl

//-------------------------------------------------------------------------

// Implements the ProgFTE format in a way that it is safe to serialize
// one hashtable, store the serialization result into anohter hashtable
// and then to serialize the latter hashtable.
        self_public_.ht2ProgFTE = function (ht_in) {
            try {
                var keys = ht_in.keys();
                var key;
                var len = keys.length;
                var ar_s = [];
                var s_0 = null;
                for (var i = 0; i < len; i++) {
                    key = keys[i];
                    s_0 = ht_in.get(key);
                    ar_s.push(key);
                    ar_s.push(s_0);
                } // for
                var s_all = raudrohi.base.s_concat_array_of_strings(ar_s);
                var s_trplsbsts = raudrohi.lang.generate_nonexisting_needle(s_all);
                var s_progte = prc_.ht2ProgFTE_v0_impl(ht_in,
                    s_trplsbsts);
                return s_progte;
            } catch (err) {
                raudrohi.tmg('09ef5a34-3c12-47bf-8404-220260904dd7', err);
            } // catch
        } // self_public_.ht2ProgFTE

//-------------------------------------------------------------------------
        self_public_.ProgFTE2ht = function (s_progfte) {
            try {
                var ar1 = raudrohi.base.snatchNtimes(s_progfte, '|||', 2);
                var ht_length = parseInt(ar1[0], 10);
                var ht = raudrohi.base.pool_of_hashtables.get_empty_hashtable();
                if (ht_length < 1) {
                    return ht;
                } // if
                var tpss = ar1[1];
                var ar2 = raudrohi.base.snatchNtimes(s_progfte,
                    '|||', (2 + ht_length * 2));
                var i1 = 1;
                var i2;
                var s_key;
                var value;
                // Comment is at the ht2Progfre code
                //var rgx=new RegExp("[|]","g"); // TODO: pool the rgx instances
                var cache_func_rbr = raudrohi.base.gsub; // IE optimization
                while (i1 <= ht_length) {
                    i2 = i1 * 2;
                    s_key = cache_func_rbr('|', tpss, ar2[i2]);
                    value = cache_func_rbr('|', tpss, (ar2[i2 + 1]));
                    ht.put(s_key, value);
                    i1++;
                } // while
                return ht;
            } catch (err) {
                raudrohi.tmg('6109dd49-d7f9-4b54-b304-220260904dd7',
                    err + "\n\n" +
                    ' s_progfte==' + s_progfte);
            } // catch
        } // self_public_.ProgFTE2ht

    } catch (err) {
        raudrohi.tmg('375c0631-37ca-4e6a-b404-220260904dd7', err);
    } // catch
} // raudrohi.lang.ProgFTE_v0

raudrohi.lang.ProgFTE_v0 = new raudrohi.lang.ProgFTE_v0()

//-------------------------------------------------------------------------

// http://longterm.softf1.com/specifications/progfte/
raudrohi.lang.ProgFTE_v1 = function () {
    var self_public_ = this;
    try {
        self_public_.private_code_ = {};
        var prc_ = self_public_.private_code_;

        var lc_singlepillar_ = '|';
        var lc_emptystring_ = '';

        prc_.create_stringrecord_t1 = function (ar_s, s_in) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_in, 's_in',
                        '54bffa2a-bcbc-42e3-a104-220260904dd7');
                } // if
                ar_s.push(lc_emptystring_ + s_in.length);
                ar_s.push(lc_singlepillar_);
                ar_s.push(s_in);
                ar_s.push(lc_singlepillar_);
            } catch (err) {
                raudrohi.tmg('d115058d-c357-4a82-82f3-220260904dd7', err);
            } // catch
        } // prc_.create_stringrecord_t1


        var lc_s1_ = 'v1|0|';
        var lc_s2_ = '|0||0||';

        self_public_.ht2ProgFTE = function (ht_in) {
            try {
                var ar_s = [];
                var ar_keys = ht_in.keys();
                var s_key;
                var i_len = ar_keys.length;
                ar_s.push(lc_s1_);
                ar_s.push(i_len + 1);
                ar_s.push(lc_s2_);
                for (var i = 0; i < i_len; i++) {
                    s_key = ar_keys[i];
                    prc_.create_stringrecord_t1(ar_s, s_key);
                    prc_.create_stringrecord_t1(ar_s, ht_in.get(s_key));
                } // for
                var s_progte = raudrohi.base.s_concat_array_of_strings(ar_s);
                return s_progte;
            } catch (err) {
                raudrohi.tmg('da41f93e-b2e2-44ff-85f3-220260904dd7', err);
            } // catch
        } // self_public_.ht2ProgFTE

        //-------------------------------------

        // http://mmmvkos.softf1.com/index.php?title=JavaScript
        function i_ProgFTE_v1_hack_get_integer(ar_opmem) {
            // As the indexing of various substring, index-of, etc.
            // functions of different programming languages can vary.
            // there is high probability of one-off errors in here.
            var ixs_low = ar_opmem[0];
            var s_lc_pillar = ar_opmem[1];
            var s_haystack = ar_opmem[2];
            // | 9 9 9 | 9
            // 0 1 2 3 4 5
            //   A
            var ix = s_haystack.indexOf(s_lc_pillar, ixs_low); // === 4
            if (ix < 0) {
                raudrohi.tmg('86f4ee55-fc6d-4ce2-bef3-220260904dd7',
                    "The string does not conform to ProgFTE_v1 format." +
                    " \nixs_low == " + ixs_low +
                    " \nix == " + ix + " s_lc_pillar == " + s_lc_pillar +
                    " \ns_haystack == " + s_haystack);
            } // if
            if (ix === ixs_low) {
                raudrohi.tmg('4915a8f2-c84a-4376-85f3-220260904dd7',
                    "The string does not conform to ProgFTE_v1 format." +
                    " \nix == ixs_low == " + ix +
                    " s_lc_pillar == " + s_lc_pillar +
                    " \ns_haystack == " + s_haystack);
            } // if
            if (raudrohi.settings.debug_JavaScript === true) {
                var i_len_s_haystack = s_haystack.length;
                // The (-1) is due to the fact that the s_lc_pillar must exist.
                // and has the length of 1.
                var ar_x = [ixs_low, ix, (i_len_s_haystack - 1)];
                raudrohi.base.assert_monotonic_increase_i(ar_x,
                    'e2044d30-f765-4dcf-92f3-220260904dd7');
            } // if
            var s_0 = s_haystack.substring(ixs_low, ix);         // === "999"
            ixs_low += s_0.length;
            // | 9 9 9 | 9
            // 0 1 2 3 4 5
            //         A
            ixs_low += 1
            // | 9 9 9 | 9
            // 0 1 2 3 4 5
            //           A
            ar_opmem[0] = ixs_low;
            var i_out = parseInt(s_0, 10);
            return i_out;
        } // i_ProgFTE_v1_hack_get_integer


        function s_ProgFTE_v1_hack_get_stringrecord(ar_opmem) {
            try {
                // stringrecord format:
                //  <length>|<stringvalue>|
                var i_len = i_ProgFTE_v1_hack_get_integer(ar_opmem);
                var ixs_low = ar_opmem[0];
                var s_haystack = ar_opmem[2];
                //-----------------------
                // | a b c | 9
                // 0 1 2 3 4 5
                //   A
                // ixs_low
                //-----------------------
                var ix = ixs_low + i_len;
                //-----------------------
                // | a b c | 9
                // 0 1 2 3 4 5
                //         A
                //         ix
                //-----------------------
                if (raudrohi.settings.debug_JavaScript === true) {
                    var i_len_s_haystack = s_haystack.length;
                    // The (-1) is due to the fact that the s_lc_pillar must exist.
                    // at the very end of a string-record and therefore also
                    // at the very end of the ProgFTE_v1 string.
                    // The "|" has the length of 1.
                    var ar_x = [ixs_low, ix, (i_len_s_haystack - 1)];
                    raudrohi.base.assert_monotonic_increase_i(ar_x,
                        'e97d7fe7-c16f-4ad3-8bf3-220260904dd7');
                } // if
                var s_out = s_haystack.substring(ixs_low, ix);  // === "999"
                ixs_low = ix + 1
                // | 9 9 9 | 9
                // 0 1 2 3 4 5
                //           A
                ar_opmem[0] = ixs_low;
                return s_out;
            } catch (err) {
                raudrohi.tmg('4e40d894-455e-4a87-83f3-220260904dd7', err);
            } // catch
        } // s_ProgFTE_v1_hack_get_stringrecord


        function ProgFTE_v1_hack_get_keyvaluepair(ar_opmem) {
            try {
                // Hashtable key-value pair format:
                // <stringrecord><stringrecord>
                var s_key = s_ProgFTE_v1_hack_get_stringrecord(ar_opmem);
                var s_value = s_ProgFTE_v1_hack_get_stringrecord(ar_opmem);
                ar_opmem[3] = s_key;
                ar_opmem[4] = s_value;
            } catch (err) {
                raudrohi.tmg('2e1cb7f6-48fe-4775-95f3-220260904dd7', err);
            } // catch
        } // ProgFTE_v1_hack_get_keyvaluepair


        self_public_.ProgFTE2ht = function (s_progfte) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_progfte, 's_progfte',
                        'ae70531e-b3e3-420a-83f3-220260904dd7');
                } // if
                //
                // v<ProgFTE_format_version>[|]<ProgFTE_format_mode>[|]<number_of_key-value_pairs>[|](<key-value_pair>)+
                //
                // v 1 | 0 | 9 |
                // 0 1 2 3 4 5 6
                //
                var rgx_vddd = /^v[\d]+[|][\d]+[|][\d]+[|]/;
                var ar = s_progfte.match(rgx_vddd);
                if (ar === null) {
                    raudrohi.tmg('3e587bf2-1223-4a36-9df3-220260904dd7',
                        "\nUnsupported format.\ns_progfte==\n" +
                        s_progfte + "\n\n");
                } // if
                var s_vddd = ar[0];
                // ar_opmem[0]=== ixs_low
                // ar_opmem[1]=== s_lc_pillar
                // ar_opmem[2]=== s_haystack
                // ar_opmem[3]=== s_key
                // ar_opmem[4]=== s_value
                var ar_opmem = [1, lc_singlepillar_, s_vddd];
                ar_opmem[3] = null;
                ar_opmem[4] = null;
                var i_version = i_ProgFTE_v1_hack_get_integer(ar_opmem);
                if (i_version !== 1) { // == ProgFTE_v1
                    raudrohi.tmg('41c7d4cd-fce9-4712-a1f3-220260904dd7',
                        'ProgFTE version ' + i_version + " is not and " +
                        "never will be supported by this function.");
                } // if
                var i_mode = i_ProgFTE_v1_hack_get_integer(ar_opmem);
                var i_n_of_keyvaluepairs = i_ProgFTE_v1_hack_get_integer(ar_opmem);
                ar_opmem[2] = s_progfte;
                var i_len_s_progfte = s_progfte.length;
                var ht_out = new Hashtable();
                var s_key = null;
                var s_value = null;
                // The very first key-value pair holds ProgFTE_v1
                // mode specific metadata.
                ProgFTE_v1_hack_get_keyvaluepair(ar_opmem);
                try {
                    while (ar_opmem[0] < i_len_s_progfte) {
                        ProgFTE_v1_hack_get_keyvaluepair(ar_opmem);
                        s_key = ar_opmem[3];
                        s_value = ar_opmem[4];
                        ht_out.put(s_key, s_value);
                    } // while
                } catch (err) {
                    raudrohi.tmg('e363bd1a-a906-4cdf-91e3-220260904dd7', err);
                } // catch
                return ht_out;
            } catch (err) {
                raudrohi.tmg('23d67b1a-2a41-4f88-a2e3-220260904dd7', err);
            } // catch
        } // self_public_.ProgFTE2ht

    } catch (err) {
        raudrohi.tmg('21430da3-8181-4d66-81e3-220260904dd7', err);
    } // catch
} // raudrohi.lang.ProgFTE_v1

raudrohi.lang.ProgFTE_v1 = new raudrohi.lang.ProgFTE_v1();

//-------------------------------------------------------------------------

raudrohi.lang.ht2ProgFTE = function (ht_in) {
    try {
        var s_progfte = raudrohi.lang.ProgFTE_v1.ht2ProgFTE(ht_in)
        return s_progfte;
    } catch (err) {
        raudrohi.tmg('d62c4a4a-b921-4ca6-93e3-220260904dd7', err);
    } // catch
} // raudrohi.lang.ht2ProgFTE


raudrohi.lang.ProgFTE2ht = function (s_progfte) {
    try {
        // http://longterm.softf1.com/specifications/progfte/
        var ht_out = null;
        var ar = s_progfte.match(/^[\d]+[|]{3}/); //
        if (ar !== null) { // ar[0]=== like  12345|||
            ht_out = raudrohi.lang.ProgFTE_v0.ProgFTE2ht(s_progfte)
        } else {
            ar = s_progfte.match(/^v[\d]+[|]/); // min match length == 3 characters
            if (ar === null) {
                raudrohi.tmg('cf654e51-2ed6-4369-82e3-220260904dd7',
                    "\nUnsupported format.\ns_progfte==\n" +
                    s_progfte + "\n\n");
            } // if
            var s_0 = ar[0]; // == "v1|" for ProgFTE_v1
            var s_version = s_0.substring(1, (s_0.length - 1));
            if (s_version === "1") { // == ProgFTE_v1
                ht_out = raudrohi.lang.ProgFTE_v1.ProgFTE2ht(s_progfte)
            } else {
                raudrohi.tmg('20b75928-39b1-4639-b2e3-220260904dd7',
                    'ProgFTE version ' + s_version +
                    ' is not yet supported by this function.');
            } // else
        } // else
        return ht_out;
    } catch (err) {
        raudrohi.tmg('1ba43b72-e856-48f4-93e3-220260904dd7',
            err + "\n\n" + ' s_progfte==' + s_progfte);
    } // catch
} // raudrohi.lang.ProgFTE2ht


//=========================================================================

// This file has been assembled by martin.vahi@softf1.com and it
// contains a mixture of code written by other people and code
// that has been written by the martin.vahi@softf1.com.
//
// Everything in namespace raudrohi, except its dependencies,
// is written by the martin.vahi@softf1.com and is under the BSD license.
// -----The--start--of--the--BSD--license---------------------------------
// Copyright (c) 2009, martin.vahi@softf1.com that has an
// Estonian personal identification code of 38108050020.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
// * Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer
//   in the documentation and/or other materials provided with the
//   distribution.
// * Neither the name of the Martin Vahi nor the names of its
//   contributors may be used to endorse or promote products derived
//   from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -----The--end----of--the--BSD--license---------------------------------
//
// The rest of the code here is under various
// licenses, but all of it is commercially usable without paying any
// license fees. If all of the code is necessary anyway, then by
// placing them to a single file reduces the number of HTTP-requests.
//------------------------------------------------------------------------
// This file contains code that converts JavaScript formatted data
// to HTML code and provides some basic UI elements related services.
// Practically this code in this file provides components that can be
// used for assembling the most basic and simplistic widgets.
//========================================================================
if(window.raudrohi_widgetless_ui_exists!==true){
	window.raudrohi.widgetless_ui={}; // The "ui" stands for User Interface.
	window.raudrohi_widgetless_ui_exists=true;
} // if

if(window.raudrohi_ui_exists!==true){
	window.raudrohi.widgetless_ui.func={}; // The "ui" stands for User Interface.
	window.raudrohi_ui_exists=true;
} // if

if(window.liilia_exists!==true){
	window.liilia={};
	window.liilia_exists=true;
} // if

if(window.liilia_widgetless_ui_exists!==true){
	window.liilia.widgetless_ui={};
	window.liilia_widgetless_ui_exists=true;
} // if

if(window.liilia_widgetless_ui_func_exists!==true){
	window.liilia.widgetless_ui.func={};
	window.liilia_widgetless_ui_func_exists=true;
} // if

//------------------------------------------------------------------------
// The following radio button getter-setters are in public domain and
// originate from http://www.somacon.com/p143.php
// ----Citation--Start--------
// This pair of Javascript function can get or set the checked value of a
// group of radio buttons. These functions are specially designed for
// dynamic pages, and work without error with zero, one, or more radio
// buttons. Also, because the radio length is saved before looping, this
// function is much faster. Finally, the functions are granted to the
// public domain
// ----Citation--End----------
//
// They are placed to the raudrohi.lang for convenience.
// return the value of the radio button that is checked
// return an empty string if none are checked, or
// there are no radio buttons
liilia.widgetless_ui.func.getCheckedValue=function(radioObj) {
	if(!radioObj)
		return "";
	var radioLength = radioObj.length;
	if(radioLength == undefined)
		if(radioObj.checked)
			return radioObj.value;
		else
			return "";
	for(var i = 0; i < radioLength; i++) {
		if(radioObj[i].checked) {
			return radioObj[i].value;
		}
	}
	return "";
} // liilia.widgetless_ui.func.getCheckedValue

// set the radio button with the given value as being checked
// do nothing if there are no radio buttons
// if the given value does not exist, all the radio buttons
// are reset to unchecked
liilia.widgetless_ui.func.setCheckedValue=function(radioObj, newValue) {
	if(!radioObj)
		return;
	var radioLength = radioObj.length;
	if(radioLength == undefined) {
		radioObj.checked = (radioObj.value == newValue.toString());
		return;
	}
	for(var i = 0; i < radioLength; i++) {
		radioObj[i].checked = false;
		if(radioObj[i].value == newValue.toString()) {
			radioObj[i].checked = true;
		}
	}
} // liilia.widgetless_ui.func.setCheckedValue

//------------------------------------------------------------------------
raudrohi.widgetless_ui.func.set_background_color=function(element_id, colourstring) {
	raudrohi.adapter.setAttribute(element_id,'style',
		'background:'+colourstring+';');
} // raudrohi.widgetless_ui.func.set_background_color


//------------------------------------------------------------------------
// It always returns an string, i.e. it never returns null.
raudrohi.widgetless_ui.func.get_formfield_value=function(element_id){
	try{
		if(!raudrohi_adapter_isString(element_id)){
			raudrohi.tmg('5c004b33-5e3f-488b-9213-0280a0219bd7',
				'element_id(=='+element_id+') was not a string.');
			if(raudrohi.base.node_exists(element_id)!==true){
				raudrohi.tmg('648d0f29-8f6e-447e-b313-0280a0219bd7',
					'There\'s no node with id=="'+element_id+
					'" in the DOM tree.');
			} // if
		} // if
		var field_elem=document.getElementById(element_id);
		if(field_elem==null){
			raudrohi.tmg('459a0d27-c20e-4581-9513-0280a0219bd7',
				'Could not find an element with an id of '+element_id+'.');
		} // if
		var field_value=field_elem.value;
		if(field_value==null){
			field_value='';
		} // if
		return field_value;
	} catch (err){
		raudrohi.tmg('d83d2a56-d155-41fa-9313-0280a0219bd7',err);
	} // catch
} // raudrohi.widgetless_ui.func.get_formfield_value

raudrohi.widgetless_ui.func.set_formfield_value=function(element_id,new_text){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			if(!raudrohi_adapter_isString(element_id)){
				raudrohi.tmg('8fce1d2c-91fc-4368-8513-0280a0219bd7',
					'element_id(=='+element_id+') was not a string.');
			} // if
			if(!raudrohi_adapter_isString(new_text)){
				raudrohi.tmg('ffb5494c-163c-45ae-b313-0280a0219bd7',
					'new_text(=='+new_text+') was not a string.');
			} // if
			if(raudrohi.base.node_exists(element_id)!==true){
				raudrohi.tmg('b23ff627-e5db-45df-8213-0280a0219bd7',
					'There\'s no node with id=="'+element_id+
					'" in the DOM tree.');
			} // if
		} // if
		var field_elem=document.getElementById(element_id);
		if(field_elem===null){
			raudrohi.tmg('63ba4e5c-a36d-4489-bc13-0280a0219bd7',
				'Could not find an element with an id of '+element_id+'.');
		} // if
		field_elem.value=new_text;
	} catch (err){
		raudrohi.tmg('e386c422-b686-4f3e-b113-0280a0219bd7',err);
	} // catch
} // raudrohi.widgetless_ui.func.set_formfield_value


//------------------------------------------------------------------------
raudrohi.widgetless_ui.func.set_focus_2_formfield=function(element_id){
	try{
		if(!raudrohi_adapter_isString(element_id)){
			raudrohi.tmg('b9788226-5929-48f5-8313-0280a0219bd7',
				'element_id(=='+element_id+') was not a string.');
			if(raudrohi.base.node_exists(element_id)!==true){
				raudrohi.tmg('29931ac2-662c-4e0c-9513-0280a0219bd7',
					'There\'s no node with id=="'+element_id+
					'" in the DOM tree.');
			} // if
		} // if
		var field_elem=document.getElementById(element_id);
		if(field_elem===null){
			raudrohi.tmg('0c436d11-59e2-473b-8113-0280a0219bd7',
				'Could not find an element with an id of '+element_id+'.');
		} // if
		field_elem.focus();
	} catch (err){
		raudrohi.tmg('f0fc3e01-22da-4d39-b303-0280a0219bd7',
			err+' element_id=='+element_id);
	} // catch
} // raudrohi.widgetless_ui.func.set_focus_2_formfield

//------------------------------------------------------------------------
// Returns a string. The reason, why this function exists at all
// is that one can use it for creating buttons in a deeply nested
// tables, where the innerHTML or widget based approach won't work.
raudrohi.widgetless_ui.func.create_button_v1_html=function(button_html_id, button_text,
	optional_attrstrings){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			if(!raudrohi_adapter_isString(button_html_id)){
				raudrohi.tmg('85ce162e-7be3-4145-b503-0280a0219bd7',
					'button_html_id(=='+button_html_id+') was not a string.');
			} // if
			if(!raudrohi_adapter_isString(button_text)){
				raudrohi.tmg('1e54074b-fc74-446a-b503-0280a0219bd7',
					'button_text(=='+button_text+') was not a string.');
			} // if
			if (optional_attrstrings!==undefined) {
				raudrohi.base.assert_isString(optional_attrstrings,
					'optional_attrstrings',
					'a4de9a47-5202-4603-b203-0280a0219bd7');
			} // if
		} // if
		var button_new_html='<button type="button" '+
		'id="'+button_html_id+'" '+
		'name="'+button_html_id+'_name" value="'+button_text+'" ';
		if(optional_attrstrings!==undefined){
			button_new_html=button_new_html+optional_attrstrings;
		} // if
		button_new_html=button_new_html+' >'+button_text+'</button>';
		return button_new_html;
	} catch (err){
		raudrohi.tmg('8cb8f528-35cb-4515-8203-0280a0219bd7',err);
	} // catch
} // raudrohi.widgetless_ui.func.create_button_v1_html


// The button is placed into <button_id>_div.
raudrohi.widgetless_ui.func.create_button_v1=function(button_html_id, button_text,
	eventhandler_function, class_attribute_value_as_a_string){
	if(raudrohi_settings_debug_JavaScript===true){
		if(!raudrohi_adapter_isString(button_html_id)){
			raudrohi.tmg('4c09a9d7-d3fa-4b2e-8403-0280a0219bd7',
				'button_html_id(=='+button_html_id+') was not a string.');
		} // if
		if(!raudrohi_adapter_isString(class_attribute_value_as_a_string)){
			raudrohi.tmg('72032168-dc88-41a6-a303-0280a0219bd7',
				'class_attribute_value_as_a_string(=='+
				class_attribute_value_as_a_string+
				') was not a string.');
		} // if
		if(!raudrohi_adapter_isString(button_text)){
			raudrohi.tmg('1ef4a3f2-c25a-4a1c-a303-0280a0219bd7',
				'button_text(=='+button_text+') was not a string.');
		} // if
		raudrohi.base.assert_isFunction(eventhandler_function,
			'eventhandler_function', '21254c72-9678-41c6-b103-0280a0219bd7');
	} // if
	try{
		var button_new_html=raudrohi.widgetless_ui.func.create_button_v1_html(
			button_html_id, button_text,
			' class="'+class_attribute_value_as_a_string+'" ');
		raudrohi.base.set_innerHTML(button_html_id+'_div',button_new_html);
		raudrohi.adapter.addEventListner(button_html_id,"click",
			eventhandler_function)
	} catch (err){
		raudrohi.tmg('cbd0fd11-f639-4515-9203-0280a0219bd7',err);
	} // catch
} // raudrohi.widgetless_ui.func.create_button_v1

//------------------------------------------------------------------------
raudrohi.widgetless_ui.func.toHTML_array2selector=function(id_name, an_array_of_menuitem_names,
	selected_menuitem_name, max_number_of_visible_options){
	if(raudrohi_settings_debug_JavaScript===true){
		raudrohi.base.assert_isString(id_name, 'id_name',
			'22df22c1-6458-49d3-a303-0280a0219bd7');
		raudrohi.base.assert_isArray(an_array_of_menuitem_names,
			'an_array_of_menuitem_names',
			'0defa618-805a-4f6c-b503-0280a0219bd7');
		raudrohi.base.assert_isString(selected_menuitem_name,
			'selected_menuitem_name','5dde14e4-6904-461a-9103-0280a0219bd7');
		raudrohi.base.assert_isNumber(max_number_of_visible_options,
			'max_number_of_visible_options',
			'60fc7158-55e8-4027-93f2-0280a0219bd7');
	} // if
	try{
		var s_html='<select id="'+id_name+'" size="'+
		max_number_of_visible_options+'">';
		var len=an_array_of_menuitem_names.length;
		var al;
		for (var i = 0 ; i < len; i++){
			al=an_array_of_menuitem_names[i];
			if(al==selected_menuitem_name){
				s_html=s_html+"\n"+'<option value="'+al+'" selected="true">'+
				al+'</option>';
			}else{
				s_html=s_html+"\n"+'<option value="'+al+'">'+al+'</option>';
			} // else
		} // for
		s_html=s_html+"\n</select>";
		return s_html;
	} catch (err){
		raudrohi.tmg('54e1fb4c-e0ce-4f2e-92f2-0280a0219bd7',err);
	} // catch
} // raudrohi.widgetless_ui.func.toHTML_array2selector


// alignment values={north,south,east,west,northeast,northwest,
// southeast,southwest, center}
// Returns a hashtable, where ht.get('vertical-align')=PickOne({top,middle,bottom})
// ht.get('text-align')=PickOne({left,center,right})
raudrohi.widgetless_ui.func.get_alignment_style_values=function(alignment_as_a_cardinal_point){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isString(alignment_as_a_cardinal_point,
				'alignment_as_a_cardinal_point',
				'277800b3-16b2-440e-92f2-0280a0219bd7');
		} // if
		var vertical_style_value;
		var horizontal_style_value;
		switch(alignment_as_a_cardinal_point){
			case 'center':
				vertical_style_value='middle';
				horizontal_style_value='center';
				break;
			case 'west':
				vertical_style_value='middle';
				horizontal_style_value='left';
				break;
			case 'east':
				vertical_style_value='middle';
				horizontal_style_value='right';
				break;
			case 'north':
				vertical_style_value='top';
				horizontal_style_value='center';
				break;
			case 'south':
				vertical_style_value='bottom';
				horizontal_style_value='center';
				break;
			case 'northeast':
				vertical_style_value='top';
				horizontal_style_value='right';
				break;
			case 'southeast':
				vertical_style_value='bottom';
				horizontal_style_value='right';
				break;
			case 'southwest':
				vertical_style_value='bottom';
				horizontal_style_value='left';
				break;
			case 'northwest':
				vertical_style_value='top';
				horizontal_style_value='left';
				break;
			default:
				if(raudrohi_settings_debug_JavaScript===true){
					throw raudrohi.tmg(
						'467b6419-2ff1-42e1-b3f2-0280a0219bd7',
						'There\'s no branching for alignment(=='+
						alignment_as_a_cardinal_point+
						'). Possible valid values are:'+
						'north, south, east, west,'+
						'northeast, southeast, southwest, northwest.');
				} // if
		} // switch
		var ht=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
		ht.put('vertical-align',vertical_style_value);
		ht.put('text-align',horizontal_style_value);
		return ht;
	} catch (err){
		raudrohi.tmg('3d1d7593-2ae1-4892-b9f2-0280a0219bd7',err);
	} // catch
} // get_alignment_style_values

// alignment values={north,south,east,west,northeast,northwest,
// southeast,southwest, center}
raudrohi.widgetless_ui.func.set_alignment=function(alignment_as_a_cardinal_point,
	DOM_element_HTML_id){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isString(alignment_as_a_cardinal_point,
				'alignment_as_a_cardinal_point',
				'bfed5b55-2c35-43cb-a2f2-0280a0219bd7');
			raudrohi.base.assert_isString(DOM_element_HTML_id,
				'DOM_element_HTML_id',
				'0c3b0b40-6091-494f-b2f2-0280a0219bd7');
		} // if
		var ht=raudrohi.widgetless_ui.func.get_alignment_style_values(alignment_as_a_cardinal_point);
		raudrohi.adapter.editStyle(DOM_element_HTML_id, 'vertical-align',
			ht.get('vertical-align'));
		raudrohi.adapter.editStyle(DOM_element_HTML_id, 'text-align',
			ht.get('text-align'));
		raudrohi.base.pool_of_hashtables.return_used_hashtable(ht);
	} catch (err){
		raudrohi.tmg('10057c41-90bb-4d58-84f2-0280a0219bd7',err);
	} // catch
} // set_alignment


raudrohi.widgetless_ui.func.assert_alignment_value=function(alignment_as_a_cardinal_point){
	try{
		raudrohi.base.assert_isString(alignment_as_a_cardinal_point,
			'alignment_as_a_cardinal_point',
			'82172f2a-2f79-4df3-85f2-0280a0219bd7');
		switch(alignment_as_a_cardinal_point){
			case 'center':
				break;
			case 'west':
				break;
			case 'east':
				break;
			case 'north':
				break;
			case 'south':
				break;
			case 'northeast':
				break;
			case 'southeast':
				break;
			case 'southwest':
				break;
			case 'northwest':
				break;
			default:
				if(raudrohi_settings_debug_JavaScript===true){
					throw raudrohi.tmg(
						'1a6857c1-e73a-4aa8-93f2-0280a0219bd7',
						'There\'s no branching for alignment(=='+
						alignment_as_a_cardinal_point+
						'). Possible valid values are:'+
						'north, south, east, west,'+
						'northeast, southeast, southwest, northwest.');
				} // if
		} // switch
	} catch (err){
		raudrohi.tmg('5994071e-e484-4df2-85f2-0280a0219bd7',err);
	} // catch
} // assert_alignment_value

//------------------------------------------------------------------------

//------------------------------------------------------------------------
//=========================================================================
//
// This file contains classes that are used for plain HTML generation.
// The classes do not use any of the widgets specific infrastructure,
// but they do touch the DOM.
// 
// The "ui" stands for User Interface.
// 
//========================================================================
if(window.raudrohi_widgetless_ui_classes_exists!==true){
	window.raudrohi.widgetless_ui_classes={}; 
	window.raudrohi_widgetless_ui_classes_exists=true;
} // if

if(window.raudrohi_widgetless_ui_classes_private_code_exists!==true){
	window.raudrohi.widgetless_ui_classes.private_code={}; 
	window.raudrohi_widgetless_ui_classes_private_code_exists=true;
} // if

//------------------------------------------------------------------------

window.raudrohi.widgetless_ui_classes.img_with_links=function(s_image_url,
	i_image_file_width, i_image_file_height){
	try{
		var s_URL=s_image_url;
		var s_map_html_id=s_image_url.replace(
			"[.,:/\\s]","_","g");
		var i_width_orig=i_image_file_width; // px
		var i_height_orig=i_image_file_height;// px
		var private_code={};
				
		var ar_rect_i_x_orig=[];
		var ar_rect_i_y_orig=[];
		var ar_rect_s_alternate_text=[];
		var ar_rect_s_link_URL=[];

		var lc_s_rect_area_template='<area shape="rect" '+
		'coords="BLANK_FOR_COORDINATES" '+
		'alt="BLANK_FOR_ALTERNATE_TEXT" '+
		'href="BLANK_FOR_LINK_URL" />'+"\n";

		var lc_s_img_template_1='<img '+
		'src="BLANK_FOR_IMAGE_URL" '+
		'width="BLANK_FOR_IMAGE_WIDTH" '+
		' style="padding:0px;" '+
		'border="0" '+
		'usemap="#BLANK_FOR_MAP_HTML_ID"/>'+"\n";

		var lc_s_map_template_prefix='<map '+
		'name="BLANK_FOR_MAP_HTML_ID" '+
		'id="BLANK_FOR_MAP_HTML_ID">'+"\n";
		var lc_s_map_template_suffix='</map>'+"\n";
					

		this.declare_rectangle=function(i_x1,i_y1,i_x2,i_y2,
			s_link_URL,s_alternate_text){
			ar_rect_i_x_orig.push(i_x1,i_x2);
			ar_rect_i_y_orig.push(i_y1,i_y2);
			ar_rect_s_alternate_text.push(
				s_alternate_text);
			ar_rect_s_link_URL.push(s_link_URL);
		} // declare_rectangle

		this.to_s_by_new_width=function (fd_or_i_new_width){
			try{
				var fd_fx=(fd_or_i_new_width*1.0)/i_width_orig;

				var s_out=""+
				lc_s_map_template_prefix;
				var i_len=Math.floor(ar_rect_i_x_orig.length/2); 
				var i=0;
				var elem;
				var i_x1=0;
				var i_x2=0;
				var i_y1=0;
				var i_y2=0;
				var ix=0;
				var s_link_url=null;
				var s_alt_txt=null;
				var s_area_html=null;
				var s_coords=null;
				for(i=0;i<i_len;i++){
					ix=2*i;
					i_x1=Math.round(fd_fx*
						ar_rect_i_x_orig[ix]);
					i_x2=Math.round(fd_fx*
						ar_rect_i_x_orig[ix+1]);
					i_y1=Math.round(fd_fx*
						ar_rect_i_y_orig[ix]);
					i_y2=Math.round(fd_fx*
						ar_rect_i_y_orig[ix+1]);
					s_coords=""+i_x1+","+i_y1+
					","+i_x2+","+i_y2;
					s_link_url=ar_rect_s_link_URL[i];
					s_alt_txt=ar_rect_s_alternate_text[i];
					s_area_html=""+lc_s_rect_area_template;
					s_area_html=s_area_html.replace(
						"BLANK_FOR_LINK_URL",s_link_url);
					s_area_html=s_area_html.replace(
						"BLANK_FOR_ALTERNATE_TEXT",s_alt_txt);
					s_area_html=s_area_html.replace(
						"BLANK_FOR_COORDINATES",s_coords);
					s_out=s_out+s_area_html;
				} // for
				s_out=s_out+lc_s_map_template_suffix;
				var i_img_width_new=Math.round(
					i_width_orig*fd_fx);
				var s_img=""+lc_s_img_template_1;
				s_img=s_img.replace(
					"BLANK_FOR_IMAGE_WIDTH",
					""+i_img_width_new);
				s_img=s_img.replace(
					"BLANK_FOR_IMAGE_URL",s_URL);
				s_out=s_out+s_img;
				s_out=s_out.replace(
					/BLANK_FOR_MAP_HTML_ID/g,
					s_map_html_id);
				//var i_img_height_new=Math.round(
				//i_height_orig*fd_fx);
				return s_out;
			} catch (err){
				raudrohi.tmg('27a21f10-df70-4791-942c-61c111202dd7',err);
			} // catch
		} // to_s_by_new_width
	} catch (err){
		raudrohi.tmg('098fe23e-3fcd-4244-b12c-61c111202dd7',err);
	} // catch
} // class img_with_links


//------------------------------------------------------------------------
//=========================================================================
// This file is for declaring global caches.
// The instantiation of the caches is expected to be
// triggered from the library constructor.
//-------------------------------------------------------------------------
if(window.raudrohi_cache_exists!==true){
	window.raudrohi.cache={};
	window.raudrohi_cache_exists=true;
} // if
if(window.raudrohi_cache_funcs_exists!==true){
	window.raudrohi.cache.funcs={};
	window.raudrohi_cache_funcs_exists=true;
} // if
//-------------------------------------------------------------------------
// It's a partial constructor of some of the 
// global caches that are declared in this file.
raudrohi.cache.init=function(){
	try{
		// key==<number_of_colors>_<start_color>_<end_color>
		// The colors are in a form of #xxxxxx, where x is a hex digit.
		raudrohi.cache.ht_color_gradients=new Hashtable();
	} catch (err){
		raudrohi.tmg('329b455e-0c51-4ea8-8577-70808090abd7',err);
	} // catch
} // raudrohi.cache.init

//=========================================================================
//=========================================================================

if(window.raudrohi.dbcomm_exists!==true){
	window.raudrohi.dbcomm={}; // The "db" stands for database
	window.raudrohi.dbcomm_exists=true;
} // if

//------------------------------------------------------------------------
// This class is deprecated.
raudrohi.dbcomm.dbq1=function(){
	var self_public_=this;
	try{

		this.verify_bin_query_ht=function(ht_query_candidate){
			if(raudrohi_settings_debug_JavaScript===true){
				raudrohi.base.assert_isObject(ht_query_candidate,
					'ht_query_candidate',
					'15c83927-6ad3-4ffb-a197-6150a0219bd7');
				var ht_q=ht_query_candidate;

				raudrohi.base.assert_isString(
					ht_q.get('formscript_processor_name'),
					'ht_q.get(\'formscript_processor_name\')',
					'76095a27-e218-4bae-9197-6150a0219bd7');
				raudrohi.base.assert_isString(
					ht_q.get('table_name'),'ht_q.get(\'table_name\')',
					'2878b2e3-4d83-4c17-9697-6150a0219bd7');
				if(!raudrohi_adapter_isString(ht_q.get('ht_selector'))){
					raudrohi.base.assert_isObject(
						ht_q.get('ht_selector'),'ht_q.get(\'ht_selector\')',
						'36be5b39-c7f9-4479-b497-6150a0219bd7');
				} // if
				raudrohi.base.assert_isString(
					ht_q.get('SQL_suffix'),'ht_q.get(\'SQL_suffix\')',
					'304bf956-be28-4d3f-8597-6150a0219bd7');
				raudrohi.base.assert_isString(
					ht_q.get('command'),'ht_q.get(\'command\')',
					'5e3459f1-c7e5-4372-9197-6150a0219bd7');
			} // if
		} // verify_bin_query_ht

		this.create_empty_ht=function(){
			try{
				var ht_q=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
				var ht_selector=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
				ht_q.put('formscript_processor_name','<needs to be set>');
				ht_q.put('table_name','<needs to be set somewhere else>');
				ht_q.put('ht_selector',ht_selector);
				ht_q.put('SQL_suffix','');
				ht_q.put('command','<needs to be set somewhere else>');
				return ht_q;
			} catch (err){
				raudrohi.tmg('6ca9a330-0490-4ec7-b297-6150a0219bd7',err);
			} // catch
		} // create_empty_ht

		this.get_query_params_signature=function(ht_q){
			try{
				self_public_.verify_bin_query_ht(ht_q);
				var ht_selector=ht_q.get('ht_selector');
				var signature=raudrohi.lang.hashtable_signature(ht_selector);
				signature+=':';
				signature+=ht_q.get('table_name');
				signature+=':';
				signature+=ht_q.get('SQL_suffix');
				signature+=':';
				signature+=ht_q.get('formscript_processor_name');
				return signature;
			} catch (err){
				raudrohi.tmg('4c10c421-14de-40f8-9297-6150a0219bd7',err);
			} // catch
		} // serialize_query_ht

		this.serialize_query_ht=function(ht_q){
			try{
				self_public_.verify_bin_query_ht(ht_q);
				var ht_tmp=ht_q.get('ht_selector');
				var s_ht_selector=raudrohi.lang.ht2ProgFTE(
					ht_q.get('ht_selector'));
				ht_q.put('ht_selector',s_ht_selector);
				//				ht_q.put('signature',
				//					self_public_.get_query_params_signature(ht_q));
				var s_progfte=raudrohi.lang.ht2ProgFTE(ht_q);
				ht_q.put('ht_selector',ht_tmp);
				return s_progfte;
			} catch (err){
				raudrohi.tmg('26870919-f84e-4ea2-a497-6150a0219bd7',err);
			} // catch
		} // serialize_query_ht


		this.destroy=function(ht_q){
			try{
				self_public_.verify_bin_query_ht(ht_q);
				raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_q.get('ht_selector'))
				raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_q);
			} catch (err){
				raudrohi.tmg('454b6520-f7de-4e4c-a197-6150a0219bd7',err);
			} // catch
		} // destroy

	} catch (err){
		raudrohi.tmg('cecae120-a16f-44ae-a397-6150a0219bd7',err);
	} // catch
} // raudrohi.dbcomm.dbq1
raudrohi.dbcomm.dbq1=new raudrohi.dbcomm.dbq1();


//------------------------------------------------------------------------
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// This file has been assembled by martin.vahi@softf1.com and it
// contains a mixture of code written by other people and code
// that has been written by the martin.vahi@softf1.com.
//
// Everything in namespace raudrohi, except its dependencies,
// is written by the martin.vahi@softf1.com and is under the BSD license.
// -----The--start--of--the--BSD--license---------------------------------
// Copyright (c) 2009, martin.vahi@softf1.com that has an
// Estonian personal identification code of 38108050020.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
// * Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer
//   in the documentation and/or other materials provided with the
//   distribution.
// * Neither the name of the Martin Vahi nor the names of its
//   contributors may be used to endorse or promote products derived
//   from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -----The--end----of--the--BSD--license---------------------------------
//
//========================================================================

if(window.raudrohi_ajax_exists!==true){
	window.raudrohi.ajax={};
	window.raudrohi_ajax_exists=true;
} // if
if(window.raudrohi_ajax_comm_exists!==true){
	window.raudrohi.ajax.comm={};
	window.raudrohi_ajax_comm_exists=true;
} // if
if(window.raudrohi_ajax_comm_formscript_exists!==true){
	raudrohi.ajax.comm.formscript={};
	window.raudrohi_ajax_comm_formscript_exists=true;
} // if

//------------------------------------------------------------------------
raudrohi.ajax.comm.formscript.send2server_s_triplepillar="|||";

raudrohi.ajax.comm.formscript.send2server=function(formscript_processor_name,
	phone_number_of_the_response_receiver, formscript_data, server_URL){
	var err_tmp='raudrohi.ajax.comm.formscript.send';
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			if(!raudrohi_adapter_isString(formscript_processor_name)){
				raudrohi.tmg('9337c4f2-6ef4-41c8-ba50-8390a0219bd7',err_tmp);
			}
			if(!raudrohi_adapter_isString(phone_number_of_the_response_receiver)){
				raudrohi.tmg('1825bff4-fef9-47ee-9a40-8390a0219bd7',err_tmp);
			}
			if(!raudrohi_adapter_isString(formscript_data)){
				raudrohi.tmg('1cd5a612-3813-40f7-b710-8390a0219bd7',err_tmp);
			}
			if(!raudrohi_adapter_isString(server_URL)){
				raudrohi.tmg('3e864d75-f0bb-4424-8720-8390a0219bd7',err_tmp);
			}
		} // if
		//TODO: Refactor the JavaScript side and server side so that it uses
		// ProgFTE format in stead of the current one, where phone numbers are
		// not allowed to contain the '|||'.
		var s2=formscript_data;
		var s_trplplr=raudrohi.ajax.comm.formscript.send2server_s_triplepillar;
		var datastr=formscript_processor_name+s_trplplr+
		phone_number_of_the_response_receiver+s_trplplr+s2;
		raudrohi.adapter.send2server(server_URL,datastr);
	} catch (err){
		raudrohi.tmg('18fd15f2-bc87-44d7-a130-8390a0219bd7',err);
	} // catch
}; // raudrohi.ajax.comm.formscript.send2server

//------------------------------------------------------------------------
// Actually, this class is CRAP and should be heavily refactored.
// currently its still in here due to the crash message methods, which are
// useful.
raudrohi.ajax.pagecontrol=function(){
	var self_public_=this;
	this.phone=new raudrohi.lang.comm.phone('raudrohi.ajax.pagecontrol');
	var visible_elems_=[];


	// This metod is meant for displaying only the "official" crash
	// messages, not any kind of debugging stuff.
	this.display_server_side_crash_message=function(a_string_from_server){
		try{
			if(a_string_from_server.indexOf('OPEN_<theTITLEof_I_heaT_up_I_can\''+
				't_cool_down_You_got_me_spinnin_Round_and_Round>')!=(-1)){
				document.write(a_string_from_server);
			} else{
				var s1=raudrohi.lang.userinterface_text.get(11);
				document.write(s1);
			} // else
			return;
		} catch (err){
			if(raudrohi_settings_debug_JavaScript===true){
				raudrohi.tmg('5163abf2-8b20-428e-8f5f-8390a0219bd7',err);
			}
			document.write('<br/><br/>The web application\'s server side '+
				'crashed. This is defenately due to a software fault.'+
				'The developers will find a string like "'+
				'3ad7ebe3-7f96-4b94-aa72-0d13edf7314e" to be useful<br/>');
		} // catch
	}; // display_server_side_crash_message

	this.display_client_side_crash_message=function(){
		try{
			var s1=raudrohi.lang.userinterface_text.get(12);
			document.write(s1);
			return;
		} catch (err){
			if(raudrohi_settings_debug_JavaScript===true){
				raudrohi.tmg('e44d73e0-2e79-4b76-944f-8390a0219bd7',err);
			}
			document.write('<br/><br/>The web application\'s '+
				'browser side crashed. '+
				'This is defenately due to a software fault.'+
				'The developers will find a string like "'+
				'47e1b2dd-c5aa-420a-aa4a-21ab5036a7f8" to be useful<br/>');
		} // catch
	}; // display_client_side_crash_message

	this.display_general_crash_message=function(){
		try{
			var s1=raudrohi.lang.userinterface_text.get(13);
			document.write(s1);
			return;
		} catch (err){
			if(raudrohi_settings_debug_JavaScript===true){
				raudrohi.tmg('4c5d8ea1-cd60-4fcf-9b4f-8390a0219bd7',err);
			}
			document.write('The application crashed. This is defenately a bug.'+
				'The developers might find a string like "'+
				'8947b98b-a7b2-4bf3-9039-667bd346e884" useful');
		} // catch
	}; // display_general_crash_message

	this.declare_visible=function(a_page){
		try{
			visible_elems_.push(a_page);
		} catch (err){
			if(raudrohi_settings_debug_JavaScript===true){
				raudrohi.tmg('0109f393-0b95-46a6-a13f-8390a0219bd7',err);
			} else {
				self_public_.display_client_side_crash_message();
			} // else
		} // catch
	}; // this.declare_visible


	this.hide_all_visible_pages=function(){
		try{
			//raudrohi.lang.map_hashtable(self_public_.visible_elems,'hide','');
			var len=visible_elems_.length;
			var elem;
			for (var i = 0 ; i < len; i++){
				elem=visible_elems_.pop();
				elem.hide();
			} // for
		} catch (err){
			if(raudrohi_settings_debug_JavaScript===true){
				raudrohi.tmg('53c4d7ef-984d-4781-812f-8390a0219bd7',err);
			} else {
				self_public_.display_client_side_crash_message();
			} // else
		} // catch
	}; // this.hide_all_visible_pages

	this.switch2page=function(a_page_phone_number){
		try{
			self_public_.hide_all_visible_pages();
			self_public_.phone.call(a_page_phone_number,'unhide|||',0);
		} catch (err){
			if(raudrohi_settings_debug_JavaScript===true){
				raudrohi.tmg('20e9fce3-63da-40f1-a82f-8390a0219bd7',err);
			} else {
				self_public_.display_client_side_crash_message();
			} // else
		} // catch
	}; // this.switch2page

}; // raudrohi.ajax.pagecontrol

//------------------------------------------------------------------------
raudrohi.ajax.comm.formscript.receiver=function(){
	var self_public_=this;
	this.phone=new raudrohi.lang.comm.phone(
		'raudrohi.ajax.comm.formscript.receiver');
	var rgx_spacechars_=new RegExp("[\\s\\t\\n\\r]+","g");

	// Returns null, if the operation fails. Otherwise
	// returns raudrohi.core.pair, where
	// raudrohi.core.pair.a==<session id as a string>
	// and raudrohi.core.pair.b==formscript
	// A few qualifying sample strings:
	// "no_errors_occurred_at_server_side|||without_debuglog|||y|||id_333|||datawhatever"
	// "no_errors_occurred_at_server_side|||with_debuglog|||greetings|||id_is_this_time42a7|||whatever"
	function try_to_digest_response_text(a_string_from_server){
		var a_phone_number;
		var data;
		var debug=(raudrohi_settings_debug_JavaScript===true)||(raudrohi.settings.debug_SERVERSIDE===true);
		try{
			raudrohi.base.assert_isString(a_string_from_server,
				'a_string_from_server', '3da18b64-02ee-4db9-a41f-8390a0219bd7');
			// The trimming is some sort of a temporary bugfix, 
			// because for some reason the a_string_from_server 
			// starts with a linebreak, which makes things 
			// dificult if one starts to compare 
			// "\nno_errors_occurred_at_server_side" with the 
			//   'no_errors_occurred_at_server_side'
			var s_tmp=raudrohi.adapter.trim(a_string_from_server);
			var servercrash_state=raudrohi.base.bisect(s_tmp,'|||');
			var msg;
			if(servercrash_state===null) {
				msg='servercrash_state===null, Received:'+a_string_from_server;
				raudrohi.adapter.log('raudrohi Warning:'+msg);
				if(a_string_from_server!==''){
					if(debug) {
						document.write(msg);
						raudrohi.tmg('61d62b47-15b2-4379-ab5f-8390a0219bd7',msg);
					} else {
						raudrohi.ajax.pagecontrol.display_server_side_crash_message(a_string_from_server);
					} // else
				} // if
				return;
			} // if
			if(servercrash_state.a!='no_errors_occurred_at_server_side'){
				msg='servercrash_state.a=='+servercrash_state.a+
				' != \'no_errors_occurred_at_server_side\', '+
				'Received:'+a_string_from_server;
				document.write(msg);
				raudrohi.tmg('96feb203-8a66-4cf0-b73f-8390a0219bd7',msg);
			} // if
			var dbglog_presence_pair=raudrohi.base.bisect(servercrash_state.b,
				'|||');
			var dbglog_text_pair=raudrohi.base.bisect(dbglog_presence_pair.b,
				'|||');
			if((raudrohi.settings.debug_SERVERSIDE===true)&&(raudrohi_settings_debug_JavaScript===true)){
				if(dbglog_presence_pair.a=='with_debuglog') {
					var s_dbgl=raudrohi.base.gsub(
						'|','SiNgLepILLAR4',dbglog_text_pair.a);
					var s_dbgl1=s_dbgl.replace(rgx_spacechars_,"");
					if(s_dbgl1!==""){
						raudrohi.adapter.log(s_dbgl);
					} // if
				} // if
			} // if
			var s_session_id_pair=raudrohi.base.bisect(dbglog_text_pair.b, '|||');
			a_phone_number=s_session_id_pair.a;
			data=s_session_id_pair.b;
		} catch (err){
			if(debug) {
				raudrohi.tmg('4f79dec2-2cde-4bc4-b91f-8390a0219bd7',err);
			} else {
				raudrohi.ajax.pagecontrol.display_general_crash_message();
			} // else
		}
		try{
			self_public_.phone.call(a_phone_number,data,0);
		} catch (err2){
			if(debug) {
				raudrohi.tmg('34bb9e73-8676-401e-a03f-8390a0219bd7',err2);
			} else{
				raudrohi.ajax.pagecontrol.display_client_side_crash_message();
			}
		} // catch
	} // try_to_digest_response_text

	this.receive_response_text=function(response_text){
		try{
			try_to_digest_response_text(response_text);
		} catch (err){
			raudrohi.tmg('980a40c9-d098-4b67-a13f-8390a0219bd7',err);
		} // catch
	} // receive_response_text

}; // raudrohi.ajax.comm.formscript.receiver



//------------------------------------------------------------------------
//=========================================================================
//
// Application architecture specific components.
//
//=========================================================================

if(window.raudrohi_apparch1_exists!==true){
	window.raudrohi.apparch1={};
	window.raudrohi_apparch1_exists=true;
} // if
if(window.raudrohi_apparch1_ticket_exists!==true){
	window.raudrohi.apparch1.ticket={};
	window.raudrohi_apparch1_ticket_exists=true;
} // if
if(window.raudrohi_session_exists!==true){
	window.raudrohi.session={};
	window.raudrohi_session_exists=true;
} // if
//------------------------------------------------------------------------
//$n=1073741823;
raudrohi.apparch1.ticket.pool_inited=false;
raudrohi.apparch1.ticket.pool=function(){
	//var self_public_=this;
	var bucket_size_=20;
	var next_ticket_=1;
	raudrohi.apparch1.ticket.pool_inited=true;

	// The get_ticket_next() is supposed to make sure that
	// different threads get a different ticket_next_ value. Obviously
	// a correct solution would be some nonblocking ID generation, but,
	// JavaScript has its limitations.
	this.get_ticket=function(){
		try{
			var base=next_ticket_;
			next_ticket_=next_ticket_+bucket_size_;
			var x=base+raudrohi.base.rand(1, bucket_size_-2);
			return x;
		} catch (err){
			raudrohi.tmg('48c3c495-b07e-4743-b55e-e290a0219bd7',err);
		} // catch
	} // this.get_ticket
} // raudrohi.apparch1.ticket.pool


//------------------------------------------------------------------------
raudrohi.apparch1.serialize=function(data){
	try{
		if(!raudrohi_adapter_isString(data)){
			raudrohi.tmg('b7b25c2b-9184-465e-a45e-e290a0219bd7','');
		} // if
		var ticket='1';
		if(raudrohi.apparch1.ticket.pool_inited===true){
			// TODO: It's quite a mess. One should refactor
			// the logon page, namely logon page startup.
			ticket=raudrohi.apparch1.ticket.pool.get_ticket();
		} // if
		var s_session_id='raudrohi.session.id not yet set. '+
		'GUID=="75b58e09-93e5-495e-ac5e-e290a0219bd7"';
		if(!((raudrohi===null)||(raudrohi===undefined))){
			if(!((raudrohi.session===null)||(raudrohi.session===undefined))){
				if(!((raudrohi.session.id===null)||(raudrohi.session.id===undefined))){
					s_session_id=raudrohi.session.id;
				} // if
			} // if
		} // if
		var checksum_str=s_session_id+'_'+ticket+'_'+
		raudrohi.session.pwd_hash;//+'_'+data;
		// Either the JavaScript version or server side version of the hash
		// function has trouble processing the data. The result is that
		// hashes will be different and authentication fails. Leaving
		// the data out of the hash calculation introduces a vulnerability.
		// TODO: Fix it. A guess is that the PHP version of the
		// hash function does not handle UTF-8 correctly. After all, the
		// PHP5 side uses the mbstring extension for UTF-8 support and
		// the hash function is part of its core. One might try to fix this
		// by looking for some up-to-date implementation of the hash function.
		var checksum=sha256hash(checksum_str);
		var ht_packet=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
		ht_packet.put('session_id',s_session_id);
		ht_packet.put('ticket',ticket);
		ht_packet.put('checksum',checksum);
		ht_packet.put('data',data);
		var s_progfte=raudrohi.lang.ht2ProgFTE(ht_packet);
		raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_packet);
		return s_progfte;
	} catch (err){
		raudrohi.tmg('5c5c9f24-46a6-4b5d-925e-e290a0219bd7',err);
	} // catch
} // raudrohi.apparch1.serialize

//------------------------------------------------------------------------
raudrohi.apparch1.send2server=function(formscript_processor_name,
	return_call_phone_number, data){
	try{
		var s_progfte=raudrohi.apparch1.serialize(data);
		raudrohi.ajax.comm.formscript.send2server(formscript_processor_name,
			return_call_phone_number,s_progfte,
			raudrohi.settings.server_reception_URL);
	} catch (err){
		raudrohi.tmg('3c11c253-89ca-4de1-915e-e290a0219bd7',err);
	} // catch
} // raudrohi.apparch1.send2server


raudrohi.apparch1.send_logout_command_2_server_t1=function(){
	try{
		raudrohi.apparch1.send2server('ajax_logout','/dev/null','do_it|||');
	} catch (err){
		raudrohi.tmg('aedccc53-33c0-4a3e-b35e-e290a0219bd7',err);
	} // catch
} // raudrohi.apparch1.send_logout_command_2_server_t1
//------------------------------------------------------------------------
// The sole purpose of the raudrohi.apparch1.session_id_next_updater is to
// update the raudrohi.settings.session_id_next_lifetime at regular intervals.
//
// TODO: Figure out, what happens, if the log-in screen is stayed on
// for a considerable amount of time. Check the server side code, whether
// the actual session length is shortenend.
raudrohi.apparch1.session_id_next_updater=function(){
	var self_public_=this;
	this.phone=new raudrohi.lang.comm.phone('raudrohi.apparch1.session_id_next_updater');

	this.request_from_server=function(){
		try{
			raudrohi.ajax.comm.formscript.send2server('ajax_get_id_formscript',
				self_public_.phone.get_phone_number(), ' ',
				raudrohi.settings.server_reception_URL);
		} catch (err){
			raudrohi.tmg('95e48561-f582-4ad6-9a5e-e290a0219bd7',err);
		} // catch
	} // this.request_from_server

	function calculate_delay(){
		var min=10;
		if(raudrohi.settings.session_id_next_lifetime<min){
			raudrohi.tmg('29ab5772-4101-4f32-935e-e290a0219bd7',
				'raudrohi.settings.session_id_next_lifetime=='+
				raudrohi.settings.session_id_next_lifetime+'  < '+min);
		} // if
		var x=raudrohi.settings.session_id_next_lifetime-
		Math.floor(raudrohi.settings.session_id_next_lifetime/4);
		return x;
	} // calculate_delay()

	this.set_timer=function(){
		try{
			var x=calculate_delay();
			setTimeout('raudrohi.apparch1.session_id_next_updater.request_from_server();',
				x*1000);
			setTimeout('raudrohi.apparch1.session_id_next_updater.set_timer();',x*1000);
		// For example, JavaScript side computer might be disconnected
		// from the network or there can be a server blackout.
		// In this case the session id regular update won't work. This issue
		// is overcome by sending 'authentication failed' signal for
		// outdated session ids and by triggering a session id update
		// whenever the authentication fails.  This solution explains,
		// why the call to the set_timer() must be in this method as a timer
		// in stead of being just as a plain call within
		// the receive_phonecall(...) method.
		} catch (err){
			raudrohi.tmg('8add2924-0817-44af-935e-e290a0219bd7',err);
		} // catch
	} // set_timer
	self_public_.set_timer();

	this.phone.receive_phonecall=function(a_phonecall_instance){
		try{
			var a_pair=raudrohi.base.bisect(a_phonecall_instance.data, '|||');
			if(a_pair.a=='id_from_server'){
				var a_pair2=raudrohi.base.bisect(a_pair.b, '|||');
				raudrohi.settings.session_id_next=a_pair2.a;
			} // if id_from_server
		} catch (err){
			raudrohi.tmg('36928fbf-9ef0-497c-945e-e290a0219bd7',err);
		} // catch
	} // this.receive_phonecall
} // raudrohi.apparch1.session_id_next_updater

//------------------------------------------------------------------------
raudrohi.apparch1.hide_JavaScript_disabled_warning=function() {
	try{
		//throw "'46ba3d2c-09a8-48fc-b55e-e290a0219bd7','kaelkirjak'";
		raudrohi.adapter.editStyle('visible_if_javascript_disabled',
			'visibility','hidden');
		raudrohi.base.set_innerHTML('visible_if_javascript_disabled','');
		raudrohi.adapter.editStyle('visible_if_javascript_enabled',
			'visibility','visible');
	} catch (err){
		raudrohi.tmg('e9aaed02-9543-493f-924e-e290a0219bd7',err);
	} // catch
} // raudrohi.apparch1.hide_JavaScript_disabled_warning()

//------------------------------------------------------------------------
raudrohi.apparch1.global_javascript_init_t1=function(){
	try{
		if(!(window.onload_started===true)){
			throw "\n------------------------\n"+
			'The window.onload must be started before this function can be called.'+
			"\nGUID== dfd040cf-8239-45cb-845e-e984de10bf3d";
		} // if
		raudrohi.lang.phonebooth_dev_null=new raudrohi.lang.phonebooth_dev_null();
		raudrohi_settings_debug_JavaScript=raudrohi.core.str2bool(raudrohi.base.get_var('debug_JavaScript'));
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.adapter.YUI_create_console();
		} // if
		raudrohi.settings.debug_SERVERSIDE=raudrohi.core.str2bool(raudrohi.base.get_var('debug_SERVERSIDE'));
		raudrohi.settings.server_reception_URL=raudrohi.base.get_var('server_reception_url');
		raudrohi.settings.checksum_seed=raudrohi.base.get_var('javascript_side_checksum_seed');
		raudrohi.settings.ajax_request_timeout=raudrohi.base.get_var('javascript_side_ajax_timeout');
		raudrohi.settings.site_URL=raudrohi.base.get_var('site_URL');
		raudrohi.settings.session_id_next=raudrohi.base.get_var('initial_session_id');
		raudrohi.settings.session_id_next_lifetime=raudrohi.base.get_var('session_id_next_lifetime');
		raudrohi.apparch1.ticket.pool=new raudrohi.apparch1.ticket.pool();
		raudrohi.apparch1.session_id_next_updater=new raudrohi.apparch1.session_id_next_updater();
		raudrohi.lang.userinterface_text=new raudrohi.lang.userinterface_text();

		raudrohi.ajax.pagecontrol=new raudrohi.ajax.pagecontrol();
		raudrohi.ajax.comm.formscript.receiver=new raudrohi.ajax.comm.formscript.receiver();
		raudrohi.adapter.server_response_eventhandler=raudrohi.ajax.comm.formscript.receiver.receive_response_text;
	} catch (err){
		raudrohi.tmg('4f479892-b77e-4529-824e-e290a0219bd7',err);
	} // catch
} // raudrohi.apparch1.global_javascript_init_t1()

raudrohi.apparch1.global_javascript_init_light_t1=function(){
	try{
		if(!(window.onload_started===true)){
			throw "\n------------------------\n"+
			'The window.onload must be started before this function can be called.'+
			"\nGUID==47defb54-f2d4-4494-b8f3-b9d0e14d5bd0";
		} // if
		raudrohi_settings_debug_JavaScript=false;
		raudrohi.settings.debug_SERVERSIDE=false;
	} catch (err){
		raudrohi.tmg('3f90babe-3632-4877-814e-e290a0219bd7',err);
	} // catch
} // raudrohi.apparch1.global_javascript_init_light_t1

//------------------------------------------------------------------------

//------------------------------------------------------------------------
//=========================================================================

if(window.raudrohi_text_analysis_exists!==true){
	window.raudrohi.text_analysis={};
	window.raudrohi_text_analysis_exists=true;
} // if
if(window.raudrohi_text_analysis_selftests!==true){
	raudrohi.text_analysis.selftests={};
	window.raudrohi_text_analysis_selftests=true;
} // if

if(window.raudrohi_text_analysis_private_code_exists!==true){
	window.raudrohi.text_analysis.private_code={};
	window.raudrohi_text_analysis_private_code_exists=true;
} // if

//------------------------------------------------------------------------
raudrohi.text_analysis.private_code.input_verification_t1=function(ht_fields,
	s_for_analysis, s_field_name_suffix){
	try{
		raudrohi.base.assert_isObject(ht_fields, 'ht_fields',
			'5151e559-5ae8-4fa2-94e6-b280a0219bd7');
		raudrohi.base.assert_isString(s_for_analysis, 's_for_analysis',
			'57088223-5d1e-4037-93e6-b280a0219bd7');
		raudrohi.base.assert_isString(s_field_name_suffix,
			's_field_name_suffix','a741765a-80ae-4a42-a4e6-b280a0219bd7');
		var b=raudrohi.base.string_contains_spacestabs(s_field_name_suffix);
		if (b!==false){
			raudrohi.tmg('b810d740-de50-490d-a2e6-b280a0219bd7',
				's_field_name_suffix=="'+s_field_name_suffix+
				'" contains either spaces or tabs.');
		} // if
		if (s_field_name_suffix.length==0){
			raudrohi.tmg('a9b9b84c-d569-4f8b-a4e6-b280a0219bd7',
				's_field_name_suffix.length==0');
		} // if
	} catch (err){
		raudrohi.tmg('be2bc64c-84bf-48f5-93e6-b280a0219bd7',err);
	} // catch
} // raudrohi.text_analysis.private_code.input_verification_t1

raudrohi.text_analysis.is_empty_after_trimming=function(ht_fields,
	s_for_analysis, s_field_name_suffix){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.text_analysis.private_code.input_verification_t1(ht_fields,
				s_for_analysis, s_field_name_suffix);
		} // if
		var s=raudrohi.adapter.trim(s_for_analysis);
		var b=false;
		if (s.length===0){
			b=true;
		} // if
		s='b_string_is_empty_after_trimming_'+s_field_name_suffix;
		ht_fields.put(s,raudrohi.core.bool2str(b));
	} catch (err){
		raudrohi.tmg('38837416-5d24-4a5d-83e6-b280a0219bd7',err);
	} // catch
} // raudrohi.text_analysis.is_empty_after_trimming

raudrohi.text_analysis.is_empty=function(ht_fields,
	s_for_analysis,s_field_name_suffix){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.text_analysis.private_code.input_verification_t1(ht_fields,
				s_for_analysis, s_field_name_suffix);
		} // if
		var b=false;
		if (s_for_analysis.length===0){
			b=true;
		} // if
		var s='b_string_is_empty_'+s_field_name_suffix;
		ht_fields.put(s,raudrohi.core.bool2str(b));
	} catch (err){
		raudrohi.tmg('394d13d2-67a2-4c7d-a2e6-b280a0219bd7',err);
	} // catch
} // raudrohi.text_analysis.is_empty

raudrohi.text_analysis.is_floating_point_number_t1=function(ht_fields,
	s_for_analysis,s_field_name_suffix){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.text_analysis.private_code.input_verification_t1(ht_fields,
				s_for_analysis, s_field_name_suffix);
		} // if
		var s=null;
		var b=null;
		var ht=raudrohi.base.string2float(s_for_analysis);
		s='b_string_is_floating_point_number_t1_'+s_field_name_suffix;
		b=!(ht.get('b_failure'));
		ht_fields.put(s,raudrohi.core.bool2str(b));
		raudrohi.base.pool_of_hashtables.return_used_hashtable(ht);
	} catch (err){
		raudrohi.tmg('206da392-6b6d-4b5e-85e6-b280a0219bd7',err);
	} // catch
} // raudrohi.text_analysis.is_floating_point_number_t1

raudrohi.text_analysis.selftests.is_floating_point_number_t1=function(){
	try{
		var ht=new Hashtable();
		ht.put('test_passed','t');
		var ar_failed_tests=[];
		//---tests-start------------------
		var ht_fields=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
		var s_for_analysis=null;
		var s_field_name_suffix='fff';
		var s=null;
		s_for_analysis='44.45 ';
		raudrohi.text_analysis.is_floating_point_number_t1(ht_fields,
			s_for_analysis,s_field_name_suffix);
		s=ht_fields.get('b_string_is_floating_point_number_t1_fff');
		if(s!=='t'){
			ar_failed_tests.push('s_for_analysis=="'+s_for_analysis+
				'"  s=="'+s+'"');
		} // if

		ht_fields.clear();
		s_for_analysis='44.4a5 ';
		raudrohi.text_analysis.is_floating_point_number_t1(ht_fields,
			s_for_analysis,s_field_name_suffix);
		s=ht_fields.get('b_string_is_floating_point_number_t1_fff');
		if(s!=='f'){
			ar_failed_tests.push('s_for_analysis=="'+s_for_analysis+
				'"  s=="'+s+'"');
		} // if

		ht_fields.clear();
		s_for_analysis='44.45gg ';
		raudrohi.text_analysis.is_floating_point_number_t1(ht_fields,
			s_for_analysis,s_field_name_suffix);
		s=ht_fields.get('b_string_is_floating_point_number_t1_fff');
		if(s!=='f'){
			ar_failed_tests.push('s_for_analysis=="'+s_for_analysis+
				'"  s=="'+s+'"');
		} // if

		raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_fields);
		//---tests-end--------------------
		var x=ar_failed_tests.length; // FireFox 3.0.x bug workaround.
		if(0<x){
			ht.put('test_passed','f');
			ht.put('code_region_name','raudrohi.text_analysis.selftests.is_floating_point_number_t1');
			ht.put('ar_failed_tests',ar_failed_tests);
		} // if
		return ht;
	} catch (err){
		raudrohi.tmg('a8425b57-b9c0-4f88-83e6-b280a0219bd7',err);
	} // catch
} // raudrohi.text_analysis.selftests.is_floating_point_number_t1


//------------------------------------------------------------------------
//=========================================================================

raudrohi.date_and_time_instancecount=0;

// It's a singleton.
//
// One has to give credit to the http://www.timeanddate.com
// for time and date related documentation.
raudrohi.date_and_time=function(){
	try{
		raudrohi.date_and_time_instancecount=1+
		raudrohi.date_and_time_instancecount;
		if(1<raudrohi.date_and_time_instancecount){
			raudrohi.tmg('b44b6312-22b4-4843-8c53-0090a0219bd7',
				"Something is wrong, because the "+
				"raudrohi.date_and_time is supposed to be "+
				"a singleton, which gets instantiated automatically. ");
		} // if
		var self_public_=this;
		self_public_.selftests={};
		self_public_.debug={};
		self_public_.private_code={};

		//------------------------------------------------------
		function is_a_leap_year_prerequisite_1(i_year){
			try{
				var i_mod_4=i_year%4;
				if(0<i_mod_4){
					return false;
				} // if
				return true;
			} catch (err){
				raudrohi.tmg('5414ae15-bf15-4877-aa23-0090a0219bd7',err);
			} // catch
		} // is_a_leap_year_prerequisite_1

		// Returns a boolean value
		//
		// It's implementation is based on
		// http://www.timeanddate.com/date/leapyear.html
		this.is_a_leap_year=function(i_year){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isNumber(i_year,'i_year',
						'8217393a-5ac1-4448-8783-0090a0219bd7');
				} // if
				if(is_a_leap_year_prerequisite_1(i_year)===false){
					return false;
				} // if
				var b_out=true;
				var i_mod_100=i_year%100;
				if(i_mod_100===0){
					b_out=false;
					var i_mod_400=i_year%400;
					if(i_mod_400===0){
						b_out=true;
					} // if
				} // if
				return b_out;
			} catch (err){
				raudrohi.tmg('96a4c5a1-073a-4bfa-8553-0090a0219bd7',err);
			} // catch
		} // is_a_leap_year

		this.selftests.is_a_leap_year=function(){
			try{
				var ht=new Hashtable();
				ht.put('test_passed','t');
				var ar_failed_tests=[];
				//---tests-start------------------
				var i=0;
				var i_year;
				var ar_NOT_leap_years=[];
				ar_NOT_leap_years.push(1800);
				ar_NOT_leap_years.push(1900);
				ar_NOT_leap_years.push(2100);
				ar_NOT_leap_years.push(2200);
				ar_NOT_leap_years.push(2300);
				ar_NOT_leap_years.push(2500);
				var len=ar_NOT_leap_years.length;
				for(i=0;i<len;i++){
					i_year=ar_NOT_leap_years[i];
					if(raudrohi.date_and_time.is_a_leap_year(i_year)===true){
						ar_failed_tests.push('test NON-leapyears, '+
							'i_year=='+i_year+'');
					} // if
				} // for
				var ar_leap_years=[];
				ar_leap_years.push(2000);
				ar_leap_years.push(2008);
				len=ar_leap_years.length;
				for(i=0;i<len;i++){
					i_year=ar_leap_years[i];
					if(raudrohi.date_and_time.is_a_leap_year(i_year)===false){
						ar_failed_tests.push('test leapyears, '+
							'i_year=='+i_year+'');
					} // if
				} // for

				//---tests-end--------------------
				var x_FireFox_bug_workaround=ar_failed_tests.length;
				if(0<x_FireFox_bug_workaround){
					ht.put('test_passed','f');
					ht.put('code_region_name',
						'raudrohi.date_and_time.selftests.is_a_leap_year');
					ht.put('ar_failed_tests',ar_failed_tests);
				} // if
				return ht;
			} catch (err){
				raudrohi.tmg('483153a4-bce0-4443-b442-0090a0219bd7',err);
			} // catch
		} // selftests.is_a_leap_year

		//------------------------------------------------------
		this.number_of_days_in_year=function(i_year){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isNumber(i_year,'i_year',
						'129da972-ec99-46b3-9b32-0090a0219bd7');
				} // if
				var i_out=365;
				if(self_public_.is_a_leap_year(i_year)===true){
					i_out=366;
				} // if
				return i_out;
			} catch (err){
				raudrohi.tmg('d1eef323-f5e1-410a-bc42-0090a0219bd7',err);
			} // catch
		} // number_of_days_in_year

		//------------------------------------------------------
		// TODO: add a method that implements:
		// http://www.wikihow.com/Calculate-the-Day-of-the-Week

		//------------------------------------------------------
		var ht_number_of_days_in_a_months_cache_=new Hashtable();
		function number_of_days_in_a_month_init_cache(){
			try{
				// The long list here is simply for displaying
				// the pattern. The pattern helps to understand
				// the function that generates them automatically. :-)
				var ht=null;
				ht=new Hashtable();
				ht.put('1',31);
				ht.put('2',28);
				ht.put('3',31);
				ht.put('4',30);
				ht.put('5',31);
				ht.put('6',30);
				ht.put('7',31);
				ht.put('8',31);
				ht.put('9',30);
				ht.put('10',31);
				ht.put('11',30);
				ht.put('12',31);
				ht_number_of_days_in_a_months_cache_.put('2007',ht);
				ht=new Hashtable();
				ht.put('1',31);
				ht.put('2',29);
				ht.put('3',31);
				ht.put('4',30);
				ht.put('5',31);
				ht.put('6',30);
				ht.put('7',31);
				ht.put('8',31);
				ht.put('9',30);
				ht.put('10',31);
				ht.put('11',30);
				ht.put('12',31);
				ht_number_of_days_in_a_months_cache_.put('2008',ht);
				ht=new Hashtable();
				ht.put('1',31);
				ht.put('2',28);
				ht.put('3',31);
				ht.put('4',30);
				ht.put('5',31);
				ht.put('6',30);
				ht.put('7',31);
				ht.put('8',31);
				ht.put('9',30);
				ht.put('10',31);
				ht.put('11',30);
				ht.put('12',31);
				ht_number_of_days_in_a_months_cache_.put('2009',ht);
				ht=new Hashtable();
				ht.put('1',31);
				ht.put('2',28);
				ht.put('3',31);
				ht.put('4',30);
				ht.put('5',31);
				ht.put('6',30);
				ht.put('7',31);
				ht.put('8',31);
				ht.put('9',30);
				ht.put('10',31);
				ht.put('11',30);
				ht.put('12',31);
				ht_number_of_days_in_a_months_cache_.put('2010',ht);
			} catch (err){
				raudrohi.tmg('ed3784c4-a87a-4b58-a852-0090a0219bd7',err);
			} // catch
		} // number_of_days_in_a_month_init_cache
		number_of_days_in_a_month_init_cache();

		function number_of_days_in_months_by_calculation(i_year){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isNumber(i_year,'i_year',
						'f921bcea-52e9-48c5-a422-0090a0219bd7');
					if (i_year<1){
						raudrohi.tmg('7174e400-c4c8-4157-8f32-0090a0219bd7',
							"i_year=="+i_year);
					} // if
				} // if
				var ht=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
				ht.put('1',31);
				ht.put('2',28);
				if(self_public_.is_a_leap_year(i_year)===true){
					ht.put('2',29);
				} // if
				ht.put('3',31);
				ht.put('4',30);
				ht.put('5',31);
				ht.put('6',30);
				ht.put('7',31);
				ht.put('8',31);
				ht.put('9',30);
				ht.put('10',31);
				ht.put('11',30);
				ht.put('12',31);
				return ht;
			} catch (err){
				raudrohi.tmg('2748eb62-26e3-4810-9e32-0090a0219bd7',err);
			} // catch
		} // number_of_days_in_months_by_calculation

		var ht_number_of_days_in_months_ht_cloningfree_cache_=new Hashtable();
		var i_ht_number_of_days_in_months_ht_cloningfree_cache_max_size_=20;
		function number_of_days_in_months_ht_cloningfree(i_year){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isNumber(i_year,'i_year',
						'335e2e72-58a7-4c5f-a632-0090a0219bd7');
					if (i_year<1){
						raudrohi.tmg('fa963a02-4947-42c6-8f12-0090a0219bd7',
							"i_year=="+i_year);
					} // if
				} // if
				var s_year=""+i_year;
				var ht_out=null;
				if(ht_number_of_days_in_months_ht_cloningfree_cache_.containsKey(s_year)===true){
					ht_out=ht_number_of_days_in_months_ht_cloningfree_cache_.get(s_year);
				} else {
					ht_out=number_of_days_in_months_by_calculation(i_year);
				} // else
				if(ht_number_of_days_in_months_ht_cloningfree_cache_.size<i_ht_number_of_days_in_months_ht_cloningfree_cache_max_size_){
					ht_number_of_days_in_months_ht_cloningfree_cache_.put(s_year,ht_out);
				} // if
				return ht_out;
			} catch (err){
				raudrohi.tmg('70f65103-4030-48ea-a752-0090a0219bd7',err);
			} // catch
		} // number_of_days_in_months_ht_cloningfree

		this.number_of_days_in_months=function(i_year){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isNumber(i_year,'i_year',
						'69f4d854-4091-4021-be22-0090a0219bd7');
					if (i_year<1){
						raudrohi.tmg('642aeba5-dfc4-43fb-97f2-0090a0219bd7',
							"i_year=="+i_year);
					} // if
				} // if
				var ht_orig=number_of_days_in_months_ht_cloningfree(i_year);
				var ht_out=raudrohi.base.clone_hashtable(ht_orig);
				return ht_out;
			} catch (err){
				raudrohi.tmg('2951697f-3278-4da0-b612-0090a0219bd7',err);
			} // catch
		} // number_of_days_in_months

		var ht_number_of_days_in_a_month_cache1_=new Hashtable();
		var i_ht_number_of_days_in_a_month_cache1_max_size_=240;
		this.number_of_days_in_a_month=function(i_month,i_year){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isNumber(i_month,'i_month',
						'349d8a83-9c79-4425-8e41-0090a0219bd7');
					raudrohi.base.assert_isNumber(i_year,'i_year',
						'7498f223-f9b3-460e-b431-0090a0219bd7');
					if((i_month<1)||(12<i_month)){
						raudrohi.tmg('a3394361-1b16-49a2-b6e1-0090a0219bd7',
							"i_month=="+i_month);
					} // if
					if (i_year<1){
						raudrohi.tmg('37e222d3-61a6-4ef3-8251-0090a0219bd7',
							"i_year=="+i_year);
					} // if
				} // if
				var i_out=null;
				var s_year=""+i_year;
				var s_month=""+i_month;
				var s_key=s_year+"_"+s_month;
				if(ht_number_of_days_in_a_month_cache1_.containsKey(s_key)===true){
					i_out=ht_number_of_days_in_a_month_cache1_.get(s_key);
					return i_out;
				} // if
				var ht_months=number_of_days_in_months_ht_cloningfree(i_year);
				i_out=ht_months.get(s_month);
				if(ht_number_of_days_in_a_month_cache1_.size()<i_ht_number_of_days_in_a_month_cache1_max_size_){
					ht_number_of_days_in_a_month_cache1_.put(s_key,i_out);
				} // if
				return i_out;
			} catch (err){
				raudrohi.tmg('3bab25a4-08dd-48ff-9f41-0090a0219bd7',err);
			} // catch
		} // number_of_days_in_a_month

		//------------------------------------------------------
		// If it doesn't throw, it  returns a boolean value.
		this.date_is_contradictory=function(
			i_day,i_month,i_year,b_throw_if_contradiction_found){
			try{
				b_throw_if_contradiction_found = typeof(b_throw_if_contradiction_found) !== 'undefined' ? b_throw_if_contradiction_found : false;
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isNumber(i_day,'i_day',
						'1919a675-a4c8-4ce0-b321-0090a0219bd7');
					raudrohi.base.assert_isNumber(i_month,'i_month',
						'2ad08024-755d-4f6b-bf41-0090a0219bd7');
					raudrohi.base.assert_isNumber(i_year,'i_year',
						'468d5142-b800-4a40-a231-0090a0219bd7');
					raudrohi.base.assert_isBoolean(
						b_throw_if_contradiction_found,
						'b_throw_if_contradiction_found',
						'5ebfde81-74e3-445e-b241-0090a0219bd7');
				} // if
				var b_out=false;
				var s_msg=null;
				if((i_month<1)||(12<i_month)){
					b_out=true;
					s_msg="i_month=="+i_month;
				} // if
				if(b_out===false){
					if(i_day<1){
						b_out=true;
						s_msg="i_day=="+i_day+" < 1 ";
					} // if
				} // if
				if(b_out===false){
					var i_n_of_days_max=self_public_.number_of_days_in_a_month(
						i_month,i_year);
					if(i_n_of_days_max<i_day){
						b_out=true;
						s_msg="i_day=="+i_day+", but the maximum number of "+
						"days in "+i_month+"."+i_year+" is "+
						i_n_of_days_max+".";
					} // if
				} // if
				if (b_throw_if_contradiction_found===true){
					if (b_out===true){
						raudrohi.tmg('4c5114a1-74cf-4d31-a321-0090a0219bd7',
							""+s_msg);
					} // if
				} // if
				return b_out;
			} catch (err){
				raudrohi.tmg('4299cba1-85b2-4ed9-9e51-0090a0219bd7',err);
			} // catch
		} // date_is_contradictory

		// If it doesn't throw, it  returns a boolean value.
		this.hour_minute_second_is_contradictory=function(
			i_hour,i_minute,i_second,b_throw_if_contradiction_found){
			try{
				b_throw_if_contradiction_found = typeof(b_throw_if_contradiction_found) !== 'undefined' ? b_throw_if_contradiction_found : false;
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isNumber(i_hour,'i_hour',
						'765d39b2-1437-428f-8d40-0090a0219bd7');
					raudrohi.base.assert_isNumber(i_minute,'i_minute',
						'3ac24a73-1e9a-4191-a520-0090a0219bd7');
					raudrohi.base.assert_isNumber(i_second,'i_second',
						'3822663f-1b6d-44a4-a050-0090a0219bd7');
					raudrohi.base.assert_isBoolean(
						b_throw_if_contradiction_found,
						'b_throw_if_contradiction_found',
						'4819f561-ef5a-4fb6-b950-0090a0219bd7');
				} // if
				var b_out=false;
				var s_msg=null;
				if((i_hour<0)||(23<i_hour)){
					b_out=true;
					s_msg="i_hour=="+i_hour;
				} // if
				if(b_out===false){
					if((i_minute<0)||(59<i_minute)){
						b_out=true;
						s_msg="i_minute=="+i_minute;
					} // if
				} // if
				if(b_out===false){
					if((i_second<0)||(59<i_second)){
						b_out=true;
						s_msg="i_second=="+i_second;
					} // if
				} // if
				if (b_throw_if_contradiction_found===true){
					if (b_out===true){
						raudrohi.tmg('4711e922-42a6-4f6e-ab40-0090a0219bd7',
							""+s_msg);
					} // if
				} // if
				return b_out;
			} catch (err){
				raudrohi.tmg('c24cedec-b3ff-498a-a350-0090a0219bd7',err);
			} // catch
		} // hour_minute_second_is_contradictory

		//------------------------------------------------------
		// Returns a boolean value. If the
		// b_throw_if_contradiction_found==true, it throws, but the
		// default value for the  b_throw_if_contradiction_found is false.
		//
		// The ht_timestamp is expected to contain either string or
		// integer (or a mixture of strings and integers) values
		// for the following keys:
		// day,month,year,hour,minute,second,s_format,unix_time
		//
		// The domain of the s_format is {"human_perceivable","unix_time"}
		// If the s_format=="human_perceivable", then
		// the value of the unix_time
		// is not analyzed. If the s_format=="unix_time", the values
		// of the day,month,year,hour,minute,second are not analyzed.
		//
		// It checks that seconds, hours, minutes are not negative,
		// that hours are not greater than 23, etc. It also
		// checks, whether the given date actually exists, i.e.
		// 29.02.2007 is invalid, because 2007 is not a leap year,
		// but 29.02.2008 is valid, because 2008 is a leap year.
		this.timestamp_is_contradictory=function(ht_timestamp,
			b_throw_if_contradiction_found){
			try{
				b_throw_if_contradiction_found = typeof(b_throw_if_contradiction_found) !== 'undefined' ? b_throw_if_contradiction_found : false;
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isObject(ht_timestamp,'ht_timestamp',
						'10034c52-20ac-45cf-9310-0090a0219bd7');
					raudrohi.base.assert_isBoolean(
						b_throw_if_contradiction_found,
						'b_throw_if_contradiction_found',
						'41ee50f4-ff1b-4865-8c40-0090a0219bd7');
					var ar_keys=["day","month","year","hour","minute","second"];
					raudrohi.base.assert_keysExist(ht_timestamp,'ht_timestamp',
						ar_keys, '10fa8a03-de0e-4c35-b030-0090a0219bd7');
				} // if
				var b_out=false;
				var s_msg=null;
				var ht=ht_timestamp;
				var s_emptystring="";
				var s_format=ht.get("s_format");
				if(s_format==="unix_time"){
					var i_unix_time=parseInt(s_emptystring+ht.get("unix_time"),
						10);
					if(i_unix_time<0){
						b_out=true;
						s_msg="i_unix_time=="+i_unix_time+" < 0 ";
					} // if
				} // if
				if(s_format==="human_perceivable"){
					var i_year=parseInt(s_emptystring+ht.get("year"),10);
					var i_month=parseInt(s_emptystring+ht.get("month"),10);
					var i_day=parseInt(s_emptystring+ht.get("day"),10);
					var i_hour=parseInt(s_emptystring+ht.get("hour"),10);
					var i_minute=parseInt(s_emptystring+ht.get("minute"),10);
					var i_second=parseInt(s_emptystring+ht.get("second"),10);
					b_out=self_public_.hour_minute_second_is_contradictory(
						i_hour,i_minute,i_second,b_throw_if_contradiction_found);
					if(b_out===false){
						b_out=self_public_.date_is_contradictory(i_day,
							i_month,i_year,b_throw_if_contradiction_found);
					} // if
				} // if
				if (b_throw_if_contradiction_found===true){
					// This branch is for the unix_time version only.
					if (b_out===true){
						raudrohi.tmg('51357285-2567-4279-a010-0090a0219bd7',
							""+s_msg);
					} // if
				} // if
				return b_out;
			} catch (err){
				raudrohi.tmg('e338d4a6-cfc0-4b49-8d50-0090a0219bd7',err);
			} // catch
		} // timestamp_is_contradictory

		// Returns a modified clone of the hashtable, except that
		// the instances of the clone are not cloned.
		this.unix_time_2_human_perceivable=function(ht_timestamp){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isObject(ht_timestamp,'ht_timestamp',
						'b2950085-7112-4b25-965f-0090a0219bd7');
					self_public_.timestamp_is_contradictory(ht_timestamp,true);
				} // if
				var s_emptystring="";
				var s_format=ht_timestamp.get("s_format");
				var ht_out=raudrohi.base.clone_hashtable(ht_timestamp);
				if(s_format==="human_perceivable"){
					return ht_out;
				} // if
				if(s_format!="unix_time"){
					raudrohi.tmg('53480f18-2dfb-41ae-b94f-0090a0219bd7',
						"Something is wrong here. s_format==\""+s_format+"\".");
				} // if
				var i_unix_time=parseInt(s_emptystring+ht_timestamp.get("unix_time"),10);
				var i_milliseconds=1000*i_unix_time;
				var dt=new Date(i_milliseconds);
				ht_out.put('year',s_emptystring+dt.getFullYear());
				// A citation from
				// http://efreedom.com/Question/1-2908587/Javascript-Dateutc-Problem
				// The month parameter to Date.UTC() is 0-indexed;
				// January is 0, February is 1, etc.
				ht_out.put('month',s_emptystring+(dt.getMonth()+1));
				ht_out.put('day',s_emptystring+dt.getDate());
				ht_out.put('hour',s_emptystring+dt.getHours());
				ht_out.put('minute',s_emptystring+dt.getMinutes());
				ht_out.put('second',s_emptystring+dt.getSeconds());
				ht_out.put('s_format',"human_perceivable");
				return ht_out;
			} catch (err){
				raudrohi.tmg('35391ca1-794f-47ed-875f-0090a0219bd7',err);
			} // catch
		} // unix_time_2_human_perceivable


		// Returns a modified clone of the hashtable, except that
		// the instances of the clone are not cloned.
		this.human_perceivable_2_unix_time=function(ht_timestamp){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isObject(ht_timestamp,'ht_timestamp',
						'd5420eba-d2ba-4cd5-9a2f-0090a0219bd7');
					self_public_.timestamp_is_contradictory(ht_timestamp,true);
				} // if
				var s_emptystring="";
				var s_format=ht_timestamp.get("s_format");
				var ht_out=raudrohi.base.clone_hashtable(ht_timestamp);
				if(s_format==="unix_time"){
					return ht_out;
				} // if
				if(s_format!="human_perceivable"){
					raudrohi.tmg('3b752d15-34cc-436f-891f-0090a0219bd7',
						"Something is wrong here. s_format==\""+s_format+"\".");
				} // if
				var i_year=parseInt(s_emptystring+ht_timestamp.get('year'));
				var i_month=parseInt(s_emptystring+ht_timestamp.get('month'));
				var i_day=parseInt(s_emptystring+ht_timestamp.get('day'));
				var i_hour=parseInt(s_emptystring+ht_timestamp.get('hour'));
				var i_minute=parseInt(s_emptystring+ht_timestamp.get('minute'));
				var i_second=parseInt(s_emptystring+ht_timestamp.get('second'));
				// A citation from
				// http://efreedom.com/Question/1-2908587/Javascript-Dateutc-Problem
				// The month parameter to Date.UTC() is 0-indexed;
				// January is 0, February is 1, etc.
				var s_unix_time_milliseconds=s_emptystring+
				Date.UTC(i_year,(i_month-1),i_day,
					i_hour,i_minute,i_second,0);
				var s_unix_time=s_unix_time_milliseconds.substring(0,
					(s_unix_time_milliseconds.length-3));
				ht_out.put('unix_time',s_unix_time);
				ht_out.put('s_format',"unix_time");
				return ht_out;
			} catch (err){
				raudrohi.tmg('501e9b22-7e93-40fd-9a3f-0090a0219bd7',err);
			} // catch
		} // human_perceivable_2_unix_time


	} catch (err){
		raudrohi.tmg('418f6e15-1ff7-401f-9f3f-0090a0219bd7',err);
	} // catch
} // raudrohi.date_and_time
raudrohi.date_and_time=new raudrohi.date_and_time();

//------------------------------------------------------------------------


//------------------------------------------------------------------------
//=========================================================================


// Instances that want to use the functionality of a critical section
// should instantiate this class and have the instance of the
// raudrohi.critical_section_t1 as one of its private fields.
//
// In stead of using only on type of critical section,
// where only one thread can reside at a time regardless of what it
// does there, one can use 2 different types of critical sections.
// One of them is where for writing and reading and
// the another one is for reading only.
//
// The idea is that it's OK for multiple threads to
// use the data for reading, if there's no other trhead writing
// to the protected data. The reading should be withheld only,
// if the data is being written and writing should be withheld for both,
// writing and reading.
//
// The use of the 2 types of the critica sections reduces
// the wait-time (thread sleep time), but if thread sleeping is
// implemented by burning CPU-cycles, like it is in this case,
// it also saves CPU-cycles.(The problem with the
// sleeping is that as of 2011 the JavaScript does not have a
// thread-stopping sleep implementation.)
//
// The use of the reading-only critical sections in addtional to the
// one-thread-only critical section is partly inspired by the
// http://diwww.epfl.ch/researchlgl/research/omtt/thesis.html
//
// TODO: One should study, if the Banker's algorithm
// might be beneficial, increase the reliability, of the implementation.
raudrohi.critical_section_t1=function(){
	try{
		var self_public_=this;
		var mutexes_rw_={};
		//var mutexes_r_={}; // to be used, when the r mode is implemented

		// The critical_section_rw is the read-write type of
		// critical section.
		//
		// The unusual look of this function is due to the
		// fact that the only way to implement a thread-blocking
		// sleep() function in JavaScript is to burn CPU-cycles. As the
		// CPU-cycles are going to be burned anyway, one wants to
		// get as much useful stuff done with them as one can think of.
		//
		// The func_useful_precritical_initstuff is meant to contain
		// the various preparations that are done prior to entering the
		// critical section. It's guaranteed to be executed exactly once
		// and it is executed before entering the critical section.
		this.critical_section_rw=function(s_mutexname,
			func_useful_precritical_initstuff,
			func_the_critical_section){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isString(s_mutexname,
						's_mutexname',
						'4caa14c2-f8e4-45ec-b154-8090a0219bd7');
					raudrohi.base.assert_isFunction(func_useful_precritical_initstuff,
						'func_useful_precritical_initstuff',
						'4eef7121-2f25-4cec-8c14-8090a0219bd7');
					raudrohi.base.assert_isFunction(func_the_critical_section,
						'func_the_critical_section',
						'1ed77532-c3e5-452b-8b34-8090a0219bd7');
				} // if
				// The crazy name, i_in_tHe_criticAl_section99343, is
				// used in stead of just i to avoid overriding the
				// popular i.
				var i_in_tHe_criticAl_section99343=0;
				if(typeof(mutexes_rw_[s_mutexname]) === 'undefined'){
					mutexes_rw_[s_mutexname]=false;
				} // if
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isBoolean(
						mutexes_rw_[s_mutexname],
						'mutexes_['+s_mutexname+']',
						'4262d271-9acf-448b-b544-8090a0219bd7');
				} // if
				while(mutexes_rw_[s_mutexname]===true){
					if(i_in_tHe_criticAl_section99343===0){
						try{
							func_useful_precritical_initstuff();
						} catch (err){
							raudrohi.tmg('6449d649-8852-447b-8164-8090a0219bd7',err);
						} // catch
					} else {
						raudrohi.core.burnCPUcycles(10);
					} // else
					i_in_tHe_criticAl_section99343++;
				} // while
				mutexes_rw_[s_mutexname]=true;
				if(i_in_tHe_criticAl_section99343===0){
					try{
						func_useful_precritical_initstuff();
					} catch (err){
						raudrohi.tmg('17c6ba11-37f0-4c20-b514-8090a0219bd7',err);
					} // catch
				} // if
				try{
					func_the_critical_section();
				} catch (err){
					raudrohi.tmg('84fce861-f40f-4dde-8e53-8090a0219bd7',err);
				} // catch
				mutexes_rw_[s_mutexname]=false;
				return i_in_tHe_criticAl_section99343;
			} catch (err){
				raudrohi.tmg('8a410ecf-1ebb-4d5d-b913-8090a0219bd7',
					"s_mutexname=="+s_mutexname+"  "+err);
			} // catch
		} // critical_section_rw

		// This is the reading only version of the critical section.
		// The API is the same as in the case of the critical_section_rw,
		// but in this version of a critical section client code is
		// expected to only read the protected variables.
		//
		// TODO: implement it.
		this.critical_section_r=self_public_.critical_section_rw

	} catch (err){
		raudrohi.tmg('296ad135-d481-4fee-9843-8090a0219bd7',err);
	} // catch
} // raudrohi.critical_section_t1


//------------------------------------------------------------------------
//=========================================================================

//-------------------------------------------------------------------------
raudrohi.units_default_conversion_functions_instantiator=function(){
	try{
		var self_public_=this;

		function declr_funcs_density(ar_function_declarations){
			try{
				var ob_declaration={};

				// Units for Vim or Emacs based semiautomated editing:
				// 't/(m^3)'
				// 'kg/(m^3)'
				// 'kg/l'
				// 'g/l'
				// 'g/(cm^3)'
				// 'mg/l'
				// 'mg/(cm^3)'

				//-----
				ob_declaration={};
				ob_declaration.func=function(fd_origin_value){
					var fd_out=fd_origin_value*1000.0;
					return fd_out;
				};
				ob_declaration.s_origin_unit='t/(m^3)';
				ob_declaration.s_destination_unit='kg/(m^3)';
				ob_declaration.b_origin_unit_is_Si_unit=false;
				ob_declaration.b_destination_unit_is_Si_unit=true;
				ar_function_declarations.push(ob_declaration);

				//-----
				ob_declaration={};
				ob_declaration.func=function(fd_origin_value){
					var fd_out=fd_origin_value*1000.0;
					return fd_out;
				};
				ob_declaration.s_origin_unit='kg/l';
				ob_declaration.s_destination_unit='kg/(m^3)';
				ob_declaration.b_origin_unit_is_Si_unit=false;
				ob_declaration.b_destination_unit_is_Si_unit=true;
				ar_function_declarations.push(ob_declaration);

				//-----
				ob_declaration={};
				ob_declaration.func=function(fd_origin_value){
					var fd_out=fd_origin_value*1.0;
					return fd_out;
				};
				ob_declaration.s_origin_unit='g/l';
				ob_declaration.s_destination_unit='kg/(m^3)';
				ob_declaration.b_origin_unit_is_Si_unit=false;
				ob_declaration.b_destination_unit_is_Si_unit=true;
				ar_function_declarations.push(ob_declaration);

				//-----
				ob_declaration={};
				ob_declaration.func=function(fd_origin_value){
					var fd_out=fd_origin_value*1000.0;
					return fd_out;
				};
				ob_declaration.s_origin_unit='g/(cm^3)';
				ob_declaration.s_destination_unit='kg/(m^3)';
				ob_declaration.b_origin_unit_is_Si_unit=false;
				ob_declaration.b_destination_unit_is_Si_unit=true;
				ar_function_declarations.push(ob_declaration);

				//-----
				ob_declaration={};
				ob_declaration.func=function(fd_origin_value){
					var fd_out=fd_origin_value*0.001;
					return fd_out;
				};
				ob_declaration.s_origin_unit='mg/l';
				ob_declaration.s_destination_unit='kg/(m^3)';
				ob_declaration.b_origin_unit_is_Si_unit=false;
				ob_declaration.b_destination_unit_is_Si_unit=true;
				ar_function_declarations.push(ob_declaration);

				//-----
				ob_declaration={};
				ob_declaration.func=function(fd_origin_value){
					var fd_out=fd_origin_value*1.0;
					return fd_out;
				};
				ob_declaration.s_origin_unit='mg/(cm^3)';
				ob_declaration.s_destination_unit='kg/(m^3)';
				ob_declaration.b_origin_unit_is_Si_unit=false;
				ob_declaration.b_destination_unit_is_Si_unit=true;
				ar_function_declarations.push(ob_declaration);

				//----------------------

				//-----
				ob_declaration={};
				ob_declaration.func=function(fd_origin_value){
					var fd_out=fd_origin_value*0.001;
					return fd_out;
				};
				ob_declaration.s_origin_unit='kg/(m^3)';
				ob_declaration.s_destination_unit='t/(m^3)';
				ob_declaration.b_origin_unit_is_Si_unit=true;
				ob_declaration.b_destination_unit_is_Si_unit=false;
				ar_function_declarations.push(ob_declaration);

				//-----
				ob_declaration={};
				ob_declaration.func=function(fd_origin_value){
					var fd_out=fd_origin_value*0.001;
					return fd_out;
				};
				ob_declaration.s_origin_unit='kg/(m^3)';
				ob_declaration.s_destination_unit='kg/l';
				ob_declaration.b_origin_unit_is_Si_unit=true;
				ob_declaration.b_destination_unit_is_Si_unit=false;
				ar_function_declarations.push(ob_declaration);

				//-----
				ob_declaration={};
				ob_declaration.func=function(fd_origin_value){
					var fd_out=fd_origin_value*1.0;
					return fd_out;
				};
				ob_declaration.s_origin_unit='kg/(m^3)';
				ob_declaration.s_destination_unit='g/l';
				ob_declaration.b_origin_unit_is_Si_unit=true;
				ob_declaration.b_destination_unit_is_Si_unit=false;
				ar_function_declarations.push(ob_declaration);

				//-----
				ob_declaration={};
				ob_declaration.func=function(fd_origin_value){
					var fd_out=fd_origin_value*0.001;
					return fd_out;
				};
				ob_declaration.s_origin_unit='kg/(m^3)';
				ob_declaration.s_destination_unit='g/(cm^3)';
				ob_declaration.b_origin_unit_is_Si_unit=true;
				ob_declaration.b_destination_unit_is_Si_unit=false;
				ar_function_declarations.push(ob_declaration);

				//-----
				ob_declaration={};
				ob_declaration.func=function(fd_origin_value){
					var fd_out=fd_origin_value*1000.0;
					return fd_out;
				};
				ob_declaration.s_origin_unit='kg/(m^3)';
				ob_declaration.s_destination_unit='mg/l';
				ob_declaration.b_origin_unit_is_Si_unit=true;
				ob_declaration.b_destination_unit_is_Si_unit=false;
				ar_function_declarations.push(ob_declaration);

				//-----
				ob_declaration={};
				ob_declaration.func=function(fd_origin_value){
					var fd_out=fd_origin_value*1.0;
					return fd_out;
				};
				ob_declaration.s_origin_unit='kg/(m^3)';
				ob_declaration.s_destination_unit='mg/(cm^3)';
				ob_declaration.b_origin_unit_is_Si_unit=true;
				ob_declaration.b_destination_unit_is_Si_unit=false;
				ar_function_declarations.push(ob_declaration);

			} catch (err){
				raudrohi.tmg('3116ac34-ca1d-41aa-95b3-b3a241405dd7',err);
			} // catch
		} // declr_funcs_density

		//-----------------------------------------------------------------
		// Returns an array of all conversion function declarations that
		// are present in this instance. Declaration format:
		//
		// ob_declaration={};
		// ob_declaration.func=function(fd_origin_value){/*smart stuff*/};
		// ob_declaration.s_origin_unit='a string'
		// ob_declaration.s_destination_unit='a string'
		// ob_declaration.b_origin_unit_is_Si_unit=//true or false
		// ob_declaration.b_destination_unit_is_Si_unit=//true or false
		this.ar_get_all_default_function_declarations=function(){
			try{
				var ar_function_declarations=[];
				declr_funcs_density(ar_function_declarations);
				return ar_function_declarations;
			} catch (err){
				raudrohi.tmg('937fa78a-2ec7-4117-9bf1-b3a241405dd7',err);
			} // catch

		} // ar_get_all_default_function_declarations

	//---------------------------------------------------------------------
	} catch (err){
		raudrohi.tmg('d18ac56a-b4a9-424c-88d2-b3a241405dd7',err);
	} // catch
} // raudrohi.units_default_conversion_functions_instantiator


//-------------------------------------------------------------------------
// It handles unit conversion. It uses the same format that the
// Sirel PHP library uses.
//
// To comply with the fact that unit conversion functions
// are not always linear, the architecture of the unit
// conversion framework uses conversion functions in stead
// of conversion constants.
//
//
raudrohi.units=function(){
	try{
		var self_public_=this;
		var s_separ_='_|_sepArator_|_';

		// key==<unit name as string>, value==<Si unit name as string>
		var ht_unit_2_Si_=new Hashtable();

		var ht_conversion_funcs_=new Hashtable();
		//-----------------------------------------------------------------
		// Input data format:
		//
		// ob_declaration={};
		// ob_declaration.func=function(s_destination_unit,i_or_s_or_fd,s_origin_nunit){/*smart stuff*/};
		// ob_declaration.s_origin_unit='a string'
		// ob_declaration.s_destination_unit='a string'
		// ob_declaration.b_origin_unit_is_Si_unit=//true or false
		// ob_declaration.b_destination_unit_is_Si_unit=//true or false
		this.declare_conversion_function=function(ob_declaration){
			try{
				var func=ob_declaration.func;
				var s_origin_unit=ob_declaration.s_origin_unit;
				var s_destination_unit=ob_declaration.s_destination_unit;
				var b_origin_unit_is_Si_unit=ob_declaration.b_origin_unit_is_Si_unit;
				var b_destination_unit_is_Si_unit=ob_declaration.b_destination_unit_is_Si_unit;

				var s_key=s_origin_unit+s_separ_+s_destination_unit;
				ht_conversion_funcs_.put(s_key,func);

				if(b_destination_unit_is_Si_unit===true){
					ht_unit_2_Si_.put(s_destination_unit,s_destination_unit);
					ht_unit_2_Si_.put(s_origin_unit,s_destination_unit);
				} else {
					// The idea is that there's only one Si unit per
					// measure type, i.e. speed, mass, density, etc.
					if(b_origin_unit_is_Si_unit===true){
						ht_unit_2_Si_.put(s_origin_unit,s_origin_unit);
						ht_unit_2_Si_.put(s_destination_unit,s_origin_unit);
					} // if
				} // else
			} catch (err){
				raudrohi.tmg('a62f5359-11fc-4438-9c95-b3a241405dd7',err);
			} // catch

		} // declare_conversion_function

		function declare_default_conversion_functions(){
			try{
				var ob=new raudrohi.units_default_conversion_functions_instantiator();
				var ar_function_declarations=ob.ar_get_all_default_function_declarations();
				var i_len=ar_function_declarations.length;
				var i=0;
				var ob_declaration;
				for(i=0;i<i_len;i++){
					ob_declaration=ar_function_declarations[i];
					self_public_.declare_conversion_function(ob_declaration);
				} // for
			} catch (err){
				raudrohi.tmg('a725f965-92e4-494f-96fe-b3a241405dd7',err);
			} // catch
		} // declare_default_conversion_functions
		declare_default_conversion_functions();

		//-----------------------------------------------------------------
		// Returns a Si unit name as a string or null.
		this.s_unit_2_Si=function(s_unit_name){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isString(s_unit_name, 's_unit_name',
						'c685e6e1-dd30-4301-b571-b3a241405dd7');
				} // if
				var s_si_unit_name=null;
				if(ht_unit_2_Si_.containsKey(s_unit_name)){
					s_si_unit_name=ht_unit_2_Si_.get(s_unit_name)
				} // if
				return s_si_unit_name;
			} catch (err){
				raudrohi.tmg('d31aa959-66ef-45bd-97e4-b3a241405dd7',err);
			} // catch
		} // s_unit_2_Si

		//-----------------------------------------------------------------
		// Returns a floating point number or throws.
		this.fd_convert=function(s_destination_unit,i_or_s_or_fd,s_origin_unit){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isString(s_destination_unit,
						's_destination_unit',
						'1c5c8ae9-5ecf-4d53-ac3f-b3a241405dd7');
					raudrohi.base.assert_isString(s_origin_unit, 's_origin_unit',
						'b34c50ce-1a24-43a9-b211-b3a241405dd7');
				} // if
				var fd_in=raudrohi.base.to_fd(i_or_s_or_fd);
				var fd_out=fd_in;
				if(s_origin_unit===s_destination_unit){
					return fd_out;
				} // if
				var s_hop_func_key=s_origin_unit+s_separ_+s_destination_unit;
				var func=null;
				var b_doable_in_a_single_hop=ht_conversion_funcs_.containsKey(
					s_hop_func_key);
				if(b_doable_in_a_single_hop===true){
					func=ht_conversion_funcs_.get(s_hop_func_key);
					fd_out=func(fd_in);
				} else {
					// Try 2 hops through Si unit like that:
					// s_origin_unit --> <a Si unit> --> s_destination_unit
					if((!ht_unit_2_Si_.containsKey(s_origin_unit))===true){
						raudrohi.tmg('7a1575c9-4176-4530-a3b7-b3a241405dd7',
							'Direct conversion from '+
							s_origin_unit+' to '+s_destination_unit+
							' has not been declared and '+
							'there is no Si unit declared for '+
							s_origin_unit);
					} // if
					var s_Si_unit=ht_unit_2_Si_.get(s_origin_unit);
					s_hop_func_key=s_origin_unit+s_separ_+s_Si_unit;
					if((!ht_conversion_funcs_.containsKey(s_hop_func_key))===true){
						raudrohi.tmg('c4091dcc-088e-452e-98d4-b3a241405dd7',
							'Direct conversion from '+
							s_origin_unit+' to '+s_destination_unit+
							' has not been declared and a conversion '+
							' of the origin unit to its Si equivalent, '+
							s_Si_unit+' , has not been declared.');
					} // if
					func=ht_conversion_funcs_.get(s_hop_func_key);
					var fd_Si=func(fd_in);
					s_hop_func_key=s_Si_unit+s_separ_+s_destination_unit;
					if((!ht_conversion_funcs_.containsKey(s_hop_func_key))===true){
						raudrohi.tmg('f41ec727-c9bc-44dc-a7f1-b3a241405dd7',
							'Direct conversion from '+
							s_origin_unit+' to '+s_destination_unit+
							' has not been declared and a conversion from '+
							'the Si unit, '+s_Si_unit+' , to the '+
							s_destination_unit+' has not been declared.');
					} // if
					func=ht_conversion_funcs_.get(s_hop_func_key);
					fd_out=func(fd_Si);
				} // else
				return fd_out;
			} catch (err){
				raudrohi.tmg('b5d187f6-c2c0-4848-9af9-b3a241405dd7',err);
			} // catch
		} // fd_convert

		//-----------------------------------------------------------------
		// Converts a value to Si units.
		// Returns a floating point number or throws.
		this.fd_2_Si=function(i_or_s_or_fd,s_unit_name){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isString(s_unit_name, 's_unit_name',
						'9e2a26e0-5e15-4f40-9735-b3a241405dd7');
				} // if
				if((!ht_unit_2_Si_.containsKey(s_unit_name))===true){
					raudrohi.tmg('041d4ce7-4c31-4c15-8e87-b3a241405dd7',
						'There is no Si unit declared for unit '+s_unit_name);
				} // if
				var s_Si_unit=ht_unit_2_Si_.get(s_unit_name);
				var fd_out=self_public_.fd_convert(s_Si_unit,
					i_or_s_or_fd,s_unit_name);
				return fd_out;
			} catch (err){
				raudrohi.tmg('25e5a048-fc62-41c1-bad2-b3a241405dd7',err);
			} // catch
		} // fd_2_Si

	//---------------------------------------------------------------------
	} catch (err){
		raudrohi.tmg('0317835b-2e55-425c-9956-b3a241405dd7',err);
	} // catch
} // raudrohi.units
raudrohi.units=new raudrohi.units();

	//-------------------------------------------------------------------------
//=========================================================================
//
// The acronym VFX stands for Visual Effects.
// Thsi file contains widget independent code.
//
//-------------------------------------------------------------------------

if (window.raudrohi_vfx_exists !== true) {
    window.raudrohi.vfx = {};
    window.raudrohi_vfx_exists = true;
} // if
if (window.raudrohi_vfx_private_code_exists !== true) {
    window.raudrohi.vfx.private_code = {};
    window.raudrohi_vfx_private_code_exists = true;
} // if

//-------------------------------------------------------------------------
// The input is expected to be in a form of #xxxxxx, where the x is 
// is a hex digit. The output is an array of integers, where 
// ar[0]===<red>
// ar[1]===<green>
// ar[2]===<blue>
raudrohi.vfx.ar_html2rgb = function (s_html_color) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.lang.assert_is_an_HTML_color(s_html_color,
                's_html_color', '804c38fc-34ae-4b0a-b116-337010a0abd7');
        } // if
        var s_in = s_html_color.toLowerCase();
        var s_red = s_in.substring(1, 3);
        var s_green = s_in.substring(3, 5);
        var s_blue = s_in.substring(5, 7);
        var ar_out = [];
        ar_out.push(parseInt(s_red, 16));
        ar_out.push(parseInt(s_green, 16));
        ar_out.push(parseInt(s_blue, 16));
        return ar_out;
    } catch (err) {
        raudrohi.tmg('33bfe08e-e6e9-45c0-9316-337010a0abd7', err);
    } // catch
} // raudrohi.vfx.ar_html2rgb

//-------------------------------------------------------------------------
// The input is expected to be in a form of #xxxxxx, where the x is
// is a hex digit. The i_max_number_of_output_colors is inSet [2..int_max]
// ar_out[0] == s_html_color_start
// ar_out[ar_out.length-1] == s_html_color_end
//
// It's pretty expensive function, so You might like to
// consider using the raudrohi.cache.ht_color_gradients .
raudrohi.vfx.ar_interpolate_html_colors =
function (s_html_color_start, s_html_color_end, i_max_number_of_output_colors) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.lang.assert_is_an_HTML_color(s_html_color_start,
                's_html_color_start', '9caca124-07b3-4a6b-b216-337010a0abd7');
            raudrohi.lang.assert_is_an_HTML_color(s_html_color_end,
                's_html_color_end', '86081c48-c7ba-4e16-8516-337010a0abd7');
            raudrohi.base.assert_isNumber(i_max_number_of_output_colors,
                'i_max_number_of_output_colors',
                'c58d3547-f8ce-4604-8416-337010a0abd7');
        } // if
        if (i_max_number_of_output_colors < 2) {
            raudrohi.tmg('23c8c772-00e7-495b-8516-337010a0abd7',
                'i_max_number_of_output_colors == ' +
                i_max_number_of_output_colors + ' < 2 ');
        } // if
        var ar_rgb_start = raudrohi.vfx.ar_html2rgb(s_html_color_start);
        var ar_rgb_end = raudrohi.vfx.ar_html2rgb(s_html_color_end);
        //------
        var fd_1 = null;
        var b_use_integer_mode = true;
        var fd_min = null;
        var fd_max = null;
        // It could be that blue is "small" in the start color
        // and "big" in the end color while red is "big" in
        // the start color and "small" in the end color, i.e.
        // it may be that the intensity of one color increases
        // while the intensity of another colord decreases.
        var b_reverse = false;
        var i_maximum_number_of_intermittant_numbers = i_max_number_of_output_colors -
                                                       2;
        //------
        b_reverse = false;
        fd_min = ar_rgb_start[0];
        fd_max = ar_rgb_end[0];
        if (fd_max < fd_min) {
            fd_1 = fd_max;
            fd_max = fd_min;
            fd_min = fd_1;
            b_reverse = true;
        } // if
        var ar_reds_interp = raudrohi.lang.ar_interpolate(
            fd_min, fd_max, i_maximum_number_of_intermittant_numbers,
            b_use_integer_mode);
        if (b_reverse) {
            ar_reds_interp.reverse();
        } // if
        //------
        b_reverse = false;
        fd_min = ar_rgb_start[1];
        fd_max = ar_rgb_end[1];
        if (fd_max < fd_min) {
            fd_1 = fd_max;
            fd_max = fd_min;
            fd_min = fd_1;
            b_reverse = true;
        } // if
        var ar_greens_interp = raudrohi.lang.ar_interpolate(
            fd_min, fd_max, i_maximum_number_of_intermittant_numbers,
            b_use_integer_mode);
        if (b_reverse) {
            ar_greens_interp.reverse();
        } // if
        //------
        b_reverse = false;
        fd_min = ar_rgb_start[2];
        fd_max = ar_rgb_end[2];
        if (fd_max < fd_min) {
            fd_1 = fd_max;
            fd_max = fd_min;
            fd_min = fd_1;
            b_reverse = true;
        } // if
        var ar_blues_interp = raudrohi.lang.ar_interpolate(
            fd_min, fd_max, i_maximum_number_of_intermittant_numbers,
            b_use_integer_mode);
        if (b_reverse) {
            ar_blues_interp.reverse();
        } // if
        //------
        var s_lc_red = 'red';
        var s_lc_green = 'red';
        var s_lc_blue = 'blue';
        var ar_interpolation_ars = [];
        ar_interpolation_ars.push([ar_reds_interp.length, s_lc_red]);
        ar_interpolation_ars.push([ar_greens_interp.length, s_lc_green]);
        ar_interpolation_ars.push([ar_blues_interp.length, s_lc_blue]);
        ar_interpolation_ars.sort(function (a, b) { // descending
            return (a[0] <= b[0]);
        });
        var i_n_of_output_colors = (ar_interpolation_ars[0])[0];
        //------
        var ar_red = raudrohi.lang.ar_scale_number_of_frames(
            ar_reds_interp, i_n_of_output_colors);
        var ar_green = raudrohi.lang.ar_scale_number_of_frames(
            ar_greens_interp, i_n_of_output_colors);
        var ar_blue = raudrohi.lang.ar_scale_number_of_frames(
            ar_blues_interp, i_n_of_output_colors);
        //------
        var ar_out = [];
        var s_html_color = null;
        var s_lc_numsign = '#';
        var i = 0;
        var i_base = 16;
        var i_number_of_characters = 2;
        var s_red = null;
        var s_green = null;
        var s_blue = null;
        for (i = 0; i < i_n_of_output_colors; i++) {
            s_red = raudrohi.lang.s_num2s_with_leading_zero_normalization(
                ar_red[i], i_base, i_number_of_characters);
            s_green = raudrohi.lang.s_num2s_with_leading_zero_normalization(
                ar_green[i], i_base, i_number_of_characters);
            s_blue = raudrohi.lang.s_num2s_with_leading_zero_normalization(
                ar_blue[i], i_base, i_number_of_characters);
            s_html_color = s_lc_numsign + s_red + s_green + s_blue;
            ar_out.push(s_html_color);
        } // for
        return ar_out;
    } catch (err) {
        raudrohi.tmg('fa94fa19-5c50-4680-9216-337010a0abd7', err);
    } // catch
} // raudrohi.vfx.ar_interpolate_html_colors

//=========================================================================

//=========================================================================

if (window.raudrohi_widgets_exists !== true) {
    window.raudrohi.widgets = {};
    window.raudrohi_widgets_exists = true;
} // if
if (window.raudrohi_widgets_g1_exists !== true) {
    window.raudrohi.widgets.g1 = {};
    window.raudrohi_widgets_g1_exists = true;
} // if
if (window.raudrohi_widgets_g1_theme_exists !== true) {
    // The window.raudrohi.widgets.g1.theme
    // is for various style parameters and alike.
    window.raudrohi.widgets.g1.theme = {};
    window.raudrohi_widgets_g1_theme_exists = true;
} // if

if (window.raudrohi_widgets_g1_sys_exists !== true) {
    window.raudrohi.widgets.g1.sys = {}; // a namespace for non-client code
    window.raudrohi_widgets_g1_sys_exists = true;
} // if

//-------------------------------------------------------------------------

window.raudrohi.widgets.g1.theme.s_color_alert = '#A30808';
window.raudrohi.widgets.g1.theme.s_color_no = '#F75D16';
window.raudrohi.widgets.g1.theme.s_color_yes = '#24990C';

//-------------------------------------------------------------------------

// The true_if_update_DOM does not have any effect, if the
// true_if_unhide==true. The hashtable_of_widget_states is
// expected to contain instances of raudrohi.base.widget_state_bitfield.
// Widget phone numbers are expected to be the keys of the hashtable.
//
// The current system is such that the one can not call multiple
// "unhide" or "hide" calls without interlacing them.
raudrohi.widgets.g1.sys.hide_or_unhide_t2 =
function (ar_widgets, b_true_if_unhide, b_true_if_update_DOM,
    ht_widget_states) {
    if (raudrohi_settings_debug_JavaScript === true) {
        raudrohi.base.assert_isArray(ar_widgets, 'ar_widgets',
            '16580251-df25-4347-a916-63e2e0505dd7');
        raudrohi.base.assert_isBoolean(b_true_if_unhide, 'b_true_if_unhide',
            '938cf2a3-a6ac-462b-bd16-63e2e0505dd7');
        raudrohi.base.assert_isBoolean(b_true_if_update_DOM,
            'b_true_if_update_DOM',
            '15ef60c4-c753-45bc-b916-63e2e0505dd7');
        raudrohi.base.assert_isObject(ht_widget_states,
            'ht_widget_states', '52f18645-f983-4598-9c26-63e2e0505dd7');
        var arowdgl = ar_widgets.length; // A FireFox 3.0.x bug workaround.
        if (ht_widget_states.size() !== arowdgl) {
            raudrohi.tmg('f44efff4-09e3-4336-8846-63e2e0505dd7', ' ' +
                                                                 'ht_widget_states.size()(==' +
                                                                 ht_widget_states.size() +
                                                                 ')!==ar_widgets.length(==' +
                                                                 arowdgl +
                                                                 ').');
        } // ifs
    } // if
    try {
        var i_len = ar_widgets.length;
        var i = 0;
        var ob_widget;
        var elem_state;
        var widget_is_graphical = true;
        if (b_true_if_unhide === true) {
            for (i = 0; i < i_len; i++) {
                ob_widget = ar_widgets[i];
                widget_is_graphical = ob_widget.is_graphical_widget();
                if (widget_is_graphical === true) {
                    elem_state = ht_widget_states.get(
                        ob_widget.phone.get_phone_number());
                    if (elem_state.is_in_state_hidden === false) {
                        ob_widget.unhide();
                    } // if
                } // if
            } // for
        } else {
            for (i = 0; i < i_len; i++) {
                ob_widget = ar_widgets[i];
                widget_is_graphical = ob_widget.is_graphical_widget();
                if (widget_is_graphical === true) {
                    ob_widget.hide(b_true_if_update_DOM);
                } // if
            } // for
        } // else
    } catch (err) {
        var phn;
        try {
            phn = ob_widget.phone.get_phone_number();
        } catch (err) {
            phn = '';
        } // catch
        raudrohi.tmg('41760984-29d0-4b67-8416-63e2e0505dd7',
            'elem.phone.get_phone_number()==' + phn +
            ' ' + err);
    } // catch
}// raudrohi.widgets.g1.sys.hide_or_unhide_t2

//-------------------------------------------------------------------------

// Events like "on click", "focus", "blur", etc, are handled as
// if there were triggered by special keys on a keyboard. In the
// terminology they are called "virtual keys".
raudrohi.widgets.g1.sys.keylisteners_unit = function (owners_instance) {
    var self_public_ = this;
    try {
        var instance_public_ = owners_instance;
        var prc_ = instance_public_.private_code_;


        // key==key_number, value==<an eventhandler function instance>
        var ht_eventhandler_funcs_ = new Hashtable();

        // key==key_number   value==<key event handle>
        var ht_eventhandles_ = new Hashtable();

        function set_eventlistener(listenable_element_html_id,
            key_number_as_a_string, eventhandler_function) {
            try {
                var b_is_a_virtual_key = true;
                var s_event_name;
                switch (key_number_as_a_string) {
                    case 'raudrohi_virtual_key_focus':
                        s_event_name = 'focus';
                        break;
                    case 'raudrohi_virtual_key_blur':
                        s_event_name = 'blur';
                        break;
                    case 'raudrohi_virtual_key_click':
                        s_event_name = 'click';
                        break;
                    case 'raudrohi_virtual_key_mouseenter':
                        s_event_name = 'mouseenter';
                        break;
                    case 'raudrohi_virtual_key_mouseexit':
                        s_event_name = 'mouseleave';
                        break;
                    default:
                        b_is_a_virtual_key = false;
                        s_event_name = 'key';
                        if (raudrohi_settings_debug_JavaScript === true) {
                            var key_code_candidate = parseInt(key_number_as_a_string);
                            raudrohi.base.assert_isKeyeventKeyCode(
                                key_code_candidate, 'key_code_candidate',
                                '2f81cef2-58f0-477e-8a45-63e2e0505dd7');
                        } // if
                } // switch
                var eventhandle;
                if (b_is_a_virtual_key === true) {
                    eventhandle = raudrohi.adapter.addEventListner(
                        listenable_element_html_id, s_event_name,
                        eventhandler_function);
                } else {
                    eventhandle = raudrohi.adapter.set_keylistener(
                        listenable_element_html_id, key_number_as_a_string,
                        eventhandler_function);
                } // else
                return eventhandle;
            } catch (err) {
                raudrohi.tmg('48023761-9fb9-4ec0-9955-63e2e0505dd7', err);
            } // catch
        } // set_eventlistener


        // Due to a logical bug in the YUI 3 library, the
        // same key listener event handler function is not re-attachable
        // to a newly created DOM node that has the same HTML ID. This holds
        // even, if the _yuid attribute is restored. So, for that
        // reason, every time a widget gets un-hidden, the HTML element
        // that is being listened to, must have a slightly different ID. So,
        // temporary HTML-ids are used and the temporary ID-s are expected
        // to be generated by the widget that uses the HTML elements.
        this.add_keylistener =
        function (s_listenable_element_html_id, s_key_number_as_a_string,
            eventhandler_function) {
            // TODO: refactor it to use Ctrl keys, etc.
            // One only has to support key combinations, not keypress
            // series. Series are for some other level.
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_listenable_element_html_id,
                        's_listenable_element_html_id',
                        '01350270-27c9-441e-9165-63e2e0505dd7');
                    raudrohi.base.assert_isString(s_key_number_as_a_string,
                        's_key_number_as_a_string',
                        '48f636a4-7531-44a0-a555-63e2e0505dd7');
                    raudrohi.base.assert_isFunction(eventhandler_function,
                        'eventhandler_function',
                        '4e590ce5-e709-4dcb-9835-63e2e0505dd7');
                } // if
                if (ht_eventhandler_funcs_.containsKey(s_key_number_as_a_string)) {
                    self_public_.remove_keylistener(s_key_number_as_a_string);
                } // if
                ht_eventhandler_funcs_.put(s_key_number_as_a_string,
                    eventhandler_function);
                var eventhandle = set_eventlistener(s_listenable_element_html_id,
                    s_key_number_as_a_string, eventhandler_function);
                if (prc_.self_is_hidden_ === true) {
                    return;
                } // if
                ht_eventhandles_.put(s_key_number_as_a_string, eventhandle);
            } catch (err) {
                raudrohi.tmg('40112731-0183-4c5a-8245-63e2e0505dd7', err);
            } // catch
        } // add_keylistener

        this.remove_keylistener = function (s_key_number_as_a_string) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_key_number_as_a_string,
                        's_key_number_as_a_string',
                        '16a63e12-290a-4876-bd55-63e2e0505dd7');
                    switch (s_key_number_as_a_string) {
                        case 'raudrohi_virtual_key_focus':
                            break;
                        case 'raudrohi_virtual_key_blur':
                            break;
                        case 'raudrohi_virtual_key_click':
                            break;
                        case 'raudrohi_virtual_key_mouseenter':
                            break;
                        case 'raudrohi_virtual_key_mouseexit':
                            break;
                        default:
                            var key_code_candidate = parseInt(s_key_number_as_a_string);
                            raudrohi.base.assert_isKeyeventKeyCode(
                                key_code_candidate, 'key_code_candidate',
                                '44a03ac6-ec40-42a7-ac45-63e2e0505dd7');
                    } // switch
                } // if
                if (!ht_eventhandler_funcs_.containsKey(s_key_number_as_a_string)) {
                    return;
                } // if
                if (prc_.self_is_hidden_ === false) {
                    var eventhandle = ht_eventhandles_.get(
                        s_key_number_as_a_string);
                    raudrohi.adapter.remove_keylistener(eventhandle);
                } // if
                ht_eventhandler_funcs_.remove(s_key_number_as_a_string);
                ht_eventhandles_.remove(s_key_number_as_a_string);
            } catch (err) {
                raudrohi.tmg('3ed74101-0216-447b-8a15-63e2e0505dd7', err);
            } // catch
        } //  remove_keylistener

        // The method add_keylistener has a comment about the
        // listenable_element_html_id parameter.
        var listeners_attached_2_DOM_elements_ = false;
        this.attach_listeners2_DOM_elements =
        function (s_listenable_element_html_id) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_listenable_element_html_id,
                        's_listenable_element_html_id',
                        '220c3d73-4198-4b19-8324-63e2e0505dd7');
                    if (prc_.self_is_hidden_ === true) {
                        raudrohi.tmg('41392c24-9e7d-46b9-a214-63e2e0505dd7',
                            'If the widget is hidden, the DOM elements  ' +
                            'that the listeners must be attached to, ' +
                            'are expected to be missing from the DOM.');
                    } // if
                } // if
                if (listeners_attached_2_DOM_elements_) {
                    // If the widget's set_content method is called,
                    // one might need to rerender the widget, regardless
                    // of whather it is in readonly mode or editable mode, but
                    // if the widget is already visible, the listeners
                    // have already been attached to the GUI elements.
                    return;
                } // if
                var ar_keys = ht_eventhandler_funcs_.keys();
                var i_len = ar_keys.length;
                var eventhandler_function;
                var key_number_as_a_string;
                var eventhandle;
                for (var i = 0; i < i_len; i++) {
                    key_number_as_a_string = ar_keys[i];
                    eventhandler_function = ht_eventhandler_funcs_.get(
                        key_number_as_a_string);
                    eventhandle =
                    set_eventlistener(s_listenable_element_html_id,
                        key_number_as_a_string, eventhandler_function);
                    ht_eventhandles_.put(key_number_as_a_string, eventhandle);
                } // for
                listeners_attached_2_DOM_elements_ = true;
            } catch (err) {
                raudrohi.tmg('5044c073-03db-4e1b-8b44-63e2e0505dd7', err);
            } // catch
        } // attach_listeners2_DOM_elements

        this.detach_listeners_from_DOM_elements = function () {
            try {
                if (prc_.self_is_hidden_ === true) {
                    raudrohi.tmg('25dcf145-5753-4108-8954-63e2e0505dd7',
                        'If the widget is hidden, the DOM elements that the ' +
                        'listeners are expected to be attached to, are ' +
                        'expected to be missing from the DOM.');
                } // if
                if (!listeners_attached_2_DOM_elements_) {
                    // The reason, why it just returns from here in
                    // stead of throwing an exception for warning
                    // is that in the case of re-rendering the
                    // detachment has to be carried out, but there's
                    // nothing to detach, if the widget is being unhidden.
                    return;
                } // if
                var eventhandle;
                var ar_keys = ht_eventhandles_.keys();
                var i_len = ar_keys.length;
                var key;
                for (var i = 0; i < i_len; i++) {
                    key = ar_keys[i];
                    eventhandle = ht_eventhandles_.get(key);
                    raudrohi.adapter.remove_keylistener(eventhandle);
                } // for
                ht_eventhandles_.clear();
                listeners_attached_2_DOM_elements_ = false;
            } catch (err) {
                raudrohi.tmg('62a9d81c-f1b6-406f-a544-63e2e0505dd7', err);
            } // catch
        } // detach_listeners_from_DOM_elements

        // If the elements are gone from the DOM, there's no point of
        // keeping their records.
        this.remove_all_keylisteners = function () {
            try {
                var keys = ht_eventhandler_funcs_.keys();
                var len = keys.length;
                var key;
                for (var i = 0; i < len; i++) {
                    key = keys[i]
                    self_public_.remove_keylistener(key);
                } // for
            } catch (err) {
                raudrohi.tmg('a4226fc3-5633-485d-8034-63e2e0505dd7', err);
            } // catch
        } // remove_all_keylisteners

    } catch (err) {
        raudrohi.tmg('74daeeb7-bdbe-4b82-ba14-63e2e0505dd7', err);
    } // catch
} // raudrohi.widgets.g1.sys.keylisteners_unit

//-------------------------------------------------------------------------

// Currently the params_hashtable is not in use and is expected to be
// a random Hashtable, but it's there for future improvements. Namely,
// when the set of supported states is expanded by the
// startup_with_indication_request and shutdown_with_indication_request,
// then one needs to pass some data to this method.
raudrohi.widgets.g1.triggerTransition =
function (s_next_state_of_widget_B, s_next_state_of_widget_A,
    s_widget_B_phone_number, s_widget_A_phone_number, ht_params) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isString(s_next_state_of_widget_B,
                's_next_state_of_widget_B',
                '5d223a45-76bc-49a1-ab54-63e2e0505dd7');
            raudrohi.base.assert_isString(s_next_state_of_widget_A,
                's_next_state_of_widget_A',
                '944dfdb0-0877-4b10-ad14-63e2e0505dd7');
            raudrohi.base.assert_isString(s_widget_B_phone_number,
                's_widget_B_phone_number',
                '1f906405-e1b3-4675-a133-63e2e0505dd7');
            raudrohi.base.assert_isString(s_widget_A_phone_number,
                's_widget_A_phone_number',
                '91743f14-732d-4c89-a043-63e2e0505dd7');
            raudrohi.base.assert_isObject(ht_params,
                'ht_params', '53628dc2-0834-4ab5-a833-63e2e0505dd7');

            var ar_state_domain = raudrohi.base.commaseparated_list_2_array(
                'hide,unhide, shutdown, startup, resurrect');
            raudrohi.base.assert_isWithinDomain(s_next_state_of_widget_A,
                's_next_state_of_widget_A',
                '127c76f2-6a28-470b-b543-63e2e0505dd7',
                ar_state_domain);
            raudrohi.base.assert_isWithinDomain(s_next_state_of_widget_B,
                's_next_state_of_widget_B',
                'd5b29166-c099-44b0-9943-63e2e0505dd7',
                ar_state_domain);
            if (s_next_state_of_widget_A == 'hide') {
                raudrohi.base.assert_isWithinDomain(s_next_state_of_widget_B,
                    's_next_state_of_widget_B',
                    '5b5fec93-ae78-404b-9b43-63e2e0505dd7',
                    raudrohi.base.commaseparated_list_2_array(
                        'unhide, startup, resurrect'));
            } // if
        } // if
        var ht = new Hashtable();
        ht.put('destination_phone_number', s_widget_B_phone_number);
        ht.put('data_for_the_destination', s_next_state_of_widget_B + '|||');
        ht.put('binary_data_for_the_destination', 0);
        switch (s_next_state_of_widget_A) {
            case 'hide':
                raudrohi.lang.phonebooth_dev_null.phone.call(s_widget_A_phone_number,
                    'hide|||', 0);
                raudrohi.lang.phonebooth_dev_null.phone.call(s_widget_B_phone_number,
                    s_next_state_of_widget_B + '|||', 0);
                break;
            case 'shutdown':
                raudrohi.lang.phonebooth_dev_null.phone.call(s_widget_A_phone_number,
                    'shutdown_with_indication_request|||', ht);
                break;
            case 'startup':
                raudrohi.lang.phonebooth_dev_null.phone.call(s_widget_A_phone_number,
                    'startup_with_indication_request|||', ht);
                break;
            default:
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.tmg('1288f8b2-66ad-47fe-9213-63e2e0505dd7',
                        'There\'s no branching for s_next_state_of_widget_A(==' +
                        s_next_state_of_widget_A + ').');
                } // if
        } // switch
    } catch (err) {
        raudrohi.tmg('437ef0b4-a0b9-44ac-9a33-63e2e0505dd7', err +
                                                             "\n  s_next_state_of_widget_B==" +
                                                             s_next_state_of_widget_B +
                                                             "\n  s_next_state_of_widget_A==" +
                                                             s_next_state_of_widget_A +
                                                             "\n  s_widget_B_phone_number==" +
                                                             s_widget_B_phone_number +
                                                             "\n  s_widget_A_phone_number==" +
                                                             s_widget_A_phone_number);
    } // catch
} // raudrohi.widgets.g1.triggerTransition

//-------------------------------------------------------------------------

raudrohi.widgets.g1.sys.phonecall_receiver_tmg =
function (GUID, err, a_phonecall_instance) {
    var a_phonecall_instance_data = '';
    try {
        a_phonecall_instance_data = a_phonecall_instance.data;
    } catch (errr) {
    }
    if (a_phonecall_instance_data !== '') {
        err = err + ' a_phonecall_instance.data==' +
              a_phonecall_instance_data;
    } // if
    raudrohi.tmg(GUID, err);
} // raudrohi.widgets.g1.sys.phonecall_receiver_tmg


// It's assumed that the origin_hashtable consists of only
// raudrohi.base.widget_state_bitfield instances. The
// destination_hashtable is cleared prior to the copying operation.
// the elements are copyied by value, not by reference.
raudrohi.widgets.g1.sys.copy_ht_of_bitfields =
function (ht_destination, ht_origin) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isObject(ht_destination,
                'ht_destination',
                'b5f91d5d-8650-420e-8ef2-63e2e0505dd7');
            raudrohi.base.assert_isObject(ht_origin,
                'ht_origin', '457bffb1-3ec3-4ea4-ad32-63e2e0505dd7');
        } // if
        ht_destination.clear();
        var ar_keys = ht_origin.keys();
        var i_len = ar_keys.length;
        var key;
        var reference_to_the_value;
        var new_bitfield;
        for (var i = 0; i < i_len; i++) {
            key = ar_keys[i];
            reference_to_the_value = ht_origin.get(key);
            new_bitfield = new raudrohi.base.widget_state_bitfield();
            new_bitfield.is_in_state_startup =
            reference_to_the_value.is_in_state_startup;
            new_bitfield.is_in_state_hidden =
            reference_to_the_value.is_in_state_hidden;
            ht_destination.put(key, new_bitfield);
        } // for
    } catch (err) {
        raudrohi.tmg('7a3ae8f2-2373-48ca-b992-63e2e0505dd7', err);
    } // catch
} // raudrohi.widgets.g1.sys.copy_ht_of_bitfields

//-------------------------------------------------------------------------

raudrohi.widgets.g1.sys.change_state_2 = function (ar_widgets, s_state_name) {
    if (raudrohi_settings_debug_JavaScript === true) {
        raudrohi.base.assert_isArray(ar_widgets, 'ar_widgets',
            '92769f51-b09d-42c9-bde2-63e2e0505dd7');
        raudrohi.base.assert_isString(s_state_name, 's_state_name',
            '42f84967-94e0-43bb-9422-63e2e0505dd7');
    } // if
    try {
        var i_len = ar_widgets.length;
        var i = 0;
        var elem;
        for (i = 0; i < i_len; i++) {
            elem = ar_widgets[i];
            elem.state_switcher_.change_state_2(s_state_name);
        } // for
    } catch (err) {
        var phn;
        try {
            phn = elem.phone.get_phone_number();
        } catch (err) {
            phn = '';
        } // catch
        raudrohi.tmg('1a63a781-def3-4841-a132-63e2e0505dd7',
            'elem.phone.get_phone_number()==' + phn + ' ' + err);
    } // catch
}// change_state_2

//-------------------------------------------------------------------------

raudrohi.widgets.g1.sys.shutdown_t1 = function (ar_widgets) {
    var a_widget;
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isArray(ar_widgets, 'ar_widgets',
                'ede0d44e-48be-4443-8352-63e2e0505dd7');
        } // if
        var i_len = ar_widgets.length;
        var i = 0;
        for (i = 0; i < i_len; i++) {
            a_widget = ar_widgets[i];
            raudrohi.lang.phonebooth_dev_null.phone.call(
                a_widget.phone.get_phone_number(), 'shutdown|||', 0);
        } // for
    } catch (err) {
        var phn;
        try {
            phn = a_widget.phone.get_phone_number();
        } catch (err) {
            phn = '';
        } // catch
        raudrohi.tmg('24e18e12-e299-4dd7-8742-63e2e0505dd7',
            'a_widget.phone.get_phone_number()==' + phn + ' ' + err);
    } // catch
}// raudrohi.widgets.g1.sys.shutdown_t1

//-------------------------------------------------------------------------

raudrohi.widgets.g1.sys.startup_t1 = function (ar_widgets, ht_widget_states) {
    if (raudrohi_settings_debug_JavaScript === true) {
        raudrohi.base.assert_isArray(ar_widgets, 'ar_widgets',
            '27837d71-4f01-4a8e-8431-63e2e0505dd7');
        raudrohi.base.assert_isObject(ht_widget_states,
            'ht_widget_states',
            'fc3a7d86-348d-4493-b541-63e2e0505dd7');
        var i_arowdgl = ar_widgets.length;// A FireFox 3.0.x bug workaround.
        if (ht_widget_states.size() !== i_arowdgl) {
            raudrohi.tmg('28152721-e5bb-4a47-ae31-63e2e0505dd7', err + ' ' +
                                                                 'ht_widget_states.size()(==' +
                                                                 ht_widget_states.size() +
                                                                 ')!==ar_widgets.length(==' +
                                                                 i_arowdgl +
                                                                 ').');
        } // if
    } // if
    var ob_widget;
    var phn;
    try {
        var i_len = ar_widgets.length;
        var i = 0;
        var elem_state;
        for (i = 0; i < i_len; i++) {
            ob_widget = ar_widgets[i];
            phn = ob_widget.phone.get_phone_number()
            elem_state = ht_widget_states.get(phn);
            if (elem_state.is_in_state_startup) {
                raudrohi.lang.phonebooth_dev_null.phone.call(
                    phn, 'startup|||', 0);
            } // if
        } // for
    } catch (err) {
        try {
            phn = ob_widget.phone.get_phone_number();
        } catch (err) {
            phn = '';
        } // catch
        raudrohi.tmg('96921ca9-04aa-4aec-a211-63e2e0505dd7',
            'ob_widget.phone.get_phone_number()==' + phn + ' Error message:' +
            err);
    } // catch
}// raudrohi.widgets.g1.sys.startup_t1

//-------------------------------------------------------------------------

// ht_microsessions.key == <microsession name>
// ht_microsessions.value == <microsession id>
raudrohi.widgets.g1.sys.close_microsessions_t1 = function (ht_microsessions) {
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_isObject(ht_microsessions,
                'ht_microsessions',
                'd4b0ab4b-ab3f-41c0-b551-63e2e0505dd7');
        } // if
        var ar_keys = ht_microsessions.keys();
        var i_len = ar_keys.length;
        var i = 0;
        var s_microsession_name;
        for (i = 0; i < i_len; i++) {
            s_microsession_name = ar_keys[i];
            ht_microsessions.put(s_microsession_name, (-1));
        } // for
    } catch (err) {
        raudrohi.tmg('95014327-9ec9-4343-96c1-63e2e0505dd7', err);
    } // catch
} // raudrohi.widgets.g1.sys.close_microsessions_t1

//=========================================================================
//=========================================================================

//-------------------------------------------------------------------------
// The raudrohi.widgets.g1.pileofmethods_t1 is not a widget itself, but
// it is a field that every widget in the namespace
// raudrohi.widgets.g1 has.
//
// The code of the raudrohi.widgets.g1.pileofmethods_t1
// can be roughly seen as a collection of the following 3 parts:
//
// 1) Widgets framework code that either the widget developers,
//    or any widget client code, should ever call.
//
// 2) Methods that will be automatically attached to
//    every widget instance (in here the variable
//    instance_public_) as public methods of the widget.
//
// 3) Methods that are meant to be called only from widget
//    code, i.e. API that is meant only for widget developers.
//    (In here all of that code is stored to variable prc_.)
//
// Hooks that the widget provides to its client code are 
// located within instance namespace instance_public_.wg_hooks_
//
// TODO: The usage of the instance_public_ and prc_ is currently
//       a bit mixed, inconsistent. One has to clean it up to make
//       a clear distinction.
//
raudrohi.widgets.g1.pileofmethods_t1 =
function (instance_public, s_phonenumber_prefix, s_html_id) {
    var pileofmethods_t1_ = this;
    try {

        // One of the reasons, why one doesn't just use the JavaScript built-in
        // prototype property for the methods that are declared to
        // be part of the instance_public_, is that the methods are
        // instance specific closures, because they need access to
        // instance specific private fields, of which the "standard ones"
        // are encapsulated to the raudrohi.widgets.g1.pileofmethods_t1.
        var instance_public_ = instance_public;

        instance_public_.only_for_raudrohi_core_developers = {};
        instance_public_.private_code_ = {};
        instance_public_.wg_hooks_ = {};
        instance_public_.private_code_.selfread = {};
        var prc_ = instance_public_.private_code_;
        prc_.html_id_ = s_html_id;
        instance_public_.private_code_.evh_ = {};
        instance_public_.private_code_.func = {};
        instance_public_.thrjr_ = {};
        var b_selfread_wrap_2_alignment_cache_is_out_of_date_ = true;

        var lc_s_emptystring = raudrohi_glc_s_emptystring;
        var lc_s_linebreak = raudrohi_glc_s_linebreak;

        try {
            prc_.customizable = {};
            prc_.customizable.optional = {};
            prc_.customizable.compulsory = {};
            prc_.usable_only_in_critical_section = {};
            prc_.startup_shutdown_handler_ =
            new raudrohi.lang.startup_shutdown_handler(instance_public_);
            prc_.self_is_hidden_ = true;
            prc_.self_is_graphical_widget_ = true;
            prc_.content_ = '';
            prc_.content_set_ = true; // true due to buttons and a like
            prc_.ar_widgets_ = [];
            prc_.containers_html_cached_ = false;
            prc_.alignment1_ = 'center';
            instance_public_.only_for_raudrohi_core_developers.s_widget_architecture_class =
            'g1';
            instance_public_.only_for_raudrohi_core_developers.ht_microsessions_ =
            raudrohi.base.pool_of_hashtables.get_empty_hashtable();
            instance_public_.only_for_raudrohi_core_developers.ht_microsessions_cnt_ =
            1;
            // The instance_public_.only_for_raudrohi_core_developers.ht_microsessions_queue_ is used for emptying
            // the instance_public_.only_for_raudrohi_core_developers.ht_microsessions_. Otherwise there would be a "memory leak".
            instance_public_.only_for_raudrohi_core_developers.ht_microsessions_queue_ =
            new raudrohi.lang.htQueue();
            prc_.microsession_dismiss_all_in_progress_ = false;

            prc_.customizable.compulsory.render_readonly = function () {
            };
            prc_.customizable.compulsory.render_editable = function () {
            };
            prc_.ht_widgets_conserved_states_ = new Hashtable();
            prc_.ht_widgets_conserved_states_default_ = new Hashtable();
            prc_.customizable.optional.create_subwidgets = function () {
            };
            prc_.customizable.optional.startup_hook = function () {
            };
            prc_.customizable.optional.shutdown_hook = function () {
            };
            instance_public_.state_switcher_ =
            new raudrohi.base.state_switcher_t1();
            instance_public_.change_state_2 =
            instance_public_.state_switcher_.change_state_2;
            instance_public_.is_running = function () {
                try {
                    var b = false;
                    b = prc_.startup_shutdown_handler_.machine_is_running();
                    return b;
                } catch (err) {
                    raudrohi.tmg('31ff4f5f-c486-4a09-940f-13202011abd7', err);
                } // catch
            }

            //-------------------------------------------------------------
            // TODO: Refactor the direct use of the
            // s_field_name_in_parent out by replacing the
            // assignments and readings with the getter-setter
            // methods. (That includes code generation templates.)
            instance_public_.s_field_name_in_parent = "not_set";

            instance_public_.set_field_name_in_parent =
            function (s_field_name_in_parent) {
                try {
                    if (raudrohi_settings_debug_JavaScript === true) {
                        raudrohi.base.assert_isString(s_field_name_in_parent,
                            's_field_name_in_parent',
                            '6b15a35a-e68f-4c8c-810f-13202011abd7');
                    } // if

                    instance_public_.s_field_name_in_parent = "" +
                                                              s_field_name_in_parent;
                } catch (err) {
                    raudrohi.tmg('fd29ba56-3425-4774-a30f-13202011abd7', err);
                } // catch
            } // set_s_field_name_in_parent

            instance_public_.s_get_field_name_in_parent = function () {
                try {
                    var s_out = "" + instance_public_.s_field_name_in_parent;
                    return s_out;
                } catch (err) {
                    raudrohi.tmg('57c60953-05fb-43ba-a10f-13202011abd7', err);
                } // catch
            } // s_get_field_name_in_parent

            //-------------------------------------------------------------
            prc_.widgets_created_ = false;
            prc_.container_id_ = prc_.html_id_ + '_div';
            prc_.containers_html_cached_ = false;
            prc_.containers_html_cache_ = null;
            prc_.bitfield_ = new raudrohi.base.bitfield_htbased();

            prc_.is_readonly_ = false;

            // As long as the widget stays visible and editable, i.e. not
            // readonly, the browser maintains the widget state and there's no
            // need to call the prc_.customizable.optional.content_from_GUI_2_vars. One should
            // also avoid writing the raudrohi.base.normalize_linebreaks
            // result back to the JavaScript GUI, because if a person wants
            // to do Copy/Paste by using its own platform, i.e. MacOS or Windows,
            // the line-breaks should be consistently local within different
            // applications. For instance, a linebreak in FireFox should also
            // be a linebreak in Microsoft Word, etc.
            //
            // This function does not need to be recursive, because the
            // excursiveness is already handled by the Raudrohi framework.
            prc_.customizable.optional.content_from_GUI_2_vars = function () {
            }

            prc_.set_config_hook =
            function (config_field_name, config_field_value) {
            };
            prc_.parent_instance_ = null; // Parent widget's instance.
            prc_.loginpage_phone_number_ = null;
            instance_public_.phone = new raudrohi.lang.comm.phone(
                s_phonenumber_prefix + s_html_id);
        } catch (err) {
            raudrohi.tmg('e4a4214a-a287-48dd-920f-13202011abd7', err);
        } // catch

        var ob_critical_section_impl_ = new raudrohi.critical_section_t1();
        prc_.critical_section_rw =
        ob_critical_section_impl_.critical_section_rw;
        prc_.critical_section_r = ob_critical_section_impl_.critical_section_r;

        instance_public_.only_for_raudrohi_core_developers.content_from_GUI_2_vars_recursive =
        function () {
            try {
                if (prc_.self_is_hidden_ === true) {
                    return;
                } // if
                prc_.customizable.optional.content_from_GUI_2_vars();
                var len = prc_.ar_widgets_.length;
                var i = 0;
                var elem;
                for (i = 0; i < len; i++) {
                    elem = prc_.ar_widgets_[i];
                    try {
                        elem.only_for_raudrohi_core_developers.content_from_GUI_2_vars_recursive();
                    } catch (err) {
                        raudrohi.tmg('a5c8f9ca-586d-4a1f-860f-13202011abd7',
                            err);
                    } // catch
                } // for
            }
            catch (err) {
                raudrohi.tmg('2c66d032-5f0a-4fdc-b4fe-13202011abd7', err);
            } // catch
        } // instance_public_.only_for_raudrohi_core_developer.content_from_GUI_2_vars_recursive

        prc_.assert_stateExists = function (state_name) {
            try {
                raudrohi.base.assert_isString(state_name, 'state_name',
                    '59e40663-ed92-4d68-a2fe-13202011abd7');
                if (instance_public_.state_switcher_.state_exists(state_name) !==
                    true) {
                    raudrohi.tmg('332a9052-7b7d-4e77-95fe-13202011abd7',
                        'State ' + state_name +
                        ' does not exist in the local state_switcher.');
                } // if
            } catch (err) {
                raudrohi.tmg('84736896-96c6-4e17-88fe-13202011abd7', err);
            } // catch
        } // prc_.assert_stateExists


        prc_.customizable.optional.hide_prefixhook =
        function (true_if_update_DOM) {
        }
        prc_.customizable.optional.hide_suffixhook =
        function (true_if_update_DOM) {
        }

        // The parameter true_if_update_DOM exists for efficiency and
        // comes handy, when dealing with compound widgets, i.e.
        // widgets that contain other widgets. The idea is that for
        // speed one wants to minimize the amount of DOM redactions,
        // by deleting a whole branch of the DOM (the compound widget)
        // at once.
        instance_public_.hide = function (true_if_update_DOM) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isBoolean(true_if_update_DOM,
                        'true_if_update_DOM',
                        'b2670e2f-7815-4ad8-b287-6230a0218bd7');
                } // if
                if (prc_.self_is_graphical_widget_ !== true) {
                    return;
                } // if
                if (prc_.self_is_hidden_) {
                    return;
                } // if
                prc_.customizable.optional.hide_prefixhook(true_if_update_DOM);
                gahter_inner_widgets_states();
                instance_public_.only_for_raudrohi_core_developers.content_from_GUI_2_vars_recursive();
                raudrohi.widgets.g1.sys.hide_or_unhide_t2(prc_.ar_widgets_,
                    false, true_if_update_DOM,
                    prc_.ht_widgets_conserved_states_);
                raudrohi.adapter.editStyle(prc_.container_id_, 'visibility',
                    'hidden');
                if (true_if_update_DOM) {
                    raudrohi.base.set_innerHTML(prc_.container_id_, '');
                } // if
                prc_.self_is_hidden_ = true;
                prc_.customizable.optional.hide_suffixhook(true_if_update_DOM);
            } catch (err) {
                raudrohi.tmg('1922c355-82a8-480e-97fe-13202011abd7',
                    'prc_.container_id_==' + prc_.container_id_ + '  ' + err);
            } // catch
        } // hide

        instance_public_.unhide = function () {
            try {
                if (prc_.self_is_graphical_widget_ !== true) {
                    return;
                } // if
                // It's important that the re-rendering of visible elements
                // is allowed. For instance, buttons have to be rerendered,
                // right after their label has been changed.
                if ((prc_.startup_shutdown_handler_.machine_is_running()) ===
                    false) {
                    return;
                } // if
                raudrohi.adapter.editStyle(prc_.container_id_,
                    'visibility', 'visible');
                init_ht_widgets_conserved_states_if_necceccary();
                if (prc_.self_is_hidden_ === false) {
                    if (prc_.keylisteners_unit_inited_) {
                        prc_.keylisteners_unit_.detach_listeners_from_DOM_elements();
                    } // if
                    var i_pfawl = prc_.ar_widgets_.length; //A FireFox 3.0.x bug workaround.
                    if (0 < i_pfawl) {
                        var b_true_if_unhide = false;
                        // The "hiding" and "unhiding" operations have
                        // to be interlaced. Hence the hiding here.
                        try {
                            raudrohi.widgets.g1.sys.hide_or_unhide_t2(prc_.ar_widgets_,
                                b_true_if_unhide, false,
                                prc_.ht_widgets_conserved_states_);
                        } catch (err) {
                            raudrohi.tmg('c39e4612-3bf4-45b8-92fe-13202011abd7',
                                err);
                        } // catch
                    } // if
                } // if
                // One has to keep in mind that the parent widget's
                // containers have to exist in the DOM
                // before the child widgets can be rendered.
                //
                // The prc_.customizable.compulsory.render_readonly and the prc_.customizable.compulsory.render_editable
                // are expected to create the parent widget's, i.e. self's,
                // containers and mark the visibility of the child widgets.
                //
                // However, as the parent widget's rendering routine may blatantly
                // overwrite the graphical part of the child widgets. That explains,
                // why the GUI values need to be saved prior to rendering.
                // The GUI values gathering part withstands hidden widgets and
                // non-graphical widgets.
                try {
                    // A citation from,
                    // http://groups.google.com/group/mozilla.dev.apps.firefox/browse_thread/thread/f8cc24edaa11a39a/7fb2722db5eed77a?lnk=gst&q=martin+vahi#7fb2722db5eed77a
                    //
                    //---citation--start---
                    // Boris Zbarsky   Feb 22, 9:48 pm
                    // On 2/22/11 1:11 PM, Martin_Vahi wrote:
                    // > Thank You for Your answer.
                    // > It seems that I got it all wrong and I have to study the ECMAScript
                    // > standard, which I will do.
                    // > Thank You for educating me. :-)
                    //
                    //
                    // This isn't covered in the ECMAScript standard, for what it's worth.
                    // That standard doesn't cover anything about threading at all.
                    // The fact that web-exposed JavaScript has only one thread with
                    // run-to-completion semantics is a de-facto aspect of that particular
                    // embedding, not a fundamental fact about ECMAScript.
                    // -Boris
                    //---citation--end-----
                    //
                    if (prc_.is_readonly_ === true) {
                        prc_.customizable.compulsory.render_readonly();
                    } else {
                        prc_.customizable.compulsory.render_editable();
                    } // else
                } catch (err) {
                    raudrohi.tmg('0da66e15-92a2-457d-95fe-13202011abd7', err);
                } // catch
                try {
                    raudrohi.widgets.g1.sys.hide_or_unhide_t2(prc_.ar_widgets_,
                        true, true, prc_.ht_widgets_conserved_states_);
                } catch (err0) {
                    raudrohi.tmg('55293756-1ca5-4d12-93fe-13202011abd7', err0);
                } // catch
                prc_.self_is_hidden_ = false;
            } catch (err) {
                raudrohi.tmg('488a0865-f0ce-416f-91fe-13202011abd7',
                    "\ninstance_public_.unhide," +
                    "\ninstance_public_.phone.get_phone_number()==" +
                    instance_public_.phone.get_phone_number() +
                    "\nprc_.container_id_==" + prc_.container_id_ + "\n" + err);
            } // catch
        } // unhide


        instance_public_.get_widget_state = function () {
            try {
                var widget_state = new raudrohi.base.widget_state_bitfield();
                widget_state.is_in_state_startup =
                prc_.startup_shutdown_handler_.machine_is_running();
                widget_state.is_in_state_hidden = prc_.self_is_hidden_;
                return widget_state;
            } catch (err) {
                raudrohi.tmg('18866a44-fd5d-4524-84ee-13202011abd7',
                    'prc_.container_id_==' + prc_.container_id_ + '  ' + err);
            } // catch
        } // get_widget_state

        instance_public_.get_widget_html_id = function () {
            try {
                var s_out = '' + prc_.html_id_;
                return s_out;
            } catch (err) {
                raudrohi.tmg('1b7dbc4b-ccbf-45e7-a3ee-13202011abd7',
                    'prc_.container_id_==' + prc_.container_id_ + '  ' + err);
            } // catch
        } // get_widget_html_id

        instance_public_.set_config =
        function (config_field_name, config_field_value) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(config_field_name,
                        'config_field_name',
                        '3be07233-2567-4fbd-a4ee-13202011abd7');
                    raudrohi.base.assert_isNotnull(config_field_value,
                        'config_field_value',
                        '40b9954d-0ff9-462e-a1ee-13202011abd7');
                } // if
                if (raudrohi_adapter_isBoolean(config_field_value)) {
                    if (config_field_value) {
                        prc_.bitfield_.set(config_field_name);
                    } else {
                        prc_.bitfield_.unset(config_field_name);
                    } // else
                } else {
                    prc_.bitfield_.set_with_attachment(config_field_name,
                        config_field_value);
                } // else
                prc_.set_config_hook(config_field_name, config_field_value);
            } catch (err) {
                raudrohi.tmg('5cebbd55-0169-46fb-a3ee-13202011abd7',
                    'prc_.container_id_==' + prc_.container_id_ + '  ' + err);
            } // catch
        } // set_config

        instance_public_.only_for_raudrohi_core_developers.set_parent_instance =
        function (an_instance_or_null) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    if (an_instance_or_null !== null) {
                        raudrohi.base.assert_isObject(an_instance_or_null,
                            'an_instance_or_null',
                            '191cf05f-539b-4b3b-a3ee-13202011abd7');
                    } // if
                } // if
                prc_.parent_instance_ = an_instance_or_null;
            }
            catch (err) {
                raudrohi.tmg('48214e64-8a8f-476f-a2ee-13202011abd7', err);
            } // catch
        } // only_for_raudrohi_core_developers.set_parent_instance

        prc_.customizable.optional.from_readonly_to_editable_prefixhook =
        function () {
        }
        prc_.customizable.optional.set_readonly_suffixhook =
        function (true_if_readonly) {
        }

        // The readonly-state matters only if the widget is
        // visible/rendered.
        // The readonly state of subwidgets is expected to
        // be set at widgets' over-riding instance
        // of the rendering functions, the
        //  prc_.customizable.compulsory.render_readonly
        //  prc_.customizable.compulsory.render_editable
        instance_public_.set_readonly = function (b_true_if_readonly) {
            try {
                if (prc_.self_is_graphical_widget_ !== true) {
                    // The readonly state is a graphical phenomena.
                    return;
                } // if
                if (prc_.is_readonly_ === b_true_if_readonly) {
                    return;
                } // if
                if (prc_.startup_shutdown_handler_.machine_is_running() ===
                    true) {
                    prc_.customizable.optional.from_readonly_to_editable_prefixhook();
                    if (prc_.self_is_hidden_ === false) {
                        if (prc_.is_readonly_ === false) {
                            instance_public_.only_for_raudrohi_core_developers.content_from_GUI_2_vars_recursive();
                        } // if
                    } // if
                } // if
                prc_.containers_html_cached_ = false;
                // The prc_.is_readonly_ has to be set before the unhide,
                // so that the proper rendering(readonly/editable) can be
                // chosen within the unhiding method.
                prc_.is_readonly_ = b_true_if_readonly;
                // It is very important that the parent widget
                // creates its containers before the sibling widgets
                // start to render themselves.
                if (prc_.self_is_hidden_ === false) {
                    instance_public_.unhide();
                } // if
                var len = prc_.ar_widgets_.length;
                var i = 0;
                var elem;
                for (i = 0; i < len; i++) {
                    elem = prc_.ar_widgets_[i];
                    try {
                        elem.set_readonly(b_true_if_readonly);
                    } catch (err) {
                        raudrohi.tmg('5ab3a87a-d756-4964-a5ee-13202011abd7',
                            err);
                    } // catch
                } // for
                prc_.customizable.optional.set_readonly_suffixhook(b_true_if_readonly);
            } catch (err) {
                raudrohi.tmg('9c196fc9-4f99-487b-a7de-13202011abd7', err);
            } // catch
        } // set_readonly

        instance_public_.is_readonly = function () {
            return prc_.is_readonly_;
        } // is_readonly

        instance_public_.is_hidden = function () {
            return prc_.self_is_hidden_;
        } // is_hidden

        // Returns false for widgets that do not have a graphical
        // representation.
        instance_public_.is_graphical_widget = function () {
            return prc_.self_is_graphical_widget_;
        } // is_graphical_widget

        instance_public_.reset_container_id = function (new_container_id) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(new_container_id,
                        'new_container_id',
                        '0acc1c41-eaff-4a7f-94de-13202011abd7');
                } // if
                prc_.containers_html_cached_ = false;
                // The assignment of the prc_.container_id_ is
                // doubled due to a FireFox (IceWeasel) 3.0.6 bug workaround.
                if (prc_.self_is_hidden_ === false) {
                    instance_public_.hide();
                    prc_.container_id_ = new_container_id;
                    instance_public_.unhide();
                } else {
                    prc_.container_id_ = new_container_id;
                } // else

                return;
            } catch (err) {
                raudrohi.tmg('53da4980-d0c5-45e8-b1de-13202011abd7', err);
            } // catch
        } // instance_public_.reset_container_id

        // Returns a boolean.
        instance_public_.content_is_set = function () {
            try {
                if (prc_.content_set_ === false) {
                    return false;
                } // if
                // Idea is that the state of sub-widgets can
                // change, for instance, they might be downloading
                // things or have faulty input by the user.
                var b = true;
                var len = prc_.ar_widgets_.length;
                var i = 0;
                var elem;
                for (i = 0; i < len; i++) {
                    elem = prc_.ar_widgets_[i];
                    b = b && elem.content_is_set();
                } // for
                prc_.content_set_ = b;
                return b;
            } catch (err) {
                raudrohi.tmg('2b732b01-d1bc-4c22-b1de-13202011abd7', err);
            } // catch
        } // content_is_set

        prc_.keylisteners_unit_inited_ = false;
        instance_public_.set_keylistener =
        function (key_number_as_string, event_handler_func) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(key_number_as_string,
                        'key_number_as_string',
                        'ff1a2f18-952f-480c-92de-13202011abd7');
                    raudrohi.base.assert_isFunction(event_handler_func,
                        'event_handler_func',
                        '72e27804-a659-4400-84de-13202011abd7');
                } // if
                if (!prc_.keylisteners_unit_inited_) {
                    prc_.keylisteners_unit_ =
                    new raudrohi.widgets.g1.sys.keylisteners_unit(instance_public_);
                    prc_.keylisteners_unit_inited_ = true;
                } // if
                prc_.keylisteners_unit_.add_keylistener(prc_.html_id_,
                    key_number_as_string, event_handler_func);
            }
            catch (err) {
                raudrohi.tmg('92e93131-d7da-4d4d-82de-13202011abd7', err);
            } // catch
        } // set_keylistener

        instance_public_.remove_keylistener = function (key_number) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(key_number, 'key_number',
                        '634c614b-0495-4aeb-a3de-13202011abd7');
                } // if
                if (!prc_.keylisteners_unit_inited_) {
                    return;
                } // if
                prc_.keylisteners_unit_.remove_keylistener(key_number);
            }
            catch (err) {
                raudrohi.tmg('e147b905-d4ff-4138-b1ce-13202011abd7', err);
            } // catch
        } // remove_keylistener

        instance_public_.remove_all_keylisteners = function () {
            try {
                if (prc_.keylisteners_unit_inited_) {
                    prc_.keylisteners_unit_.remove_all_keylisteners();
                } // if
            } catch (err) {
                raudrohi.tmg('3af09617-2198-4324-a3ce-13202011abd7', err);
            } // catch
        } // remove_all_keylisteners

        // Never call the widget_startup_sequence() directly. Always use the
        // instance_public_.startup_sequence_init instead.  The widget_startup_sequence()
        // is meant only for the raudrohi.lang.startup_shutdown_handler
        instance_public_.only_for_raudrohi_core_developers.widget_startup_sequence =
        function () {
            try {
                if (prc_.startup_shutdown_handler_.hook_startup_started() ===
                    true) {
                    return;
                } // if
                if (prc_.widgets_created_ !== true) {
                    prc_.customizable.optional.create_subwidgets();
                    prc_.widgets_created_ = true;
                }
                else {
                    raudrohi.widgets.g1.sys.startup_t1(prc_.ar_widgets_,
                        prc_.ht_widgets_conserved_states_default_);
                } // else
                prc_.customizable.optional.startup_hook();
                instance_public_.hide(false);
                prc_.startup_shutdown_handler_.hook_startup_complete();
            } catch (err) {
                raudrohi.tmg('178ca8e3-a8bd-4823-9ace-13202011abd7', err);
            } // catch
        } // instance_public_.only_for_raudrohi_core_developers.widget_startup_sequence

        instance_public_.startup_sequence_init = function () {
            try {
                prc_.startup_shutdown_handler_.startbutton_pushed()
            }
            catch (err) {
                raudrohi.tmg('8b4f6133-60a6-4934-83ce-13202011abd7', err);
            } // catch
        } // instance_public_.startup_sequence_init

        // alignment values={north,south,east,west,northeast,northwest,
        // southeast,southwest, center}
        instance_public_.set_alignment =
        function (alignment_as_a_cardinal_point) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(alignment_as_a_cardinal_point,
                        'alignment_as_a_cardinal_point',
                        '5e8cdcd7-a84b-48c1-b4ce-13202011abd7');
                    raudrohi.widgetless_ui.func.assert_alignment_value(
                        alignment_as_a_cardinal_point);
                } // if
                if (alignment_as_a_cardinal_point == prc_.alignment1_) {
                    return;
                } // if
                prc_.alignment1_ = alignment_as_a_cardinal_point;
                b_selfread_wrap_2_alignment_cache_is_out_of_date_ = true;
                prc_.containers_html_cached_ = false;
                if (prc_.self_is_hidden_ === false) {
                    instance_public_.unhide();
                } // if
            }
            catch (err) {
                raudrohi.tmg('1a24c247-82d6-4102-b5ce-13202011abd7', err);
            } // catch
        } // instance_public_.set_alignment

        // Never call the widget_shutdown_sequence() directly. Always use the
        // instance_public_.shutdown_sequence_init instead.
        // The widget_shutdown_sequence()
        // is meant only for the raudrohi.lang.startup_shutdown_handler
        instance_public_.only_for_raudrohi_core_developers.widget_shutdown_sequence =
        function () {
            try {
                if (prc_.startup_shutdown_handler_.hook_shutdown_started() ===
                    true) {
                    return;
                } // if
                instance_public_.state_switcher_.change_state_2('zero');
                raudrohi.widgets.g1.sys.change_state_2(prc_.ar_widgets_,
                    'zero');
                instance_public_.hide(true);
                prc_.customizable.optional.shutdown_hook();
                raudrohi.widgets.g1.sys.shutdown_t1(prc_.ar_widgets_);
                if (0 < prc_.ht_widgets_conserved_states_default_.size()) {
                    // Comment resides next to the
                    //init_ht_widgets_conserved_states_if_necceccary();
                    raudrohi.widgets.g1.sys.copy_ht_of_bitfields(
                        prc_.ht_widgets_conserved_states_,
                        prc_.ht_widgets_conserved_states_default_);
                } // if
                raudrohi.widgets.g1.sys.close_microsessions_t1(instance_public_.only_for_raudrohi_core_developers.ht_microsessions_);
                prc_.startup_shutdown_handler_.hook_shutdown_complete();
            } catch (err) {
                raudrohi.tmg('8b2bcf44-408c-4fa3-93ce-13202011abd7', err);
            } // catch
        } // instance_public_.only_for_raudrohi_core_developers.widget_shutdown_sequence

        instance_public_.shutdown_sequence_init = function () {
            try {
                prc_.startup_shutdown_handler_.stopbutton_pushed();
            } catch (err) {
                raudrohi.tmg('88ef9849-25cc-4bfa-b5ce-13202011abd7', err);
            } // catch
        } // instance_public_.shutdown_sequence_init

        //-----------------------------------------------------------
        instance_public_.thrjr_.threadjumper_ricochet_detector =
        function (ht_wrapper) {
            if (raudrohi_settings_debug_JavaScript === true) {
                raudrohi.tmg('ed05fd2a-4285-4321-95be-13202011abd7',
                    'One should never reach this place.');
            } // if
        } // thrjr_.threadjumper_ricochet_detector
        // Closely associated with the display_message_t3.
        instance_public_.thrjr_.display_message_thrjr = function (ht_wrapper) {
            // The reason, why the name is "display_message_thrjr"
            // in stead of "display_message", is that it has to
            // coexist with the old, "default message displayer" system.
            // After the message passing system has been updated to the
            // threadjumper version, the standard phonecall catchers
            // can be modified and the name can be refactored out.
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht_wrapper, 'ht_wrapper',
                        '1c47c9f4-0b05-43fe-84be-13202011abd7');
                } // if
                var ht_data = ht_wrapper.get('data');
                var msg = ht_data.get('msg');
                raudrohi.base.assert_isString(msg, 'msg',
                    'd27b702d-91a8-4bda-a3be-13202011abd7');
                instance_public_.display_message(msg);
                raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_data);
                raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_wrapper);
            } catch (err) {
                raudrohi.tmg('4d4fecd2-ef72-4ce5-acbe-13202011abd7', err);
            } // catch
        } // instance_public_.thrjr_.display_message


        //-----------------------------------------------------------
        function gahter_inner_widgets_states() {
            try {
                prc_.ht_widgets_conserved_states_.clear();
                var len = prc_.ar_widgets_.length;
                var i = 0;
                var a_widget;
                for (i = 0; i < len; i++) {
                    a_widget = prc_.ar_widgets_[i];
                    prc_.ht_widgets_conserved_states_.put(
                        a_widget.phone.get_phone_number(),
                        a_widget.get_widget_state());
                } // for
            } catch (err) {
                raudrohi.tmg('49f85a73-894c-4a7f-92be-13202011abd7',
                    'prc_.container_id_==' + prc_.container_id_ + '  ' + err);
            } // catch
        } // gahter_inner_widgets_states
        prc_.register_subwidget = function (a_widget,
            s_default_visibility_after_the_parent_widget_has_been_unhidden) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(a_widget, 'a_widget',
                        '24b6f6b2-f92d-4968-b5be-13202011abd7');
                    raudrohi.base.assert_isString(
                        s_default_visibility_after_the_parent_widget_has_been_unhidden,
                        's_default_visibility_after_the_parent_widget_has_been_unhidden',
                        '0a9ca331-a079-46e7-b2be-13202011abd7');
                    var dbg_widget_state = a_widget.get_widget_state();
                    if (dbg_widget_state.is_in_state_hidden === false) {
                        if (prc_.self_is_hidden_ !== false) {
                            raudrohi.tmg('84716a4b-8e27-49b3-b3be-13202011abd7',
                                'One tried to register a subwidget to a ' +
                                'hidden parent, while the subwidget is in visible ' +
                                'state. This can\'t be done, because ' +
                                'the parent widget has to create the ' +
                                'DOM-tree node containers to all of ' +
                                'its subwidgets. ');
                        } // if
                    } // if
                } // if
                var widget_state = a_widget.get_widget_state();
                switch (s_default_visibility_after_the_parent_widget_has_been_unhidden) {
                    case 'hidden':
                        widget_state.is_in_state_hidden = true;
                        break;
                    case 'visible':
                        widget_state.is_in_state_hidden = false;
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript === true) {
                            raudrohi.tmg(
                                '7f36f355-6be9-4b50-a4ae-13202011abd7',
                                'There\'s no branching for default_visibility_' +
                                'after_the_parent_widget_has_been_unhidden(==' +
                                s_default_visibility_after_the_parent_widget_has_been_unhidden +
                                ').');
                        } // if
                } // switch
                a_widget.only_for_raudrohi_core_developers.set_parent_instance(instance_public_);
                prc_.ar_widgets_.push(a_widget);
                prc_.ht_widgets_conserved_states_default_.put(
                    a_widget.phone.get_phone_number(), widget_state);
                instance_public_.state_switcher_.register_subwidget(a_widget);
            } catch (err) {
                raudrohi.tmg('0cecad1e-ddea-495e-94ae-13202011abd7',
                    'prc_.container_id_==' + prc_.container_id_ + '  ' + err);
            } // catch
        } // prc_.register_subwidget

        var unregister_all_subwidgets_in_progress_ = false;
        prc_.unregister_all_subwidgets = function () {
            try {
                if (unregister_all_subwidgets_in_progress_ === true) {
                    return;
                } // if
                unregister_all_subwidgets_in_progress_ = true;
                if (raudrohi_settings_debug_JavaScript === true) {
                } // if
                if (prc_.self_is_hidden_ !== true) {
                    var len = prc_.ar_widgets_.length;
                    var i = 0;
                    var elem;
                    for (i = 0; i < len; i++) {
                        elem = prc_.ar_widgets_[i];
                        elem.hide(true);
                        elem.only_for_raudrohi_core_developers.set_parent_instance(null);
                    } // for
                } // if
                prc_.ar_widgets_ = [];
                prc_.ht_widgets_conserved_states_default_.clear();
                instance_public_.state_switcher_.unregister_all_subwidgets();
                unregister_all_subwidgets_in_progress_ = false;
            }
            catch (err) {
                raudrohi.tmg('030a1127-4400-4e58-92ae-13202011abd7', err);
            } // catch
        } // prc_.unregister_all_subwidgets

        // The comment of the prc_.mark_elemwidget_to_be_unhidden
        // also explains the prc_.mark_elemwidget_to_be_hidden.
        prc_.mark_elemwidget_to_be_hidden =
        function (a_widget, true_if_update_DOM) {
            try {
                var phn = a_widget.phone.get_phone_number();
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNotnull(a_widget, 'a_widget',
                        '4ba1b818-75eb-4e3d-83ae-13202011abd7');
                    raudrohi.base.assert_isObject(a_widget, 'a_widget',
                        'e7ab0927-15c0-4c7b-b5ae-13202011abd7');
                    if (prc_.ht_widgets_conserved_states_.containsKey(phn) ===
                        false) {
                        raudrohi.tmg('5200db3d-6394-45ae-84ae-13202011abd7',
                            'prc_.ht_widgets_conserved_states_ does not contain ' +
                            'a key of ' + phn);
                    } // if
                } // if
                if (prc_.self_is_hidden_ === false) {
                    a_widget.hide(true_if_update_DOM);
                } // if
                var new_bitfield = a_widget.get_widget_state();
                prc_.ht_widgets_conserved_states_.put(phn, new_bitfield);
            } catch (err) {
                raudrohi.tmg('eae6c933-8568-4345-a2ae-13202011abd7',
                    'prc_.container_id_==' + prc_.container_id_ + '  ' + err);
            } // catch
        } // prc_.mark_elemwidget_to_be_hidden

        // If a subwidget of a hidden widget is marked visible,
        // then it will appear only after the parent widget has been
        // made visible. If the parent widget has been made visible
        // prior to a call to the prc_.mark_elemwidget_to_be_unhidden,
        // then the subwidget is also unhidden during the marking.
        prc_.mark_elemwidget_to_be_unhidden = function (a_widget) {
            try {
                var phn = a_widget.phone.get_phone_number();
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNotnull(a_widget, 'a_widget',
                        '576f32f9-5f2f-4334-94ae-13202011abd7');
                    raudrohi.base.assert_isObject(a_widget, 'a_widget',
                        '3e2f1c54-5dd7-4922-8fae-13202011abd7');
                    if (!prc_.ht_widgets_conserved_states_default_.containsKey(phn)) {
                        raudrohi.tmg('3e8dca53-ef08-4c3e-859e-13202011abd7',
                            'prc_.ht_widgets_conserved_states_ does not contain ' +
                            'a key of ' + phn);
                    } // if
                } // if
                init_ht_widgets_conserved_states_if_necceccary();
                if (raudrohi_settings_debug_JavaScript === true) {
                    if (!prc_.ht_widgets_conserved_states_.containsKey(phn)) {
                        raudrohi.tmg('58133229-c504-445e-a59e-13202011abd7',
                            'prc_.ht_widgets_conserved_states_ does not contain ' +
                            'a key of ' + phn);
                    } // if
                } // if
                var new_bitfield;
                if (prc_.self_is_hidden_ === false) {
                    a_widget.unhide();
                    new_bitfield = a_widget.get_widget_state();
                } else {
                    new_bitfield = a_widget.get_widget_state();
                    new_bitfield.is_in_state_hidden = false;
                } // if
                prc_.ht_widgets_conserved_states_.put(phn, new_bitfield);
            } catch (err) {
                raudrohi.tmg('7b3ecd2c-8dfe-45a7-919e-13202011abd7',
                    'prc_.container_id_==' + prc_.container_id_ + '  ' + err);
            } // catch
        } // prc_.mark_elemwidget_to_be_unhidden


        function init_ht_widgets_conserved_states_if_necceccary() {
            try {
                // The reason, why the bitfields get copied here, is that
                // some of the widgets are running right after instantiation,
                // but their registration takes place after their instantiation.
                // So, at the time of instantiation, the
                // prc_.ht_widgets_conserved_states_ is not up to date.
                if (prc_.ht_widgets_conserved_states_default_.size() !=
                    prc_.ht_widgets_conserved_states_.size()) {
                    raudrohi.widgets.g1.sys.copy_ht_of_bitfields(
                        prc_.ht_widgets_conserved_states_,
                        prc_.ht_widgets_conserved_states_default_);
                } // if
            } catch (err) {
                raudrohi.tmg('399294f3-58d2-4bfe-839e-13202011abd7', err);
            } // catch
        } // init_ht_widgets_conserved_states_if_necceccary

        this.display_message_t1 = function (message_text) {
            try {
                if (prc_.widgets_created_ === true) {
                    prc_.widget_msgboard_.set_content(message_text);
                } else {
                    if (raudrohi_settings_debug_JavaScript === true) {
                        raudrohi.tmg('b7330ce8-b223-461e-879e-13202011abd7',
                            'display_message got called before the ' +
                            'message displaying widget is instantiated.');
                    } // if
                } // else
            } catch (err) {
                raudrohi.tmg('434c2e98-20da-41a3-b39e-13202011abd7', err);
            } // catch
        } // display_message_t1

        this.display_message_t2 = function (message_text) {
            try {
                var parent_phone_number = prc_.parent_instance_.phone.get_phone_number();
                instance_public_.phone.call(parent_phone_number,
                    'display_message_b|||', message_text);
            } catch (err) {
                raudrohi.tmg('4e5c7425-1382-44ae-a29e-13202011abd7', err);
            } // catch
        } // display_message_t2

        this.display_message_t3 = function (message_text) {
            try {
                raudrohi.base.assert_isString(message_text, 'message_text',
                    '05c9fe20-49d7-402f-a29e-13202011abd7');
                var ht_data = raudrohi.base.pool_of_hashtables.get_empty_hashtable();
                ht_data.put('msg', message_text);
                var parent_phone_number = prc_.parent_instance_.phone.get_phone_number();
                prc_.threadjump_send(parent_phone_number,
                    'display_message_thrjr', ht_data,
                    'threadjumper_ricochet_detector');
            } catch (err) {
                raudrohi.tmg('00887741-4886-465d-928e-13202011abd7', err);
            } // catch
        } // display_message_t3

        // Modifies the ht_wrapper.
        instance_public_.only_for_raudrohi_core_developers.microsession_set_id =
        function (ht_wrapper) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht_wrapper,
                        'ht_wrapper', '5ca3f429-bc2f-4ccb-a48e-13202011abd7');
                } // if
                var microsession_name = 'microsession_name_' +
                                        instance_public_.phone.get_phone_number() +
                                        '_' + raudrohi.base.generate_id();
                instance_public_.only_for_raudrohi_core_developers.ht_microsessions_cnt_++;
                var cnt1 = instance_public_.only_for_raudrohi_core_developers.ht_microsessions_cnt_;
                instance_public_.only_for_raudrohi_core_developers.ht_microsessions_.put(microsession_name,
                    cnt1);
                ht_wrapper.put('microsession_id', cnt1);
                ht_wrapper.put('microsession_name', microsession_name);
                instance_public_.only_for_raudrohi_core_developers.ht_microsessions_queue_.push(microsession_name);
                var x_threshold = 100;
                if (x_threshold <
                    instance_public_.only_for_raudrohi_core_developers.ht_microsessions_queue_.length()) {
                    // In here one destroys some of the oldest microsession
                    // records to release memory.
                    var n = 50;//Math.floor(x_threshold/2);
                    var i;
                    var ms_name;
                    for (i = 0; i < n; i++) {
                        ms_name =
                        instance_public_.only_for_raudrohi_core_developers.ht_microsessions_queue_.pop();
                        instance_public_.only_for_raudrohi_core_developers.ht_microsessions_.remove(ms_name);
                    } // for
                } // if
            }
            catch (err) {
                raudrohi.tmg('099af15c-b894-4f5b-848e-13202011abd7', err);
            } // catch
        } // instance_public_.only_for_raudrohi_core_developers.microsession_set_id

        // It has a peculiarity that it takes the hashtable from the pool. So,
        // it would be nice, if the hashtables were later returned to the pool.
        instance_public_.only_for_raudrohi_core_developers.microsession_assemble_data_wrapper_hashtable =
        function (destination_command, return_command) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(return_command,
                        'return_command',
                        'a8057535-a8a4-4ec7-958e-13202011abd7');
                    raudrohi.base.assert_isString(destination_command,
                        'destination_command',
                        '2c996d1a-f4ae-4a43-838e-13202011abd7');
                } // if
                var ht_wrapper = raudrohi.base.pool_of_hashtables.get_empty_hashtable();
                instance_public_.only_for_raudrohi_core_developers.microsession_set_id(ht_wrapper);
                ht_wrapper.put('return_phonenumber',
                    instance_public_.phone.get_phone_number());
                ht_wrapper.put('destination_command', destination_command);
                ht_wrapper.put('return_command', return_command);
                ht_wrapper.put('state_switch_count',
                    instance_public_.state_switcher_.get_state_switch_count());
                ht_wrapper.put('data', ''); // Otherwise raudrohi.lang.ht2ProgFTE(ht_data));
                return ht_wrapper;
            } catch (err) {
                raudrohi.tmg('230cd852-7ffe-431e-a28e-13202011abd7', err);
            } // catch
        } // instance_public_.only_for_raudrohi_core_developers.microsession_assemble_data_wrapper_hashtable

        // Returns a boolean value.
        prc_.state_changed_before_package_arrival = function (ht_wrapper) {
            try {
                var s_old_swc = ht_wrapper.get('state_switch_count');
                var old_swc = parseInt(s_old_swc, 10);
                var new_swc = instance_public_.state_switcher_.get_state_switch_count();
                var answer = true;
                if (old_swc === new_swc) {
                    answer = false;
                } // if
                return answer;
            } catch (err) {
                raudrohi.tmg('6bfd055a-f78c-4c6f-b28e-13202011abd7', err);
            } // catch
        } // state_changed_before_package_arrival

        // The microsession stuff gets added to the wrapper automatically.
        //
        // It's a deprecated method, which is subject to removal during
        // refactoring. One should us the
        //  raudrohi.widgets.g1.router2hostserver instead.
        prc_.send2server_t1 =
        function (s_formscript_processor_name, ht_data, s_return_command) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_formscript_processor_name,
                        's_formscript_processor_name',
                        'a542f055-74c8-4322-838e-13202011abd7');
                    raudrohi.base.assert_isObject(ht_data, 'ht_data',
                        '839b3b5b-c18e-400b-927e-13202011abd7');
                    raudrohi.base.assert_isString(s_return_command,
                        's_return_command',
                        'a19c08b2-4923-4b76-a27e-13202011abd7');
                } // if
                var ht_wrapper = instance_public_.only_for_raudrohi_core_developers.microsession_assemble_data_wrapper_hashtable(
                    s_formscript_processor_name, s_return_command);
                ht_wrapper.put('data', raudrohi.lang.ht2ProgFTE(ht_data));
                raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_data);
                raudrohi.apparch1.send2server(s_formscript_processor_name,
                    instance_public_.phone.get_phone_number(),
                    raudrohi.lang.ht2ProgFTE(ht_wrapper));
                raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_wrapper);
            } catch (err) {
                raudrohi.tmg('6257ac8b-060b-4351-b97e-13202011abd7', err);
            } // catch
        } //  send2server_t1

        // The microsession stuff gets added to the wrapper automatically.
        // The data is required to be a string, if
        // destination_widget_phone_number==="server". Otherwise it is
        // allowed to be either a string or anything else, for example, a
        // hash table.
        prc_.threadjump_send =
        function (s_destination_phonenumber, s_destination_command, ht_data,
            s_return_command) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_destination_phonenumber,
                        's_destination_phonenumber',
                        '25059728-edae-489a-957e-13202011abd7');
                    raudrohi.base.assert_isString(s_destination_command,
                        's_destination_command',
                        '1b50f5c5-2b9d-498e-857e-13202011abd7');
                    raudrohi.base.assert_isObject(ht_data, 'ht_data',
                        '46b7f172-0392-4c2e-957e-13202011abd7');
                    raudrohi.base.assert_isString(s_return_command,
                        's_return_command',
                        '977468f2-f0c4-43f2-837e-13202011abd7');
                } // if
                var ht_wrapper = instance_public_.only_for_raudrohi_core_developers.microsession_assemble_data_wrapper_hashtable(
                    s_destination_command, s_return_command);
                ht_wrapper.put('data', ht_data);
                instance_public_.phone.call(s_destination_phonenumber,
                    s_destination_command + '|||', ht_wrapper);
                // In order to simplify the code that receives the wrapper,
                // actually, in order to save who ever reads/develops the
                // wrapper user code in the widgets, from figuring out
                // this tricky stuff here, the wrappers may not be
                // given back to the pool. The end users should, but don't have to,
                // destroy them at their own like this:
                // raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_wrapper);
            } catch (err) {
                raudrohi.tmg('879efd15-7588-49d6-a56e-13202011abd7', err);
            } // catch
        } //  prc_.threadjump_send

        prc_.threadjump_send_reply =
        function (ht_wrapper_tht_came_in_with_only_data_field_modified) {
            try {
                var ht_wrapper = ht_wrapper_tht_came_in_with_only_data_field_modified;
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht_wrapper, 'ht_wrapper',
                        '91513438-bf9d-4c9d-956e-13202011abd7');
                } // if
                var return_command_orig = ht_wrapper.get('return_command');
                ht_wrapper.put('destination_command', return_command_orig);
                ht_wrapper.put('return_command',
                    'threadjumper_ricochet_detector');
                var return_phonenumber_orig = ht_wrapper.get('return_phonenumber');
                ht_wrapper.put('destination_phonenumber',
                    return_phonenumber_orig);
                ht_wrapper.put('return_phonenumber',
                    instance_public_.phone.get_phone_number());
                instance_public_.phone.call(return_phonenumber_orig,
                    return_command_orig + '|||', ht_wrapper);
            } catch (err) {
                raudrohi.tmg('b03bbe4c-4b2d-47b5-816e-13202011abd7', err);
            } // catch
        } //  prc_.threadjump_send_reply

        prc_.threadjump_redirect_outwards =
        function (s_destination_phonenumber, s_destination_command, ht_wrapper,
            s_return_command) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_destination_phonenumber,
                        's_destination_phonenumber',
                        '5caa7f8c-e65d-437d-816e-13202011abd7');
                    raudrohi.base.assert_isString(s_destination_command,
                        's_destination_command',
                        '412244c1-3686-4af1-a56e-13202011abd7');
                    raudrohi.base.assert_isObject(ht_wrapper,
                        'ht_wrapper', '2f4b292a-a944-4bbe-a26e-13202011abd7');
                    raudrohi.base.assert_isString(s_return_command,
                        's_return_command',
                        'd6cad926-1c3e-4c20-b26e-13202011abd7');
                } // if
                var phn = instance_public_.phone.get_phone_number();
                var return_command_old = ht_wrapper.get('return_command');
                var return_phonenumber_old = ht_wrapper.get('return_phonenumber');
                ht_wrapper.put('return_command_redirect_' + phn,
                    return_command_old);
                ht_wrapper.put('return_phonenumber_redirect_' + phn,
                    return_phonenumber_old);
                ht_wrapper.put('return_command', s_return_command);
                ht_wrapper.put('return_phonenumber', phn);
                ht_wrapper.put('destination_phonenumber',
                    s_destination_phonenumber);
                ht_wrapper.put('destination_command', s_destination_command);
                // The reason, why the wrapper is furnished with a new
                // microsession records is that one has already received the
                // wrapper once and if the microsession records of the wrapper
                // are not renewed, the microsession management will
                // discharge the wrapper after the new destination returns
                // it to us. The destination widget could renews the
                // microsession records, but doing the microsession id
                // renewal twice, when only once is necessary, would be
                // a waste of resources.
                instance_public_.only_for_raudrohi_core_developers.microsession_set_id(ht_wrapper);
                instance_public_.phone.call(s_destination_phonenumber,
                    s_destination_command + '|||', ht_wrapper);
            } catch (err) {
                raudrohi.tmg('87bf6a4b-4073-413b-845e-13202011abd7', err);
            } // catch
        } // prc_.threadjump_redirect_outwards

        // The prc_.threadjump_redirect_inwards is meant to be used within
        // the function that was initially indicated by the input parameter
        // return_command of the prc_.threadjump_redirect_outwards
        prc_.threadjump_redirect_inwards = function (ht_wrapper) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht_wrapper, 'ht_wrapper',
                        'ed49423e-0068-4224-955e-13202011abd7');
                } // if
                var phn = instance_public_.phone.get_phone_number();
                var return_command_old = ht_wrapper.get(
                    'return_command_redirect_' + phn);
                var return_phonenumber_old = ht_wrapper.get(
                    'return_phonenumber_redirect_' + phn);
                ht_wrapper.put('destination_command', return_command_old);
                ht_wrapper.put('destination_phonenumber',
                    return_phonenumber_old);
                ht_wrapper.put('return_command',
                    'threadjumper_ricochet_detector');
                ht_wrapper.put('return_phonenumber', phn);
                instance_public_.phone.call(return_phonenumber_old,
                    return_command_old + '|||', ht_wrapper);
            } catch (err) {
                raudrohi.tmg('c93c6871-ebc8-4853-825e-13202011abd7', err);
            } // catch
        } // prc_.threadjump_redirect_inwards


        // Returns raudrohi.core.pair, where
        // raudrohi.core.pair.a==true,  if operation failed and
        // raudrohi.core.pair.a==false, if operation succeeded.
        // The raudrohi.core.pair.b is assigned the data hashtable.
        instance_public_.only_for_raudrohi_core_developers.microsession_receive_bin_t1 =
        function (ht_wrapper) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht_wrapper, 'ht_wrapper',
                        '26eb8e9f-8e42-4494-b45e-13202011abd7');
                } // if
                var a_pair = new raudrohi.core.pair();
                a_pair.a = true;
                a_pair.b = null;
                if (prc_.microsession_dismiss_all_in_progress_ === true) {
                    return a_pair;
                } // if
                var microsession_name = ht_wrapper.get('microsession_name');
                var microsession_id = ht_wrapper.get('microsession_id');
                if (instance_public_.only_for_raudrohi_core_developers.ht_microsessions_.containsKey(microsession_name)) {
                    if (parseInt(microsession_id, 10) !=
                        instance_public_.only_for_raudrohi_core_developers.ht_microsessions_.get(microsession_name)) {
                        return a_pair;
                    } // if
                } // if
                instance_public_.only_for_raudrohi_core_developers.ht_microsessions_cnt_++;
                var cnt1 = instance_public_.only_for_raudrohi_core_developers.ht_microsessions_cnt_;
                instance_public_.only_for_raudrohi_core_developers.ht_microsessions_.put(microsession_name,
                    cnt1);
                a_pair.a = false;
                a_pair.b = ht_wrapper.get('data');
                return a_pair;
            } catch (err) {
                raudrohi.tmg('df3990f3-2bad-4f96-935e-13202011abd7', err);
            } // catch
        } // microsession_receive_bin_t1
        prc_.microsession_dismiss_all = function () {
            try {
                prc_.microsession_dismiss_all_in_progress_ = true;
                var keys = instance_public_.only_for_raudrohi_core_developers.ht_microsessions_.keys();
                var len = keys.length;
                var microsession_name;
                var microsession_cnt;
                var cnt_plus;
                for (var i = 0; i < len; i++) {
                    microsession_name = keys[i];
                    microsession_cnt =
                    instance_public_.only_for_raudrohi_core_developers.ht_microsessions_.get(
                        microsession_name);
                    // The +1 is as if we had already received the first package.
                    cnt_plus = microsession_cnt + 1;
                    instance_public_.only_for_raudrohi_core_developers.ht_microsessions_.put(microsession_name,
                        cnt_plus);
                } // for
                prc_.microsession_dismiss_all_in_progress_ = false;
            } catch (err) {
                raudrohi.tmg('237335b4-42c5-4448-b55e-13202011abd7', err);
            } // catch
        } // microsession_dismiss_all

        // Returns raudrohi.core.pair, where
        // raudrohi.core.pair.a==true,  if operation failed and
        // raudrohi.core.pair.a==false, if operation succeeded.
        // The raudrohi.core.pair.b is assigned the wrapper hashtable.
        instance_public_.only_for_raudrohi_core_developers.microsession_receive_txt_t2 =
        function (wrapper_hashtable_progfte) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(wrapper_hashtable_progfte,
                        'wrapper_hashtable_progfte',
                        '42a52d32-791b-4aba-b45e-13202011abd7');
                } // if
                var ht_wrapper = raudrohi.lang.ProgFTE2ht(wrapper_hashtable_progfte);
                var ht_wrapper_data = raudrohi.lang.ProgFTE2ht(
                    ht_wrapper.get('data'));
                ht_wrapper.put('data', ht_wrapper_data);
                var a_pair = instance_public_.only_for_raudrohi_core_developers.microsession_receive_bin_t1(ht_wrapper);
                if (a_pair.a === false) {
                    a_pair.b = ht_wrapper
                } // if
                return a_pair;
            } catch (err) {
                raudrohi.tmg('ec401b28-22c2-48ac-924e-13202011abd7', err);
            } // catch
        } // instance_public_.only_for_raudrohi_core_developers.microsession_receive_txt_t2

        // Returns true, if the session management has discharged the
        // package or the instance_public_ had a method that
        // has a name of the "return_command".
        // One of the cases, where the packet is dismissed, is
        // when the machine is not running.
        prc_.threadjump_receive = function (ht_wrapper) {
            try {
                if ((prc_.startup_shutdown_handler_.machine_is_running()) ===
                    false) {
                    return true; // packet dismissal
                } // if
                var a_pr1 = instance_public_.only_for_raudrohi_core_developers.microsession_receive_bin_t1(ht_wrapper);
                raudrohi.base.assert_isNotnull(a_pr1, 'a_pr1',
                    'd4c7f15e-bc3f-4505-854e-13202011abd7');
                if (a_pr1.a === true) {
                    return true; // packet dismissal
                } // if
                var data = a_pr1.b;
                var destination_command = ht_wrapper.get('destination_command');
                if (destination_command === "/dev/null") {
                    return true;
                } // if
                if (instance_public_.thrjr_[destination_command] ===
                    undefined) {
                    if (instance_public_.thrjr_.default_command === undefined) {
                        if (raudrohi_settings_debug_JavaScript === true) {
                            raudrohi.tmg('148f7355-0857-4a91-814e-13202011abd7',
                                'instance_public_.thrjr_' +
                                destination_command +
                                " does not exist in \n" +
                                instance_public_.phone.get_phone_number() +
                                "\n");
                        } // if
                        return false;
                    } // if
                    instance_public_.thrjr_.default_command(ht_wrapper);
                } else {
                    instance_public_.thrjr_[destination_command](ht_wrapper);
                } // else
                return true;
            } catch (err) {
                raudrohi.tmg('507823fb-1af6-4899-a54e-13202011abd7', err);
            } // catch
        } // prc_.threadjump_receive

        // It's useful for performing some explicit shut-down operations
        // prior to the closing of the session on the server.
        prc_.customizable.optional.evh_button_logout_t1_hook = function (e) {
        }

        prc_.evh_button_logout_t1 = function (e) {
            try {
                instance_public_.state_switcher_.change_state_2('zero');
                prc_.customizable.optional.evh_button_logout_t1_hook(e);
                raudrohi.widgets.g1.triggerTransition('resurrect', 'shutdown',
                    prc_.loginpage_phone_number_,
                    instance_public_.phone.get_phone_number(), new Hashtable());
                raudrohi.apparch1.send_logout_command_2_server_t1();
            } catch (err) {
                raudrohi.tmg('45884265-7355-4416-844e-13202011abd7', err);
            } // catch
        } // prc_.evh_button_logout


        prc_.repaint_if_graphical_and_not_hidden = function () {
            try {
                if (prc_.self_is_hidden_ === true) {
                    return
                } // if
                instance_public_.unhide();
            } catch (err) {
                raudrohi.tmg('19d9731b-f4bd-4fdb-854e-13202011abd7', err);
            } // catch
        } // prc_.repaint_if_graphical_and_not_hidden

        var s_selfread_wrap_2_alignment_div_divstart_cache_ = lc_s_emptystring;
        var lc_s_wrap_2_alignment_div_divend = "\n</div>\n";
        // Returns a string.
        prc_.selfread.wrap_2_alignment_div = function (s_html_2_wrap) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_html_2_wrap,
                        's_html_2_wrap',
                        '7332a437-f3a1-462a-954e-13202011abd7');
                } // if
                // Actually the b_selfread_wrap_2_alignment_cache_is_out_of_date_
                // should be in a critical section, but as nothing is
                // that terribly broken, if the alignment of elements is
                // a bit weird, then one leaves it out of a critical
                // section for the benefit of speed. Besides, it's probably
                // pretty hard to hit the right time window to cause the
                // miss-alignment.
                if (b_selfread_wrap_2_alignment_cache_is_out_of_date_ ===
                    true) {
                    var ht_alignmet_styles = raudrohi.widgetless_ui.func.get_alignment_style_values(
                        prc_.alignment1_);
                    var s = lc_s_linebreak + '<div style="vertical-align:' +
                            ht_alignmet_styles.get('vertical-align') +
                            ';text-align:' +
                            ht_alignmet_styles.get('text-align') + ";\">\n";
                    s_selfread_wrap_2_alignment_div_divstart_cache_ = s;
                    b_selfread_wrap_2_alignment_cache_is_out_of_date_ = false;
                } // if
                var s_out = s_selfread_wrap_2_alignment_div_divstart_cache_ +
                            s_html_2_wrap + lc_s_wrap_2_alignment_div_divend;
                return s_out;
            } catch (err) {
                raudrohi.tmg('aec1d235-07ec-4271-b23e-13202011abd7', err);
            } // catch
        } // prc_.repaint_if_graphical_and_not_hidden


        // Processes standard phone calls and returns true, if the processing
        // took place. The bitfield is expected to be an instance of
        // raudrohi.base.bitfield_htbased.
        this.standard_phonecall_received_t1 =
        function (a_pair, a_phonecall_instance) {
            // The a_pair is part of the the function parameters only
            // for efficiency. There's no point of running the same string
            // bisection routines more than once every time a phone call
            // is made to a widget.
            try {
                var bitfield = prc_.bitfield_;
                var brancher = a_pair.a;
                var default_phonecall_received = true;
                var ht;
                var a_pr2;
                switch (brancher) {
                    case 'stub':
                        // Useful for caching from the server.
                        break;
                    case 'hide':
                        instance_public_.hide(true);
                        break;
                    case 'unhide':
                        instance_public_.unhide();
                        break;
                    // In the case of the
                    // brancher=='startup_with_indication_request' and
                    // brancher=='shut_dow_with_indication_request'
                    // the a_phonecall_instance.data2 is expected to be a
                    // hashtable with the following content:
                    //         ht['destination_phone_number'],
                    //         ht['data_for_the_destination'],
                    //         ht['binary_data_for_the_destination'],
                    case 'startup_with_indication_request':
                        ht = a_phonecall_instance.data2;
                        prc_.startup_shutdown_handler_.startbutton_pushed_with_indication_request(ht.get('destination_phone_number'),
                            ht.get('data_for_the_destination'),
                            ht.get('binary_data_for_the_destination'));
                        break;
                    case 'shutdown_with_indication_request':
                        ht = a_phonecall_instance.data2;
                        prc_.startup_shutdown_handler_.stopbutton_pushed_with_indication_request(ht.get('destination_phone_number'),
                            ht.get('data_for_the_destination'),
                            ht.get('binary_data_for_the_destination'));
                        break;
                    case 'startup':
                        prc_.startup_shutdown_handler_.startbutton_pushed();
                        break;
                    case 'shutdown':
                        prc_.startup_shutdown_handler_.stopbutton_pushed();
                        break;
                    case 'change_state_2':
                        a_pr2 = raudrohi.base.bisect(a_pair.b, '|||');
                        instance_public_.state_switcher_.change_state_2(a_pr2.a);
                        break;
                    default:
                        default_phonecall_received = false;
                        if (bitfield.is_set('phc_display_message_t1')) {
                            if (brancher == 'display_message') {
                                a_pr2 = raudrohi.base.bisect(a_pair.b, '|||');
                                instance_public_.display_message(a_pr2.a);
                                default_phonecall_received = true;
                            } // if
                        } // if
                        if (bitfield.is_set('phc_display_message_b_t1')) {
                            if (brancher == 'display_message_b') {
                                instance_public_.display_message(
                                    a_phonecall_instance.data2);
                                default_phonecall_received = true;
                            } // if
                        } // if
                        if (bitfield.is_set('phc_resurrect_t1')) {
                            if (brancher == 'resurrect') {
                                prc_.startup_shutdown_handler_.startbutton_pushed();
                                instance_public_.unhide();
                                default_phonecall_received = true;
                            } // if
                        } // if
                } // switch
                return default_phonecall_received;
            } catch (err) {
                raudrohi.tmg('8a68c65e-4585-4f57-920e-13202011abd7', err);
            } // catch
        } // standard_phonecall_received_t1

        this.receive_phonecall_t1 = function (a_phonecall_instance) {
            try {
                var data = raudrohi.adapter.trim(a_phonecall_instance.data);
                var a_pair = raudrohi.base.bisect(data, '|||');
                raudrohi.base.assert_isNotnull(a_pair, 'a_pair',
                    '1eb2fb61-6352-452e-9f0e-13202011abd7');
                if (pileofmethods_t1_.standard_phonecall_received_t1(a_pair,
                    a_phonecall_instance)) {
                    return;
                } // if
                if (prc_.threadjump_receive(a_phonecall_instance.data2)) {
                    return;
                } // if
                raudrohi.tmg('59db1651-4947-424d-92fd-13202011abd7',
                    "A phone call did not get processed. \n" +
                    'a_phonecall_instance.data==' + a_phonecall_instance.data);
            } catch (err) {
                raudrohi.widgets.g1.sys.phonecall_receiver_tmg(
                    '11a11c9d-a67e-4b74-97fd-13202011abd7',
                    err + " prc_.html_id_==" + prc_.html_id_,
                    a_phonecall_instance);
            } // catch
        } // receive_phonecall_t1

        instance_public_.phone.receive_phonecall =
        pileofmethods_t1_.receive_phonecall_t1;

    } catch (err) {
        raudrohi.tmg('4ff45b75-bda5-4318-a6fd-13202011abd7', err);
    } // catch
} // raudrohi.widgets.g1.pileofmethods_t1

//=========================================================================
//=========================================================================

raudrohi.widgets.g1.b_phonebooth_t1_initialization_started_at_least_once =
false;

// It's a singleton. It's main purpose is to make it possible to
// send messages from a static, generated, HTML, to compound, i.e. 
// nontrivial, widgets.
//
// The main usage case is, where the number of widgets gets
// so huge, for example, a matrix of buttons, that the computational
// expense is not coverable. In that case one may want to
// generate some temporary HTML that contains the raw
// HTML versions of the elements, for example, buttons, and
// where the on<Event>, like onClick, property has some
// code that is able to send some ID/data to some widget.
// The singleton, raudrohi.widgets.g1.phonebooth_t1,
// facilitates the creation of such on<Event> code.
//
// It's instantiated in the library constructor.
raudrohi.widgets.g1.phonebooth_t1 = function (s_html_id) {
    var self_public_ = this;
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_is_HTML_ID(s_html_id, 's_html_id',
                'bc4aa897-3299-4757-9222-31c250705dd7');
        } // if
        //-----------------------------------------------------------------
        if (raudrohi.widgets.g1.b_phonebooth_t1_initialization_started_at_least_once !==
            false) {
            raudrohi.tmg('16aa123e-c82d-4752-b122-31c250705dd7',
                'The raudrohi.widgets.g1.phonebooth_t1 is ' +
                'expected to be a singleton, but at least two ' +
                'instantiation attempts have been made.');
        } // if
        raudrohi.widgets.g1.b_phonebooth_t1_initialization_started_at_least_once =
        true;
        //-----------------------------------------------------------------
        var pileofmethods_t1_ = new raudrohi.widgets.g1.pileofmethods_t1(
            self_public_, 'raudrohi.widgets.g1.phonebooth_t1_', s_html_id);
        var prc_ = self_public_.private_code_;
        self_public_.phone = new raudrohi.lang.comm.phone(
            'raudrohi.widgets.g1.phonebooth_t1');
        prc_.self_is_graphical_widget_ = false;
        //-----------------------------------------------------------------
        var s_lc_dev_null_ = '/dev/null';
        var s_lc_data = 'data';
        //-----------------------------------------------------------------
        this.send_command =
        function (s_cmd, s_data, s_destination_phone_number) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_cmd, 's_cmd',
                        '76bc7e4f-7304-489c-b122-31c250705dd7');
                    raudrohi.base.assert_isString(s_data, 's_data',
                        '444b009d-4f08-49b5-8322-31c250705dd7');
                    raudrohi.base.assert_isString(
                        s_destination_phone_number,
                        's_destination_phone_number',
                        'af9b8642-1ec5-4ee4-b122-31c250705dd7');
                } // if
                var ht_data = new Hashtable();
                ht_data.put(s_lc_data, s_data);
                prc_.threadjump_send(s_destination_phone_number,
                    s_cmd, ht_data, s_lc_dev_null_);
            } catch (err) {
                raudrohi.tmg('0434c083-f1c3-4478-b522-31c250705dd7', err);
            } // catch
        } // this.send_command

        //-----------------------------------------------------------------
        // The idea is that one can use the output string
        // of this method within the onClick event handler of
        // generated HTML. The following example explanes the
        // usage context of the b_will_be_wrapped_by_singlequotes
        //
        // var b_will_be_wrapped_by_singlequotes=true;
        // var s_html="<button type='button' onClick='"+
        // raudrohi.widgets.g1.phonebooth_t1.s_get_embeddable_javascript(...,
        // b_will_be_wrapped_by_singlequotes)+"'>Hi</button>";
        //
        // var b_will_be_wrapped_by_singlequotes=false; // ===double-quotes
        // var s_html='<button type="button" onClick="'+
        // raudrohi.widgets.g1.phonebooth_t1.s_get_embeddable_javascript(...,
        // b_will_be_wrapped_by_singlequotes)+'">Hi</button>';
        //
        this.s_get_embeddable_javascript =
        function (s_cmd, s_data, s_destination_phone_number,
            b_will_be_wrapped_by_singlequotes) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_cmd, 's_cmd',
                        'a30f8842-9470-4414-8222-31c250705dd7');
                    raudrohi.base.assert_isString(s_data, 's_data',
                        '27ed172c-3892-420b-b222-31c250705dd7');
                    raudrohi.base.assert_isString(
                        s_destination_phone_number,
                        's_destination_phone_number',
                        'c4053802-9340-4d3d-8422-31c250705dd7');
                    raudrohi.base.assert_isBoolean(
                        b_will_be_wrapped_by_singlequotes,
                        'b_will_be_wrapped_by_singlequotes',
                        '79e19135-16dd-4d72-b522-31c250705dd7');
                } // if
                var b_s_x_uses_singlequotes = true;
                var s_cmd_s_x = raudrohi.lang.s_escape_for_eval(
                    s_cmd, b_s_x_uses_singlequotes);
                var s_data_s_x = raudrohi.lang.s_escape_for_eval(
                    s_data, b_s_x_uses_singlequotes);
                var s_dphnn_s_x = raudrohi.lang.s_escape_for_eval(
                    s_destination_phone_number, b_s_x_uses_singlequotes);
                var s_x = "raudrohi.widgets.g1.phonebooth_t1." +
                          "send_command('" + s_cmd_s_x + "','" + s_data_s_x +
                          "','" +
                          s_dphnn_s_x + "');";
                var s_out = raudrohi.lang.s_escape_for_eval(s_x,
                    b_will_be_wrapped_by_singlequotes);
                return s_out;
            } catch (err) {
                raudrohi.tmg('51e011c2-6911-49ec-a522-31c250705dd7', err);
            } // catch
        } // this.s_get_embeddable_javascript

        //-----------------------------------------------------------------
        self_public_.startup_sequence_init();
    } catch (err) {
        raudrohi.tmg('5a0fc83a-3c37-4b43-b522-31c250705dd7', err);
    } // catch
} // raudrohi.widgets.g1.phonebooth_t1

//-------------------------------------------------------------------------
//=========================================================================

// It's the topmost widget for widgets that 
// need a parent widget.
raudrohi.widgets.g1.containergrid_1x1_t1 = function (s_html_id) {
    try {
        var self_public_ = this;
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_is_HTML_ID(s_html_id, 's_html_id',
                '5f96efb2-5a00-40e7-b240-713350705dd7');
        } // if

        var pileofmethods_t1_ = new raudrohi.widgets.g1.pileofmethods_t1(
            self_public_, 'raudrohi.widgets.g1.containergrid_1x1_t1_',
            s_html_id);
        var prc_ = self_public_.private_code_;
        prc_.content_ = null;
        prc_.content_set_ = false;

        prc_.customizable.compulsory.render_editable = function () {
            try {
                if (prc_.content_set_ !== true) {
                    raudrohi.base.set_innerHTML(prc_.container_id_, '');
                    raudrohi.tmg('139db2ac-36df-421e-8390-713350705dd7',
                        "\nThe class of this widget requires that " +
                        'its method set_content(...) is ' +
                        "called prior to unhiding this widget.\n");
                } // if
                var ob_widget = prc_.content_;
                var s_content_div_html_id = ob_widget.private_code_.container_id_;
                raudrohi.base.set_innerHTML(prc_.container_id_,
                    '<div id="' + s_content_div_html_id + '"></div>');
                prc_.mark_elemwidget_to_be_unhidden(ob_widget);
            } catch (err) {
                raudrohi.tmg('44a6eae3-9e0f-45d9-bf20-713350705dd7', err);
            } // catch
        } // render_editable

        prc_.customizable.compulsory.render_readonly =
        prc_.customizable.compulsory.render_editable;

        this.set_content = function (ob_widget) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_is_g1_widget(ob_widget, 'ob_widget',
                        '5c421663-b037-41de-b630-713350705dd7');
                } // if
                prc_.unregister_all_subwidgets();
                prc_.content_set_ = false;
                prc_.content_ = ob_widget;
                prc_.register_subwidget(ob_widget, 'visible');
                prc_.content_set_ = true;
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('23900ff2-4c63-4f81-b950-713350705dd7', err);
            } // catch
        } // set_content

        this.get_content = function () {
            try {
                var x_out = prc_.content_;
                return x_out;
            } catch (err) {
                raudrohi.tmg('217764e9-e0e6-4f22-a810-713350705dd7', err);
            } // catch
        } // get_content

        self_public_.startup_sequence_init();

    } catch (err) {
        raudrohi.tmg('d426088c-11fe-4fc3-ab50-713350705dd7', err);
    } // catch
} // raudrohi.widgets.g1.containergrid_1x1_t1

//=========================================================================
//=========================================================================

//if(window.raudrohi_cache_exists!==true){
//	window.raudrohi.widgets.g1.cache={};
//	window.raudrohi_cache_exists=true;
//} // if
//-------------------------------------------------------------------------

// This class is deprecated, because in here the
// queries that are chached, are fixed by their format.
//
// A new version of the cache should take query-instance
// to signature converter by a constructor parameter.
// To avoid query-instance type detection related issues
// there should be at most one query-instance type per cache
// instance.
raudrohi.widgets.g1.cache_t2=function(s_parent_phone_number){
	var self_public_=this;
	var instance_public_=self_public_;
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isString(
				s_parent_phone_number, 's_parent_phone_number',
				'a1956b27-d906-4578-9416-b050a0219bd7');
		} // if

		var s_html_id_='The_raudrohi.widgets.g1.cache_t2_is_a_nongraphical_widget'+
		raudrohi.base.generate_id();
		var pileofmethods_t1_=new raudrohi.widgets.g1.pileofmethods_t1(
			self_public_,'raudrohi.widgets.g1.cache_t2_',s_html_id_);
		var prc_=self_public_.private_code_;
		prc_.parent_phone_number_=s_parent_phone_number;
		//this.display_message=pileofmethods_t1_.display_message_t3;
		prc_.self_is_graphical_widget_=false;

		var ht_utiliz_=new Hashtable();

		// key   --- searchstring
		// value --- server response
		var ht_cache_=new Hashtable();

		// key    --- qyery signature in the format of raudrohi.dbcomm.dbq1.get_query_params_signature
		// value  --- array of requester phone numbers.
		var ht_pending_queries_=new Hashtable();

		// The wrapper_hashtable is in the format that is created
		// within the raudrohi.widgets.g1.pileofmethods_t1.instance_public_.only_for_raudrohi_core_developers.microsession_assemble_data_wrapper_hashtable
		// The signature is in the format of raudrohi.dbcomm.dbq1.get_query_params_signature
		function submit_cache_query_2_server(signature, wrapper_hashtable){
			try{
				var ht_requester_phonenumbers;
				var s_key=wrapper_hashtable.get('return_phonenumber')+':'+
				wrapper_hashtable.get('return_command');
				if(ht_pending_queries_.containsKey(signature)){
					ht_requester_phonenumbers=ht_pending_queries_.get(signature);
					ht_requester_phonenumbers.put(s_key, wrapper_hashtable);
					return;
				} // if
				ht_requester_phonenumbers=new raudrohi.base.HashtableUtilizer(
					'requester_phns_'+signature,ht_utiliz_);
				ht_requester_phonenumbers.put(s_key, wrapper_hashtable);
				ht_pending_queries_.put(signature,ht_requester_phonenumbers);

				var ht_out=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
				ht_out.put('signature',signature);
				var ht_q=wrapper_hashtable.get('data');
				ht_out.put('serialized_query_hashtable',
					raudrohi.dbcomm.dbq1.serialize_query_ht(ht_q));
				var destination_command=ht_q.get('formscript_processor_name');
				prc_.threadjump_send('router2hostserver', destination_command,
					ht_out, 'process_server_response');
				raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_out);
			} catch (err){
				raudrohi.tmg('68a49933-edbb-4beb-b516-b050a0219bd7',err);
			} // catch
		} // submit_cache_query_2_server


		// The wrapper_hashtable is in the format that is created
		// within the raudrohi.widgets.g1.pileofmethods_t1.instance_public_.only_for_raudrohi_core_developers.microsession_assemble_data_wrapper_hashtable
		// The wrapper_hashtable's data "field" is expected to contain
		// an hashtable that conforms to the format of
		// raudrohi.dbcomm.dbq1.create_empty_ht().
		self_public_.thrjr_.get_from_cache=function(wrapper_hashtable){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isObject(wrapper_hashtable,
						'wrapper_hashtable',
						'845e9266-321a-4745-bc16-b050a0219bd7');
					raudrohi.base.assert_isString(
						wrapper_hashtable.get('return_phonenumber'),
						'wrapper_hashtable.get(\'return_phonenumber\')',
						'44e07fb9-95c8-4051-9316-b050a0219bd7');
				} // if
				var ht_q=wrapper_hashtable.get('data');
				var signature=raudrohi.dbcomm.dbq1.get_query_params_signature(
					ht_q);
				if(ht_cache_.containsKey(signature)){
					wrapper_hashtable.put('data',ht_cache_.get(signature));
					prc_.threadjump_send_reply(wrapper_hashtable);
					return;
				} // if
				submit_cache_query_2_server(signature,
					wrapper_hashtable);
			} catch (err){
				raudrohi.tmg('24b6b925-b728-4d05-b106-b050a0219bd7',err);
			} // catch
		} // get_from_cache

		function pass_the_result_on_to_widgets_that_were_waiting_for_it(
			signature,ht_rows){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isString( signature,'signature',
						'38e056d2-cb82-494f-9506-b050a0219bd7');
					raudrohi.base.assert_isObject(ht_rows,'ht_rows',
						'135e2d2b-c001-48dc-9306-b050a0219bd7');
					if(!ht_pending_queries_.containsKey(signature)){
						raudrohi.adapter.log(
							'GUID==06910038-9a41-45d1-988b-7f2535a0eefe'+
							' Something happened. There is no key '+
							'for signature "'+signature+'".');
						return;
					} // if
				} // if
				var ht_requester_phns=ht_pending_queries_.get(signature);
				var keys=ht_requester_phns.keys();
				var len=keys.length;
				var a_key;
				var ht_wrapper;
				for(var i=0;i<len;i++){
					a_key=keys[i];
					ht_wrapper=ht_requester_phns.get(a_key);
					ht_wrapper.put('data',ht_rows);
					prc_.threadjump_send_reply(ht_wrapper);
				} // for
				ht_pending_queries_.remove(signature);
				raudrohi.base.pool_of_hashtables.return_used_hashtable(
					ht_requester_phns);
			} catch (err){
				raudrohi.tmg('45446834-c24f-45f8-a206-b050a0219bd7',err);
			} // catch
		} // pass_the_result_on_to_widgets_that_were_waiting_for_it

		self_public_.thrjr_.process_server_response=function(ht_wrapper){
			try{
				var ht_data=ht_wrapper.get('data');
				var s_rows=ht_data.get('data');
				if(ht_data.get('operation_success')=='f'){
					if(raudrohi_settings_debug_JavaScript===true){
						raudrohi.tmg('18e7f827-10b2-40be-9406-b050a0219bd7',
							'In cache: server query operation '+
							'failed. '+ht_data.get('message'));
					} // if
					return;
				} // if
				var signature=ht_data.get('signature');
				var ht_rows=raudrohi.lang.deserialize_htOfht_from_ProgFTE(s_rows);
				ht_cache_.put(signature,ht_rows)

				pass_the_result_on_to_widgets_that_were_waiting_for_it(
					signature,ht_rows);
			} catch (err){
				raudrohi.tmg('ac86d62a-cc4c-443e-b106-b050a0219bd7',err);
			} // catch
		} // process_server_response

		this.reset=function(){
			try{
				prc_.microsession_dismiss_all();
				ht_cache_.clear();
				ht_pending_queries_.clear();
				ht_utiliz_.clear();
			} catch (err){
				raudrohi.tmg('d24785de-2d3c-4678-a906-b050a0219bd7',err);
			} // catch
		} // this.reset

		prc_.stsw_exit_run=function(){
			try{
				self_public_.reset();
			} catch (err){
				raudrohi.tmg('6b59b13a-a72d-4466-b406-b050a0219bd7',err);
			} // catch
		} // stsw_exit_run
		self_public_.state_switcher_.declare_state_default_exit_func(
			'run',prc_.stsw_exit_run);

		prc_.stsw_enter_run=function(){
			try{
			} catch (err){
				raudrohi.tmg('5dcda443-5417-4440-a306-b050a0219bd7',err);
			} // catch
		} // stsw_enter_run
		self_public_.state_switcher_.declare_state_default_entry_func(
			'run',prc_.stsw_enter_run);
		self_public_.state_switcher_.declare_state_2_be_in_cluster(
			'cluster_run','run');

		prc_.bitfield_.set('phc_resurrect_t1');
		self_public_.startup_sequence_init();

	} catch (err){
		raudrohi.tmg('175b464e-8e42-4047-a106-b050a0219bd7',err);
	} // catch
} // raudrohi.widgets.g1.cache_t2
//=========================================================================
//
//if(window.raudrohi_cache_exists!==true){
//	window.raudrohi.widgets.g1.cache={};
//	window.raudrohi_cache_exists=true;
//} // if
//-------------------------------------------------------------------------

// The idea is that a same object, let's say, a record, can
// have multiple indices. Also, a data source may be other than the
// server. If it is a server, then a widget that is a gate to a server,
// is used for the data source.
raudrohi.widgets.g1.multiindex_cache_t1=function(s_html_id,
	s_datasource_widget_phone_number, s_datasource_widget_receiver_command){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
            raudrohi.base.assert_is_HTML_ID(s_html_id, 's_html_id',
                '2a1fbcd5-c1d5-4449-9d30-231350705dd7');
			raudrohi.base.assert_isString(
				s_datasource_widget_phone_number,'s_datasource_widget_phone_number',
				'e6258c95-396c-4463-98d0-231350705dd7');
			raudrohi.base.assert_isString(
				s_datasource_widget_receiver_command,'s_datasource_widget_receiver_command',
				'a59d8aa7-932f-48ca-a11f-231350705dd7');
		} // if
		var self_public_=this;
		var pileofmethods_t1_=new raudrohi.widgets.g1.pileofmethods_t1(
			self_public_,'',s_html_id);
		var prc_=self_public_.private_code_;
		prc_.self_is_graphical_widget_=false;
		var s_datasource_widget_phone_number_=s_datasource_widget_phone_number;
		var s_datasource_widget_receiver_command_=s_datasource_widget_receiver_command;

		// Downoad initialization is triggered from outside of
		// this widget anyway.
		self_public_.startup_sequence_init();

		// key==<index name>
		// value==<a hash table that implements the index>
		var ht_indices_=new Hashtable();

		// key==<index name>
		// value==<a hash table that implements the complement set of the index>
		// (http://mathworld.wolfram.com/ComplementSet.html )
		// The idea is that one also caches the knowledge that the database
		// or, in general, a datasource, does not contain something, i.e.
		// one caches datasource answers of type "data not found".
		var ht_indices_complement_sets_=new Hashtable();

		// key==<request signature string>
		// value==<array of received microsession packets>
		// The request signatures are returned by the datasource
		// with the answer to the request.
		//
		// To make sure that
		// the index name and request values do not intervene
		// with eachother, the request signature string is actually
		// a ProgFTE string of a hashtable that has the 2 things
		// stored in eachother.
		//
		// For example, if one were to concat the index name and request value,
		// one may have collisions like this:
		//
		// index_name=="name_vowel" request=="base_2"
		//   ignature=="name_vowel_base_2"
		// index_name=="name" request=="_vowel_base_2"
		//   ignature=="name_vowel_base_2"
		//
		// So, a ProgFTE format (or JSON or almost whatever
		// structured text sformat) is a fool-proof way to create a
		// unique signature.
		//
		// The values of the hashtables are arrays in stead of
		// just values, because because there might
		// be multiple widgets that have the same request signature.
		//
		// Microsession packets are used because one wants
		// to dismiss results that come in too late.
		// The microsessions semi-automatically handle that.
		var ht_pending_requests_=new Hashtable();


		// Clears the cache, so that the indices remain declared.
		this.clear=function(){
			try{
				ht_pending_requests_.clear();
				// The for-loop that clears index hashtables
				// is only due to a hope that by emptying the
				// cache indices, the JavaScript garbage collection
				// is able to do its job, should the garbage collection
				// be implemented with the typical, web-style,
				// script-kiddie mentality. (As of 2010 I wonder,
				// how long will it take, till the web development ends
				// being the porno of sotware development... )
				var keys=ht_indices_.keys();
				var len=keys.length;
				var key;
				var reference_to_the_value;
				for(var i=0;i<len;i++){
					key=keys[i];
					reference_to_the_value=ht_indices_.get(key);
					reference_to_the_value.clear();
					reference_to_the_value=ht_indices_complement_sets_.get(key);
					reference_to_the_value.clear();
				} // for
				ht_indices_.clear();
			} catch (err){
				raudrohi.tmg('3dbd3621-452c-48ac-8e2f-231350705dd7',err);
			} // catch
		} // clear

		// Creates a new, empty, index. If the index with the given
		// name already exists, an exception is thrown. The peculiarity
		// of this cahce is that there can be more than one index.
		this.declare_index=function(s_index_name){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isString(
						s_index_name,'s_index_name',
						'1080ecc5-fe62-4001-b95f-231350705dd7');
					if (ht_indices_.containsKey(s_index_name)===true){
						raudrohi.tmg('552563bd-4e07-483d-9a3f-231350705dd7',
							'Index with a name of "'+s_index_name+
							'" has already been declared.');
					} // if
				} // if
				var ht_new_index=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
				ht_indices_.put(s_index_name,ht_new_index);
				var ht_new_index_complement_set=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
				ht_indices_complement_sets_.put(s_index_name,
					ht_new_index_complement_set);
			} catch (err){
				raudrohi.tmg('34c59d35-17d2-4c1f-934f-231350705dd7',err);
			} // catch
		} // declare_index

		// Subject to overriding.
		this.insert_data_2_indices=function(ht_indices,x_data){
			try{
				raudrohi.tmg('5932d144-c791-461e-843f-231350705dd7',
					'This method is meant to be overridden, because the insertion '+
					'of data to the set of indices is application specific. ');
			} catch (err){
				raudrohi.tmg('93b72df0-a9c4-443d-a4af-231350705dd7',err);
			} // catch
		} // insert_data_2_indices

		// Optionally subject to overriding.
		//
		// The idea is that datasource sends the data to the JavaScript side
		// always as a string, but if one uses the data in some other
		// form, then one has to convert the string to that ohter form,
		// but if one caches the data, then it does not make sense to
		// re-do the conversion every time the cached value is returned
		// from the cache. So, that's why it's computationally savy to
		// do the conversion prior to storing the value to the cache.
		//
		// It's not compulsory to override this method, because if it is
		// not overridden, the "raw" strings that the datasource sent, are cached.
		this.convert_datasource_sent_datastring_to_cachable_form=function(s_data){
			try{
				var x_out=s_data;
				return x_out;
			} catch (err){
				raudrohi.tmg('c30912d1-944a-40c8-ab5f-231350705dd7',err);
			} // catch
		} // convert_datasource_sent_datastring_to_cachable_form

		// The ht_query_response_from_cachehas the following pairs:
		// The x_data is allowed to be null.
		function send_response_to_query_initiator(ht_wrapper_with_query,x_data,b_data_found){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isObject(
						ht_wrapper_with_query,'ht_wrapper_with_query',
						'3949cd6b-170e-476f-9c5f-231350705dd7');
				// It's OK for the x_data to be null,
				// if b_data_found==true, because may be the null is the
				// answer. One just does not know the usages well enough
				// yet.
				} // if
				var ht_query=ht_wrapper_with_query.get('data');
				ht_query.put('b_data_found',b_data_found);
				ht_query.put('data',x_data);
				prc_.threadjump_send_reply(ht_wrapper_with_query);
			} catch (err){
				raudrohi.tmg('084edbae-4a30-41e7-8d3f-231350705dd7',err);
			} // catch
		} // send_response_to_query_initiator

		this.thrjr_.receive_from_datasource=function(ht_wrapper){
			try{
				var ht_data_from_datasource=ht_wrapper.get('data');
				var s_b_data_found=ht_data_from_datasource.get('b_data_found');
				var s_index_name=ht_data_from_datasource.get('s_index_name');
				var s_query=ht_data_from_datasource.get('s_query');
				var b_data_found=raudrohi.core.str2bool(s_b_data_found);
				var x_data="";
				if (b_data_found===true){
					var s_data=ht_data_from_datasource.get('data');
					x_data=self_public_.convert_datasource_sent_datastring_to_cachable_form(s_data);
					self_public_.insert_data_2_indices(ht_indices_,x_data);
				} else {
					var ht_index_complement_set=ht_indices_complement_sets_.get(s_index_name);
					ht_index_complement_set.put(s_query,x_data);
				} // else
				var s_query_signature=ht_data_from_datasource.get(
					's_query_signature');
				var ar=ht_pending_requests_.get(s_query_signature);
				ht_pending_requests_.remove(s_query_signature);
				var len=ar.length;
				var i=0;
				var ht_wrapper_that_initiated_the_query;
				for(i=0;i<len;i++){
					ht_wrapper_that_initiated_the_query=ar[i];
					send_response_to_query_initiator(ht_wrapper_that_initiated_the_query,
						x_data,b_data_found);
				} // for
				raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_wrapper);
			} catch (err){
				raudrohi.tmg('3f7bc8e4-49f5-4d64-9d2f-231350705dd7',err);
			} // catch
		} // thrjr_.receive_from_datasource


		// Submits a query to the cache and the cahce.
		// The data field is expected to contain a hashtable
		// with keys: "s_index_name", "s_query"
		//
		// The response will be a hashtable with the keys of
		//            "s_index_name", "s_query", "data", "b_data_found"
		this.thrjr_.get=function(ht_wrapper){
			try{
				var ht_query=ht_wrapper.get('data');
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isObject(
						ht_query,'ht_query',
						'422b5364-9696-4a93-8c3e-231350705dd7');
				} // if
				var s_index_name=ht_query.get('s_index_name');
				if(raudrohi_settings_debug_JavaScript===true){
					if (ht_indices_.containsKey(s_index_name)===false){
						raudrohi.tmg('51d53335-188e-4422-841e-231350705dd7',
							'Index with a name of "'+s_index_name+
							'" has not been declared.');
					} // if
				} // if
				var s_query=ht_query.get('s_query');
				var ht_index=ht_indices_.get(s_index_name);
				var x_data=null;
				if (ht_index.containsKey(s_query)===true){
					x_data=ht_index.get(s_query);
					send_response_to_query_initiator(ht_wrapper,x_data,true);
					return;
				} // if
				var ht_index_complement_set=ht_indices_complement_sets_.get(s_index_name);
				if (ht_index_complement_set.containsKey(s_query)===true){
					x_data=ht_index_complement_set.get(s_query);
					send_response_to_query_initiator(ht_wrapper,x_data,false);
					return;
				} // if
				var s_query_signature=raudrohi.lang.ht2ProgFTE(ht_query);
				var ar=null;
				if (ht_pending_requests_.containsKey(s_query_signature)===true){
					ar=ht_pending_requests_.get(s_query_signature);
				} else {
					ar=[];
					ht_pending_requests_.put(s_query_signature,ar);
				} // else
				ar.push(ht_wrapper);
				var ht_data_2_datasource=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
				ht_data_2_datasource.put('s_query_signature',s_query_signature);
				ht_data_2_datasource.put('s_query',s_query);
				ht_data_2_datasource.put('s_index_name',s_index_name);
				prc_.threadjump_send(s_datasource_widget_phone_number_,
					s_datasource_widget_receiver_command_,
					ht_data_2_datasource, 'receive_from_datasource');
			} catch (err){
				raudrohi.tmg('81743d1f-e5bf-408e-932e-231350705dd7',err);
			} // catch
		} // thrjr_.get

	} catch (err){
		raudrohi.tmg('2b976342-5376-4ccf-8b3e-231350705dd7',err);
	} // catch
} // raudrohi.widgets.g1.multiindex_cache_t1
//=========================================================================

// The raudrohi.widgets.g1.router2hostserver is a singleton and its
// phone number is "router2hostserver". The
// raudrohi.widgets.g1.router2hostserver exists only for making the hosting
// server available as if it were just one of the widgets. It forms a
// facade. http://en.wikipedia.org/wiki/Facade_pattern
raudrohi.widgets.g1.router2hostserver = function (s_html_id) {
    try {
        if (raudrohi.settings.debug_JavaScript === true) {
            raudrohi.base.assert_is_HTML_ID(s_html_id, 's_html_id',
                '20d43464-608d-4de4-b546-72b250705dd7');
        } // if
        if (raudrohi.widgets.g1.router2hostserver.ok_2_call_constructor ===
            false) {
            raudrohi.tmg('23f5f5e4-ad04-4116-9216-72b250705dd7',
                'One should use the static method to get an ' +
                'instance. This class is a singleton.');
        } // if
        // The current version of the raudrohi.widgets.g1.router2hostserver
        // and the threadjump_send/threadjump_receive functions are
        // quite "terrible" due to the underlying phoning system and
        // the server-client "formscript" format.
        //
        // TODO: Refactor this class heavily after the phoning system
        // and formscript format has been refactored. Even the threadjumping
        // communication can be refactored to use the "standard"
        // threadjump redirect functions, BUT, the current implementation
        // is correct and works. So, the threadjumpint API juse in here
        // is the case of "don't fix, what isn't broken".
        //
        // Currently this class allows a newer API to be used with the
        // old, terrible, phoning system and formscript format.
        var self_public_ = this;
        var instance_public_ = self_public_;
        var html_id_ = "server_singleton";
        var pileofmethods_t1_ = new raudrohi.widgets.g1.pileofmethods_t1(
            self_public_, '', html_id_);
        var prc_ = self_public_.private_code_;
        self_public_.phone = new raudrohi.lang.comm.phone("router2hostserver");

        // The phonecall_processing_command_ is part of the
        // backwards compatibility implementation.
        var phonecall_processing_command_ = "router2hostserver_receive_from_server";

        var ricochet_detector_funcname_ = 'threadjumper_ricochet_detector';


        this.thrjr_.router2hostserver_receive_from_server =
        function (ht_wrapper) {
            try {
                if (raudrohi_settings_debug_JavaScript) {
                    raudrohi.base.assert_isObject(ht_wrapper, "ht_wrapper",
                        '51e025b4-3dad-4da5-a556-72b250705dd7');
                    raudrohi.base.assert_isObject(ht_wrapper.get('data'),
                        "ht_wrapper.get('data')",
                        '80910ea9-0873-45d6-a496-72b250705dd7');
                } // if
                var return_command = ht_wrapper.get(
                    'router2hostserver_return_command');
                ht_wrapper.put('destination_command', return_command);
                ht_wrapper.put('return_command', ricochet_detector_funcname_);

                var return_phonenumber = ht_wrapper.get(
                    'router2hostserver_return_phonenumber');
                ht_wrapper.put('destination_phonenumber', return_phonenumber);
                ht_wrapper.put('return_phonenumber',
                    self_public_.phone.get_phone_number());
                self_public_.phone.call(return_phonenumber,
                    return_command + '|||', ht_wrapper);
            } catch (err) {
                raudrohi.tmg('610b864a-ffeb-45c5-9c16-72b250705dd7', err);
            } // catch
        } // thrjr_.router2hostserver_receive_from_server

        prc_.send2server = function (ht_wrapper) { // was formely this.send2server
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht_wrapper.get('data'),
                        "ht_wrapper.get('data')",
                        '57668f71-576b-4f21-bc46-72b250705dd7');
                } // if
                var s_progfte = null;
                try {
                    var ht_data = ht_wrapper.get('data');
                    s_progfte = raudrohi.lang.ht2ProgFTE(ht_data);
                    ht_wrapper.put('data', s_progfte);
                } catch (err) {
                    raudrohi.tmg('38aa6563-91be-42ad-be16-72b250705dd7', err);
                } // catch
                var return_command = ht_wrapper.get('return_command');
                ht_wrapper.put('router2hostserver_return_command',
                    return_command);
                ht_wrapper.put('return_command', phonecall_processing_command_);
                var return_phonenumber = ht_wrapper.get('return_phonenumber');
                ht_wrapper.put('router2hostserver_return_phonenumber',
                    return_phonenumber);
                ht_wrapper.put('return_phonenumber',
                    self_public_.phone.get_phone_number());
                var destination_command = ht_wrapper.get('destination_command');
                s_progfte = raudrohi.lang.ht2ProgFTE(ht_wrapper);
                raudrohi.apparch1.send2server(destination_command,
                    self_public_.phone.get_phone_number(), s_progfte);
                raudrohi.base.pool_of_hashtables.return_used_hashtable(
                    ht_wrapper);
            } catch (err) {
                raudrohi.tmg('c0e732c3-fcc2-4042-aa36-72b250705dd7', err);
            } // catch
        } // prc_.send2server


        this.phone.receive_phonecall = function (a_phonecall_instance) {
            try {
                var data = raudrohi.adapter.trim(a_phonecall_instance.data);
                var a_pr1 = raudrohi.base.bisect(data, '|||');
                raudrohi.base.assert_isNotnull(a_pr1, 'a_pair',
                    '39691372-b430-45c6-9646-72b250705dd7');
                if (pileofmethods_t1_.standard_phonecall_received_t1(a_pr1,
                    a_phonecall_instance)) {
                    return;
                } // if
                var a_pr2;
                var ht_wrapper;
                if (a_pr1.a === phonecall_processing_command_) {
                    a_pr2 =
                    instance_public_.only_for_raudrohi_core_developers.microsession_receive_txt_t2(a_pr1.b);
                    if (a_pr2.a) {
                        return;
                    } // if
                    ht_wrapper = a_pr2.b;
                    self_public_.thrjr_.router2hostserver_receive_from_server(
                        ht_wrapper);
                    return;
                } // if
                ht_wrapper = a_phonecall_instance.data2;
                if (ht_wrapper == null) {
                    var msg = "ht_wrapper===null \na_phonecall_instance.data==" +
                              a_phonecall_instance.data;
                    if (raudrohi_settings_debug_JavaScript === true) {
                        raudrohi.tmg(
                            '93295a4d-c66a-4174-b455-72b250705dd7', msg);
                    } else {
                        raudrohi.adapter.log(msg);
                        return;
                    } // else
                } // if
                // One  can not use the prc_.threadjump_receive, because
                // one needs to access the ht_wrapper.
                prc_.send2server(ht_wrapper);
            } catch (err) {
                raudrohi.widgets.g1.sys.phonecall_receiver_tmg(
                    '8a714788-e877-43c7-b325-72b250705dd7', err,
                    a_phonecall_instance);
            } // catch
        } // receive_phonecall

        self_public_.startup_sequence_init();
    } catch (err) {
        raudrohi.tmg('d94a4f08-2c3a-4921-a995-72b250705dd7', err);
    } // catch
} // raudrohi.widgets.g1.router2hostserver

raudrohi.widgets.g1.router2hostserver.ok_2_call_constructor = false;
raudrohi.widgets.g1.router2hostserver.instanteated = false;
raudrohi.widgets.g1.router2hostserver.get_instance = function () {
    try {
        if (!raudrohi.widgets.g1.router2hostserver.instanteated) {
            raudrohi.widgets.g1.router2hostserver.ok_2_call_constructor = true;
            raudrohi.widgets.g1.router2hostserver =
            new raudrohi.widgets.g1.router2hostserver();
            raudrohi.widgets.g1.router2hostserver.ok_2_call_constructor = false;
            raudrohi.widgets.g1.router2hostserver.instanteated = true;
        } // if
        return raudrohi.widgets.g1.router2hostserver;
    } catch (err) {
        raudrohi.tmg('520f6001-4a75-4b3d-ab55-72b250705dd7', err);
    } // catch
} //raudrohi.widgets.g1.router2hostserver.instanteate


//------------------------------------------------------------------------
//=========================================================================


// The general idea is that saving of data takes place in the
// background in a separate thread and the uploads are enforced
// to complete before logout.
//
// The raudrohi.widgets.g1.uploadenforcer_t1 is a singleton and
// has to be "activated" right after log-on, because
// one does not have access to the server
// without authenticating the session first.
//
// It has to be manually deactivated at log-off and it will
// notify by a threadjump, if its deactivation process is complete.
// The session manager widget has to maintain the session till the
// raudrohi.widgets.g1.uploadenforcer_t1 has completed its deactivation and
// notified the session manager widget of the completion.
//
// The raudrohi.widgets.g1.uploadenforcer_t1 is expected to be used
// by feeding it threadjump calls and it then redirects them to the
// server by using the raudrohi.widgets.g1.router2hostserver.
//
// -----------------------------------
// Actually, this widget is Deprecated and it is
// ONE BIG STUPIDITY, because JavaScript is singlethreaded,
// unless one uses Worker threads.
// One might want to refactor it and then this widget
// might get out of the deprecated status.
raudrohi.widgets.g1.uploadenforcer_t1=function(){
	var self_public_=this;
	try{

		var s_html_id_='raudrohi.widgets.g1.uploadenforcer_t1_is_a_singleton';
		var pileofmethods_t1_=new raudrohi.widgets.g1.pileofmethods_t1(
			self_public_,'',s_html_id_);
		var prc_=self_public_.private_code_;
		this.phone=new raudrohi.lang.comm.phone('uploadenforcer');

		var htqueue_ht_wrappers_2_send=new raudrohi.lang.htQueue();

		function clear_cache(){
			try{
				htqueue_ht_wrappers_2_send.clear();
			} catch (err){
				raudrohi.tmg('4c76305e-97f1-4860-b2fe-0060a0219bd7',err);
			} // catch
		} // clear_cache

		var activated_=false;
		var deactivation_in_progress_=false;
		var deactivator_phone_number_=null;
		this.deactivate=function(deactivator_phone_number){
			try{
				raudrohi.base.assert_isString(deactivator_phone_number,
					'deactivator_phone_number',
					'a194f735-3ed1-4804-82fe-0060a0219bd7');
				if(activated_===false){
					return;
				} // if
				if(deactivation_in_progress_){
					// The reason for this is that one has to
					// notify the completeness of the deactivation
					// process, but it is not possible to notify
					// all deactivation callers in parallel and that
					// brings the issue of determining the legal order
					// of the notification receivers. If the session
					// maintainer receives the notification before others,
					// there might be problems.
					return;
				} // if
				deactivation_in_progress_=true;
				prc_.microsession_dismiss_all();
				clear_cache();
				deactivator_phone_number_=deactivator_phone_number;
				setTimeout('raudrohi.widgets.g1.uploadenforcer_t1.'+
					'private_code_.job_exec()',5);
			} catch (err){
				raudrohi.tmg('37eb77a3-64f2-421a-a1fe-0060a0219bd7',err);
			} // catch
		} // deactivate

		var notification_in_progress_=false;
		function notify_deactivator_of_deactivation_completion(){
			try{
				if(deactivation_in_progress_===false){
					return;
				} // if
				if(notification_in_progress_===true){
					return;
				} // if
				notification_in_progress_=true;
				self_public_.state_switcher_.change_state_2('zero');
				
				var ht_data=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
				prc_.threadjump_send(deactivator_phone_number_,
					'evh_widget_uploadenforcer_deactivated', ht_data, '/dev/null');
				deactivation_in_progress_=false;
				notification_in_progress_=false;
			} catch (err){
				raudrohi.tmg('e12949f6-9737-41b6-b2fe-0060a0219bd7',err);
			} // catch
		} // notify_deactivator_of_deactivation_completion

		// Deactivation is done automatically by going to widget state "zero".
		this.activate=function(){
			try{
				if(activated_===true){
					return;
				} // if
				self_public_.state_switcher_.change_state_2('activated');
			} catch (err){
				raudrohi.tmg('1dd39fc4-b73c-4276-a4fe-0060a0219bd7',err);
			} // catch
		} // activate


		var number_of_jobs_=0;
		// Meant to be used with the setTimeout function from
		// thrjr_.submit_upload_job
		this.private_code_.job_exec=function(){
			try{
				if(activated_===false){
					return;
				} // if
				if(3<number_of_jobs_){
					return;
				} // if
				number_of_jobs_++;
				var ht_wrapper;
				var destination_command;
				while(0<htqueue_ht_wrappers_2_send.length()){
					ht_wrapper=htqueue_ht_wrappers_2_send.pop();
					destination_command=ht_wrapper.get('destination_command');
					prc_.threadjump_redirect_outwards('router2hostserver',
						destination_command, ht_wrapper,
						'process_server_responses');
					raudrohi.base.pool_of_hashtables.return_used_hashtable(
						ht_wrapper);
				} // while
				number_of_jobs_--;
				if(deactivation_in_progress_===true){
					if(number_of_jobs_===0){
						notify_deactivator_of_deactivation_completion();
					} else {
						// The call to the setTimeout here is just to
						// handle a case where the number_of_jobs_!==0 is
						// due to some unfortunate timing gliches.
						// Better safe than sorry. :)
						var n_milliseconds=raudrohi.base.rand(50, 200);
						setTimeout('raudrohi.widgets.g1.uploadenforcer_t1.'+
							'private_code_.job_exec()',n_milliseconds);
					} // if
				} // if
			} catch (err){
				raudrohi.tmg('1d0629c3-6cc9-40f9-91ee-0060a0219bd7',err);
			} // catch
		} // private_code_.job_exec

		// It is assumed that the ht_wrapper has been taken from the
		// raudrohi.base.pool_of_hashtables.
		this.thrjr_.default_command=function(ht_wrapper){
			try{
				if(activated_===false){
					return;
				} // if
				htqueue_ht_wrappers_2_send.push(ht_wrapper);
				setTimeout('raudrohi.widgets.g1.uploadenforcer_t1.'+
					'private_code_.job_exec()',5);
			} catch (err){
				raudrohi.tmg('5c34edb0-0c32-4f2f-b3ee-0060a0219bd7',err);
			} // catch
		} // submit_upload_job
		

		this.thrjr_.process_server_responses=function(ht_wrapper){
			try{
				if(activated_===false){
					return;
				} // if
				prc_.threadjump_redirect_inwards(ht_wrapper);
			} catch (err){
				raudrohi.tmg('26774659-d4a6-4c11-95ee-0060a0219bd7',err);
			} // catch
		} // thrjr_.process_server_responses


		prc_.stsw_exit_activated=function(){
			try{
				if(!deactivation_in_progress_){
					// If it already resides in state "zero",
					// the exit func is not called.
					raudrohi.tmg('8b60a11a-14d0-450b-a4ee-0060a0219bd7',
						'The deactivation must be initiated from '+
						'method \'deactivate(...)\'.');
				}
				clear_cache();
				activated_=false;
			} catch (err){
				raudrohi.tmg('4cfdda2d-840a-45be-93ee-0060a0219bd7',err);
			} // catch
		} // stsw_exit_activated
		self_public_.state_switcher_.declare_state_default_exit_func(
			'activated',prc_.stsw_exit_activated);

		prc_.stsw_enter_activated=function(){
			try{
				activated_=true;
			} catch (err){
				raudrohi.tmg('3d567bdc-11bd-4d38-94ee-0060a0219bd7',err);
			} // catch
		} // stsw_enter_activated
		self_public_.state_switcher_.declare_state_default_entry_func(
			'activated',prc_.stsw_enter_activated);
		self_public_.state_switcher_.declare_state_2_be_in_cluster(
			'cluster_activated','activated');

		this.phone.receive_phonecall=pileofmethods_t1_.receive_phonecall_t1;


	} catch (err){
		raudrohi.tmg('3253a265-9c3c-4682-91ee-0060a0219bd7',err);
	} // catch
} // raudrohi.widgets.g1.uploadenforcer_t1

//=========================================================================

// It wraps a "raw" HTML string, the content, to the widgets framework.
raudrohi.widgets.g1.html_t2 = function (s_html_id, parent_instance) {
    try {
        var self_public_ = this;
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_is_HTML_ID(s_html_id, 's_html_id',
                '206b39e2-270a-4b2f-86ae-a32350705dd7');
            raudrohi.base.assert_is_g1_widget(parent_instance,
                'parent_instance',
                'df3f203c-81ed-4414-8494-a32350705dd7');
        } // if

        var pileofmethods_t1_ = new raudrohi.widgets.g1.pileofmethods_t1(
            self_public_, 'raudrohi.widgets.g1.html_t2_', s_html_id);
        var prc_ = self_public_.private_code_;
        prc_.parent_instance_ = parent_instance

        prc_.content_ = "";
        prc_.content_set_ = true;

        prc_.customizable.compulsory.render_editable = function () {
            try {
                // This widget is so simplistic that it doens't even
                // have any "create_containers" methods.
                //var s_rendered=prc_.selfread.wrap_2_alignment_div(
                //	prc_.content_);
                var s_rendered = prc_.content_;
                raudrohi.base.set_innerHTML(prc_.container_id_, s_rendered);
            } catch (err) {
                raudrohi.tmg('9f2b337c-30cf-4358-8977-a32350705dd7', err);
            } // catch
        } // render_editable

        prc_.customizable.compulsory.render_readonly =
        prc_.customizable.compulsory.render_editable;

        this.set_content = function (s_html) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_html, 's_html',
                        '8e5f67cb-2bec-4cf0-8413-a32350705dd7');
                } // if
                prc_.content_ = s_html;
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('42baf328-2e15-4512-a7d4-a32350705dd7', err);
            } // catch
        } // set_content

        this.get_content = function () {
            try {
                var s_out = "" + prc_.content_;
                return s_out;
            } catch (err) {
                raudrohi.tmg('182d24eb-5aaa-4b14-a67e-a32350705dd7', err);
            } // catch
        } // get_content


        self_public_.startup_sequence_init();

    } catch (err) {
        raudrohi.tmg('43066f42-ccef-424a-a662-a32350705dd7', err);
    } // catch
} // raudrohi.widgets.g1.html_t2

//=========================================================================
//=========================================================================

// The use of this widget is discouraged because it can be
// replaced with a local variable that stores the HTML.
// It's also a bit clumsy and somewhat outdated, so please
// do not take treat this code as a code example. It's here
// only for bacgwards compatibility.
raudrohi.widgets.g1.html_t1 = function (s_html_id) {
    try {
        var self_public_ = this;
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_is_HTML_ID(s_html_id, 's_html_id',
                '2ba26703-a247-470c-bd36-01a150705dd7');
        } // if
        var pileofmethods_t1_ = new raudrohi.widgets.g1.pileofmethods_t1(
            self_public_, 'raudrohi.widgets.g1.html_t1_', s_html_id);
        var prc_ = self_public_.private_code_;

        var containers_html_cache_;

        function create_containers() {
            try {
                if (!prc_.containers_html_cached_) {
                    var ht = raudrohi.widgetless_ui.func.get_alignment_style_values(prc_.alignment1_);
                    containers_html_cache_ = '<div id="' + prc_.html_id_ +
                                             '" style="vertical-align:' +
                                             ht.get('vertical-align') +
                                             ';text-align:' +
                                             ht.get('text-align') +
                                             ';"></div>';
                    raudrohi.base.pool_of_hashtables.return_used_hashtable(ht);
                    prc_.containers_html_cached_ = true;
                } // if
                raudrohi.base.set_innerHTML(prc_.container_id_,
                    containers_html_cache_);
            } catch (err) {
                raudrohi.tmg('41f8ea04-40fe-4727-9b16-01a150705dd7', err);
            } // catch
        } // create_containers

        prc_.customizable.compulsory.render_editable = function () {
            try {
                create_containers();
                raudrohi.base.set_innerHTML(prc_.html_id_, prc_.content_);
            } catch (err) {
                raudrohi.tmg('1b3fd2a3-984d-4702-8316-01a150705dd7', err);
            } // catch
        } // render_editable

        prc_.customizable.compulsory.render_readonly =
        prc_.customizable.compulsory.render_editable;

        this.set_content = function (s_html) {
            try {
                raudrohi.base.assert_isString(s_html, 's_html',
                    '4f4c5413-e3fa-475d-a836-01a150705dd7');
                prc_.content_ = s_html;
                if (self_public_.is_hidden() === false) {
                    self_public_.unhide();
                } // if
            } catch (err) {
                raudrohi.tmg('24aec8a4-e8db-44e3-a656-01a150705dd7', err);
            } // catch
        } // set_content

        this.set_content_2_p = function (paragraph_text) {
            try {
                raudrohi.base.assert_isString(paragraph_text, 'html_text',
                    '3c2a25c3-4041-438f-a126-01a150705dd7');
                prc_.content_ = '<p>' + paragraph_text + '</p>';
                if (self_public_.is_hidden() === false) {
                    self_public_.unhide();
                } // if
            } catch (err) {
                raudrohi.tmg('4fde85c1-33ca-4dc8-8c56-01a150705dd7', err);
            } // catch
        } // set_content_t1

        self_public_.startup_sequence_init();

        this.phone.receive_phonecall = function (a_phonecall_instance) {
            try {
                var data = raudrohi.adapter.trim(a_phonecall_instance.data);
                var a_pair = raudrohi.base.bisect(data, '|||');
                raudrohi.base.assert_isNotnull(a_pair, 'a_pair',
                    'e3342e2f-1545-41f6-a716-01a150705dd7');
                if (pileofmethods_t1_.standard_phonecall_received_t1(a_pair,
                    a_phonecall_instance)) {
                    return;
                } // if
                var a_pr3;
                switch (a_pair.a) {
                    case 'set_content':
                        a_pr3 = raudrohi.base.bisect(a_pair.b, '|||');
                        self_public_.set_content(a_pr3.a);
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript === true) {
                            raudrohi.tmg(
                                '6f364d8a-1154-4819-9f66-01a150705dd7',
                                'There\'s no message handler for ' + a_pair.a);
                        } // if
                } // switch
            } catch (err) {
                raudrohi.widgets.g1.sys.phonecall_receiver_tmg(
                    '23751e61-5b0d-446f-9d16-01a150705dd7', err,
                    a_phonecall_instance);
            } // catch
        } // receive_phonecall
    } catch (err) {
        raudrohi.tmg('16fa9a1d-80bf-44fd-8336-01a150705dd7', err);
    } // catch
} // raudrohi.widgets.g1.html_t1

//=========================================================================
//=========================================================================


raudrohi.widgets.g1.button_t1=function(s_html_id, button_label){
	var self_public_=this;
	try{

		var pileofmethods_t1_=new raudrohi.widgets.g1.pileofmethods_t1(
			self_public_,'raudrohi.widgets.g1.button_t1_',s_html_id);
		var prc_=self_public_.private_code_;
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isString(s_html_id, 's_html_id',
				'1b13b364-5d4d-4385-825a-01f070919bd7');
			raudrohi.base.assert_isString(button_label, 'button_label',
				'792d1dab-1858-4cf3-b2a9-01f070919bd7');
		} // if
		prc_.label_=button_label;
		var label_color_default_='#000000';
		var button_background_color_default_='#EEEEEE';
		var label_color_=label_color_default_;
		var button_background_color_=button_background_color_default_;

		this.evh_button_pushed_impl=function(){
		// This method is subject to overloading by the parent
		// widget.
		} // evh_button_pushed_impl

		this.evh_button_pushed=function(e){
			try{
				raudrohi.adapter.YUI_preventdefault(e);
				self_public_.evh_button_pushed_impl();
			} catch (err){
				raudrohi.tmg('3d6123a2-ffa1-4b36-8d29-01f070919bd7',err);
			} // catch
		} // evh_button_pushed

		prc_.customizable.compulsory.render_editable=function(){
			try{
				raudrohi.widgetless_ui.func.create_button_v1(prc_.html_id_, prc_.label_,
					self_public_.evh_button_pushed, '');
				if(prc_.is_readonly_===false){
					raudrohi.adapter.remove_HTML_attribute(prc_.html_id_,
						'disabled');
					raudrohi.adapter.editStyle(prc_.html_id_,
						'color',label_color_);
					raudrohi.adapter.editStyle(prc_.html_id_,
						'background',button_background_color_);
				} else {
					raudrohi.adapter.setAttribute(prc_.html_id_, 'disabled',
						'disabled');
				} // else
			} catch (err){
				raudrohi.tmg('232a2087-6e13-430a-88d9-01f070919bd7',err);
			} // catch
		} // render_editable

		prc_.customizable.compulsory.render_readonly=prc_.customizable.compulsory.render_editable;

		this.set_label=function(a_label){
			try{
				prc_.label_=a_label;
				if(self_public_.is_hidden()===false){
					self_public_.unhide();
				} // if
			} catch (err){
				raudrohi.tmg('2022a4e3-fb21-44ab-9c39-01f070919bd7',err);
			} // catch
		} // set_label

		this.get_label=function(a_label){
			try{
				return prc_.label_;
			} catch (err){
				raudrohi.tmg('1e618e12-fb22-4a31-be49-01f070919bd7',err);
			} // catch
		} // get_label



		this.set_colors=function(s_button_label_color,s_button_background_color){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.lang.assert_is_an_HTML_color(s_button_label_color,
						's_button_label_color',
						'380462a2-c279-41ee-9d49-01f070919bd7');
					raudrohi.lang.assert_is_an_HTML_color(s_button_background_color,
						's_button_background_color',
						'dbac6c07-b19d-41e2-b9a9-01f070919bd7');
				} // if
				label_color_=s_button_label_color;
				button_background_color_=s_button_background_color;
				if(self_public_.is_hidden()===false){
					self_public_.unhide();
				} // if
			} catch (err){
				raudrohi.tmg('562e0521-2dcf-42da-a529-01f070919bd7',err);
			} // catch
		} // set_colors

		// Sets the button label and background colors to their default values.
		this.reset_colors=function(){
			try{
				label_color_=label_color_default_;
				button_background_color_=button_background_color_default_;
				if(self_public_.is_hidden()===false){
					self_public_.unhide();
				} // if
			} catch (err){
				raudrohi.tmg('49bf7171-bbf8-45f6-8629-01f070919bd7',err);
			} // catch
		} // reset_colors

		self_public_.startup_sequence_init();

		this.phone.receive_phonecall=function(a_phonecall_instance){
			try{
				var data=raudrohi.adapter.trim(a_phonecall_instance.data);
				var a_pair=raudrohi.base.bisect(data, '|||');
				raudrohi.base.assert_isNotnull(a_pair,'a_pair',
					'194b01d1-0eb9-47da-a139-01f070919bd7');
				if(pileofmethods_t1_.standard_phonecall_received_t1(a_pair,
					a_phonecall_instance )){
					return;
				} // if
				switch(a_pair.a){
					case 'set_label':
						self_public_.set_label(a_phonecall_instance.data2);
						break;
					default:
						if(raudrohi_settings_debug_JavaScript===true){
							raudrohi.tmg(
								'6232a677-ba1f-4e90-9e39-01f070919bd7',
								'There\'s no message handler for '+a_pair.a);
						} // if
				} // switch
			} catch (err){
				raudrohi.widgets.g1.sys.phonecall_receiver_tmg(
					'61529a92-77ea-430e-b529-01f070919bd7',err,
					a_phonecall_instance);
			} // catch
		} // receive_phonecall
	} catch (err){
		raudrohi.tmg('3197c0b5-afd7-44ee-bb19-01f070919bd7',err);
	} // catch
} // raudrohi.widgets.g1.button_t1

//------------------------------------------------------------------------
raudrohi.widgets.g1.button_t1_fac_reset_default_label='Button Label Not Set';
raudrohi.widgets.g1.button_t1_factory=function(){
	//var self_public_=this;
	var default_label_=raudrohi.widgets.g1.button_t1_fac_reset_default_label;
	try{
		this.create_element=function(){
			try{
				var elem=new raudrohi.widgets.g1.button_t1(
					'button_html_id_'+raudrohi.base.generate_id(),
					default_label_);
				return elem;
			} catch (err){
				raudrohi.tmg('1fdb64b4-7042-4a2f-9959-01f070919bd7',err);
			} // catch
		} // create_element
	} catch (err){
		raudrohi.tmg('5b11ada1-d059-4ad7-8e19-01f070919bd7',err);
	} // catch
} // raudrohi.widgets.g1.button_t1_factory

raudrohi.widgets.g1.button_t1_resetter=function(){
	//var self_public_=this;
	try{
		this.reset_element=function(a_button_widget_instance){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isObject(a_button_widget_instance,
						'a_button_widget_instance',
						'c1c5bcd2-db1b-4cac-8a58-01f070919bd7');
				} // if
				a_button_widget_instance.hide();
				a_button_widget_instance.set_label(
					raudrohi.widgets.g1.button_t1_fac_reset_default_label);
			} catch (err){
				raudrohi.tmg('110ba464-3d32-4d76-b738-01f070919bd7',err);
			} // catch
		} // create_element
	} catch (err){
		raudrohi.tmg('823406a3-8aeb-4f0e-8028-01f070919bd7',err);
	} // catch
} // raudrohi.widgets.g1.button_t1_resetter

//------------------------------------------------------------------------
//=========================================================================

// ht_params is a Hashtable that must contain key 'type', which 
// must have a value of either "text" or "password".
raudrohi.widgets.g1.textarea_t1 =
function (s_html_id, i_number_of_columns, i_number_of_rows, ht_params) {
    var self_public_ = this;
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_is_HTML_ID(s_html_id, 's_html_id',
                'fef8cd12-12d4-4512-a5d3-d0a250705dd7');
            raudrohi.base.assert_isNumber(i_number_of_rows, 'i_number_of_rows',
                '7274b134-683c-46a1-84d3-d0a250705dd7');
            raudrohi.base.assert_isNumber(i_number_of_columns,
                'i_number_of_columns', '0b57ab63-4e4a-4b24-8dd3-d0a250705dd7');
            if (i_number_of_rows < 1) {
                raudrohi.tmg('4a00be57-d24e-4d7e-94d3-d0a250705dd7',
                    'i_number_of_rows<1');
            } // if
            if (i_number_of_columns < 1) {
                raudrohi.tmg('b12bca23-9c8d-475a-93d3-d0a250705dd7',
                    'i_number_of_columns<1');
            } // if
            raudrohi.base.assert_isObject(ht_params, 'ht_params',
                '361e9417-4171-48e2-83d3-d0a250705dd7');
            raudrohi.base.assert_isString(ht_params.get('type'),
                'type', '9650c430-28b0-46a5-b5d3-d0a250705dd7');
        } // if
        var lc_s_emptystring = raudrohi_glc_s_emptystring;
        var lc_s_space = raudrohi_glc_s_space;
        var lc_s_br = raudrohi_glc_s_br;

        var pileofmethods_t1_ = new raudrohi.widgets.g1.pileofmethods_t1(
            self_public_, 'raudrohi.widgets.g1.textarea_t1_', s_html_id);
        var prc_ = self_public_.private_code_;
        var msgbrd_html_id_ = prc_.html_id_ + '_msgbrd';

        // The html_id_tmp_ must not be refactored out, because it overcomes
        // a bug in the YUI lib. The
        // raudrohi.widgets.g1.sys.keylisteners_unit.add_keylistener has a more
        // throught comment. The html_id_tmp_ is used for allowing
        // the actual HTML id to differ every time the widget gets unhidden
        // and that's needed for overcoming the YUI bug.
        var html_id_tmp_ = prc_.html_id_ + '_';
        var html_id_tmp_counter_ = 0;

        prc_.container_id_ = prc_.html_id_ + '_div';

        // The cloning of the ht_params is necessary, because one migth
        // want to create multiple textareas with the same parameters
        // and obviously things might get tangled, if the textareas
        // share the ht_params instance. There's also a possibility that
        // the ht_params that is used for instantieating multiple
        // text-areas, is thrown back to the pool after use. Within the
        // pool it gets, hopefully, cleared, for new use.
        prc_.ht_params_ = raudrohi.base.clone_hashtable(ht_params);
        var b_apply_wordwrap_ = false;

        var textarea_name_ = s_html_id + '_name';
        var n_of_rows_ = i_number_of_rows;
        var n_of_columns_ = i_number_of_columns;
        var i_wordwrap_max_line_width_ = i_number_of_columns;


        var containers_html_cache_prefix_;

        function create_containers_prefix() {
            try {
                if (!prc_.containers_html_cached_) {
                    var ht = raudrohi.widgetless_ui.func.get_alignment_style_values(prc_.alignment1_);
                    containers_html_cache_prefix_ =
                    '<div style="vertical-align:' +
                    ht.get('vertical-align') + ';text-align:' +
                    ht.get('text-align') + ';">';
                    raudrohi.base.pool_of_hashtables.return_used_hashtable(ht);
                } // if
            } catch (err) {
                raudrohi.tmg('323455d5-9f8e-4364-9ac3-d0a250705dd7', err);
            } // catch
        } // create_containers_prefix

        var containers_html_cache_;
        var containers_html_cache_x1_;
        var containers_html_cache_x1_cached_ = false;

        function create_containers_editable() {
            try {
                // One can not cache the editable version of the
                // container HTML due to the neccesity of the
                // html_id_tmp_, which is used every time
                // the widget is unhidden. (The YUI related bug workaround.)
                create_containers_prefix();
                var prefix = containers_html_cache_prefix_;
                if (n_of_rows_ == 1) {
                    prefix = prefix + '<input ';
                } else {
                    prefix = prefix + '<textarea ';
                } // else
                html_id_tmp_ = prc_.html_id_ + html_id_tmp_counter_;
                prefix = prefix + 'id="' + html_id_tmp_ + '" ';
                html_id_tmp_counter_++;
                if (!prc_.containers_html_cached_) {
                    containers_html_cache_ = '';
                    if (n_of_rows_ == 1) {
                        containers_html_cache_ = '' +
                                                 ' type="' +
                                                 prc_.ht_params_.get('type') +
                                                 '" name="' + textarea_name_ +
                                                 '" ' +
                                                 'class="raudrohi_widgets_g1_textarea_t1"/>';
                        //'<input type="text" id="'+prc_.html_id_+'_shadow" '+
                        //'style="visibility:hidden; width:1em;" />';
                        // If the "shadow" input field is missing,
                        // then a push to the ENTER key will trigger
                        // the sending of the form and a page reload.
                    } else {
                        // For some weird reason the HTML taxtarea
                        // is displayed always with one additional row.
                        // For example, if rows==1, there will be 2 rows,
                        // if rows==42, there will be 43 rows, etc.
                        containers_html_cache_ = '' +
                                                 '  name="' + textarea_name_ +
                                                 '" rows="' + (n_of_rows_ - 1) +
                                                 '" cols="' + n_of_columns_ +
                                                 '"></textarea>'
                    } // else
                    containers_html_cache_ = containers_html_cache_ + '</div>';
                    prc_.containers_html_cached_ = true;
                } // if
                if (!containers_html_cache_x1_cached_) {
                    containers_html_cache_x1_ = '' +
                                                '<table class="raudrohi_positioning_table"><tbody>' +
                                                '<tr>' +
                                                '<td><div id="' +
                                                msgbrd_html_id_ +
                                                '"></div></td>' +
                                                '</tr>' +
                                                '<tr>' +
                                                '<td>';//prefix+containers_html_cache_+'</td>'+
                    //'</tr>'+
                    //'</tbody></table>';
                    containers_html_cache_x1_cached_ = true;
                } // if
                var s_html = containers_html_cache_x1_ +
                             prefix + containers_html_cache_ + '</td>' +
                             '</tr></tbody></table>';
                raudrohi.base.set_innerHTML(prc_.container_id_, s_html);
                //raudrohi.base.set_innerHTML(prc_.container_id_,s_html);

                // The reason, why the width has to be applied dynamically is
                // that this way it's possible to edit the width of the
                // quite "insensitive" textarea nodes. Thank God, that at least
                // this works with the s___ing, all glory, web technology.
                // If one uses the size attribute in stead of the width
                // attribute, boxes that match by the value of their size
                // attribute are rendered unequal in Internet Explorer 8.
                raudrohi.adapter.editStyle(html_id_tmp_,
                    'width', n_of_columns_ + 'em');
            } catch (err) {
                raudrohi.tmg('1290ab35-ddc1-40c8-b6c3-d0a250705dd7',
                    'phonenumber==' + self_public_.phone.get_phone_number() +
                    '  err==' + err);
            } // catch
        } // create_containers_editable

        function create_containers_readonly() {
            try {
                prc_.customizable.optional.content_from_GUI_2_vars();
                create_containers_prefix();
                var s0 = '' + prc_.content_;
                if (b_apply_wordwrap_ === true) {
                    var b_use_fake_but_fast = true;
                    s0 = raudrohi.lang.word_wrap(s0,
                        i_wordwrap_max_line_width_,
                        lc_s_br, lc_s_space, b_use_fake_but_fast);
                } // if
                var s1 = raudrohi.lang.fixed_size_string_html(s0);
                containers_html_cache_ = containers_html_cache_prefix_ +
                                         s1 + '</div>';
                prc_.containers_html_cached_ = true;
                raudrohi.base.set_innerHTML(prc_.container_id_,
                    containers_html_cache_);
            } catch (err) {
                raudrohi.tmg('2a5fd0a1-3024-473c-91c3-d0a250705dd7', err);
            } // catch
        } // create_containers_readonly

        this.set_wordwrap = function (i_wordwrap_max_line_width_or_null) {
            try {
                if (i_wordwrap_max_line_width_or_null === null) {
                    b_apply_wordwrap_ = false;
                    return;
                } // if
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(
                        i_wordwrap_max_line_width_or_null,
                        'i_wordwrap_max_line_width_or_null',
                        'bfe8944b-59b4-4acc-b1c3-d0a250705dd7');
                    if (i_wordwrap_max_line_width_or_null < 1) {
                        raudrohi.tmg('c9d7c719-1490-436f-91c3-d0a250705dd7',
                            "i_wordwrap_max_line_width_or_null==" +
                            i_wordwrap_max_line_width_or_null);
                    } // if
                } // if
                i_wordwrap_max_line_width_ = i_wordwrap_max_line_width_or_null;
                b_apply_wordwrap_ = true;
            } catch (err) {
                raudrohi.tmg('0d45d41f-d985-4031-b7c3-d0a250705dd7', err);
            } // catch
        } // this.set_wordwrap

        prc_.customizable.compulsory.render_editable = function () {
            try {
                create_containers_editable();
                raudrohi.widgetless_ui.func.set_formfield_value(html_id_tmp_,
                    prc_.content_);
                prc_.self_is_hidden_ = false;
                if (prc_.keylisteners_unit_inited_) {
                    prc_.keylisteners_unit_.detach_listeners_from_DOM_elements();
                    prc_.keylisteners_unit_.attach_listeners2_DOM_elements(
                        html_id_tmp_);
                } // if
            } catch (err) {
                raudrohi.tmg('5f621c1c-e53f-4e87-85c3-d0a250705dd7',
                    'phonenumber==' + self_public_.phone.get_phone_number() +
                    '  err==' + err);
            } // catch
        } // render_editable

        prc_.customizable.compulsory.render_readonly = function () {
            try {
                create_containers_readonly();
            } catch (err) {
                raudrohi.tmg('72fa733d-dac5-492d-a2c3-d0a250705dd7', err);
            } // catch
        } // render_readonly

        this.set_content = function (a_string) {
            try {
                raudrohi.base.assert_isString(a_string,
                    'a_string', 'c79df730-c821-4160-a4c3-d0a250705dd7');
                prc_.content_ = a_string;
                if (self_public_.is_hidden() === false) {
                    self_public_.unhide();
                } // if
            } catch (err) {
                raudrohi.tmg('1dcf4a26-fefc-43f0-92c3-d0a250705dd7', err);
            } // catch
        } // set_content

        // The floating_point_separator_ is useful if the value is
        // set programmatically as a number.
        var floating_point_separator_ = '.';
        this.set_floating_point_separator = function (a_string) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(a_string, 'a_string',
                        '8a897f41-8367-41bd-84b3-d0a250705dd7');
                    if (a_string == '') {
                        raudrohi.tmg('3d5d3558-a124-414b-a5b3-d0a250705dd7',
                            'The floating point separator is not allowed ' +
                            'to be an empty string.');
                    } // if
                } // if
                floating_point_separator_ = a_string;
            } catch (err) {
                raudrohi.tmg('03397915-e844-4c7e-b5b3-d0a250705dd7', err);
            } // catch
        } // set_floating_point_separator

        this.get_floating_point_separator = function () {
            try {
                return floating_point_separator_;
            } catch (err) {
                raudrohi.tmg('afb04e20-02c0-4654-91b3-d0a250705dd7', err);
            } // catch
        } // get_floating_point_separator

        this.set_content_as_number = function (a_float_or_int) {
            try {
                raudrohi.base.assert_isNumber(a_float_or_int, 'a_float_or_int',
                    '680a9c63-7be4-484c-beb3-d0a250705dd7');
                prc_.content_ = raudrohi.lang.number2str(a_float_or_int,
                    floating_point_separator_)
                prc_.content_set_ = true;
                if (self_public_.is_hidden() === false) {
                    self_public_.unhide();
                } // if
            } catch (err) {
                raudrohi.tmg('2c108232-3985-4349-87b3-d0a250705dd7', err);
            } // catch
        } // set_content_as_number

        this.get_content = function () {
            try {
                var content;
                if (self_public_.is_hidden() || prc_.is_readonly_) {
                    content = prc_.content_;
                } else {
                    content =
                    raudrohi.widgetless_ui.func.get_formfield_value(html_id_tmp_);
                } // else
                if (prc_.bitfield_.is_set('do_not_trim_content')) {
                    return '' + content;
                } // if
                var s_ct = raudrohi.adapter.trim(content);
                prc_.content_ = s_ct;
                if ((self_public_.is_hidden() === false) &&
                    (prc_.is_readonly_ === false)) {
                    raudrohi.widgetless_ui.func.set_formfield_value(html_id_tmp_,
                        prc_.content_);
                } // if
                return '' + s_ct;
            } catch (err) {
                raudrohi.tmg('bc9e4947-8b60-447e-a1b3-d0a250705dd7', err);
            } // catch
        } // get_content

        // Returns a boolean.
        this.value_is_empty_after_trimming_spaces_and_linebreaks = function () {
            try {
                var s0 = self_public_.get_content();
                var s1 = raudrohi.base.gsubAllLinebreaksSpacesTabs(s0);
                if (s1 === '') {
                    return true;
                } // if
                return false;
            } catch (err) {
                raudrohi.tmg('13ff0111-de06-4f0d-82b3-d0a250705dd7', err);
            } // catch
        } // value_is_empty_after_trimming_spaces_and_linebreaks

        // Returns raudrohi.core.triple, where
        // a_triple.a==false,  if the interpretation of the field
        // content as float succeeded and a_triple.a==true, if
        // the interpretation failed.
        // If the operation succeeded, the a_triple.b is assigned
        // a float value. Otherwise it is assigned a string with an error
        // message that can be shown to a user.
        // If the a_string has a string value that depicts a whole number,
        // then the whole number is converted to a floating point number.
        //
        // If the text field is an empty string after trimming, then
        // the operation is considered to be failed, i.e. a_triple.a===true,
        // and the a_triple.c===true. If the textfield is not empty,
        // regardless of the operation success/failure, the a_triple.c===false.
        //
        // A comma is interpreted as a point.
        //
        // TODO: refactor this method out of here. This method is
        // DEPRECATED, because it's a matter of interpretation,
        // whether a string represents a float or not. There are also
        // multiple notations for floats and the "string parsing"
        // by one set of assumptions is a separate task, not something
        // that a GUI element should do.
        this.get_content_as_float = function () {
            try {
                var s_content = self_public_.get_content();
                var a_triple = raudrohi.base.private_code.string2float(s_content);
                if (a_triple.a) {
                    if (a_triple.c === true) {
                        a_triple.b = raudrohi.lang.userinterface_text.get(100);
                    } else {
                        a_triple.b = raudrohi.lang.userinterface_text.get(97) +
                                     ' ' + s_content;
                    } // else
                    prc_.content_set_ = false;
                } // if
                return a_triple;
            } catch (err) {
                raudrohi.tmg('01de965e-8ab8-4356-81b3-d0a250705dd7', err);
            } // catch
        } // get_content_as_float

        // A peculiarity of the textarea_t1 widget is that the HTML
        // id of the textfield changes,  whenever the widget is unhidden.
        this.get_textfield_html_id = function () {
            try {
                return html_id_tmp_;
            } catch (err) {
                raudrohi.tmg('11d8064d-1773-4382-97a3-d0a250705dd7', err);
            } // catch
        } // get_current_html_id


        this.set_focus = function () {
            try {
                if (self_public_.is_hidden() || prc_.is_readonly_) {
                    return;
                } // if
                raudrohi.widgetless_ui.func.set_focus_2_formfield(html_id_tmp_);
            } catch (err) {
                raudrohi.tmg('4c1c1e31-5baa-4762-a8a3-d0a250705dd7', err);
            } // catch
        } // set_focus

        // It's useful for dirty hacks, where the rendering of
        // the DOM elements lags behind JavaScript execution.
        // If the rendering takes place in the background and focus
        // set events are not placed to stack, then, unfortunately,
        // this method might not be as dirty as it seems.
        this.set_focus_with_a_delay = function (i_delay_in_milliseconds) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(i_delay_in_milliseconds,
                        'i_delay_in_milliseconds',
                        '463b0f2f-403e-4a87-b3a3-d0a250705dd7');
                    if (i_delay_in_milliseconds < 0) {
                        raudrohi.tmg('7f991440-0f17-4f5a-82a3-d0a250705dd7',
                            'i_delay_in_milliseconds==' +
                            i_delay_in_milliseconds + ' < 0');
                    } // if
                } // if
                var cmd = "raudrohi.lang.phonebooth_dev_null.phone.call('" +
                          self_public_.phone.get_phone_number() +
                          "','set_focus|||whatever|||',42);"
                window.setTimeout(cmd, i_delay_in_milliseconds);
            } catch (err) {
                raudrohi.tmg('2512aa2c-f2bc-46e3-a5a3-d0a250705dd7', err);
            } // catch
        } // set_focus_with_a_delay

        self_public_.private_code_.evh_.evh_focus_textarea_t1 = function (e) {
        } // evh_focus

        // The focus and blur case is due to the
        // background color changing feature.


        this.set_keylistener =
        function (key_number_as_string, event_handler_func) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(key_number_as_string,
                        'key_number_as_string',
                        'fd5bcb11-9f7a-4ce9-82a3-d0a250705dd7');
                    raudrohi.base.assert_isFunction(event_handler_func,
                        'event_handler_func',
                        '6230b161-cda4-46e7-aaa3-d0a250705dd7');
                } // if
                if (!prc_.keylisteners_unit_inited_) {
                    prc_.keylisteners_unit_ =
                    new raudrohi.widgets.g1.sys.keylisteners_unit(self_public_);
                    prc_.keylisteners_unit_inited_ = true;
                } // if
                prc_.keylisteners_unit_.add_keylistener(html_id_tmp_,
                    key_number_as_string, event_handler_func);
            } catch (err) {
                raudrohi.tmg('ae1b3354-ce32-427e-82a3-d0a250705dd7', err);
            } // catch
        } // set_keylistener


        prc_.customizable.optional.content_from_GUI_2_vars = function () {
            try {
                if ((prc_.is_readonly_) || (self_public_.is_hidden())) {
                    return;
                } // if
                var content = raudrohi.widgetless_ui.func.get_formfield_value(html_id_tmp_);
                if (prc_.bitfield_.is_set('do_not_trim_content')) {
                    prc_.content_ = content;
                    return;
                } // if
                var s_ct = raudrohi.adapter.trim(content);
                prc_.content_ = s_ct;
                if ((self_public_.is_hidden() === false) &&
                    (prc_.is_readonly_ === false)) {
                    raudrohi.widgetless_ui.func.set_formfield_value(html_id_tmp_,
                        prc_.content_);
                } // if
            } catch (err) {
                raudrohi.tmg('f608374e-8137-4160-8193-d0a250705dd7', err);
            } // catch
        } // content_from_GUI_2_vars

        this.hide = function (true_if_update_DOM) {
            try {
                if (self_public_.is_hidden() === true) {
                    return;
                } // if
                if (!prc_.is_readonly_) {
                    prc_.customizable.optional.content_from_GUI_2_vars();
                    prc_.content_ =
                    raudrohi.widgetless_ui.func.get_formfield_value(html_id_tmp_);
                } // if
                if (prc_.keylisteners_unit_inited_) {
                    prc_.keylisteners_unit_.detach_listeners_from_DOM_elements();
                } // if
                if (true_if_update_DOM) {
                    raudrohi.base.set_innerHTML(prc_.container_id_, '');
                } // if
                prc_.self_is_hidden_ = true;
            } catch (err) {
                raudrohi.tmg('bc3cdbc2-5f3f-43da-b393-d0a250705dd7', err);
            } // catch
        } // hide

        this.get_content_2_collection_t1 = function (ht) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht, 'ht',
                        '6a0cb42b-b7d0-4b95-9193-d0a250705dd7');
                } // if
                raudrohi.wg_processing_t1.dbfcreate_textarea_t1(ht,
                    self_public_, true); // TODO: Think the trimming part here over.
            } catch (err) {
                raudrohi.tmg('317f944f-6489-4d64-a193-d0a250705dd7', err);
            } // catch
        } // get_content_2_collection_t1


        this.set_content_from_collection_t1 = function (ht) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht, 'ht',
                        '8de778d2-6eac-4c59-8393-d0a250705dd7');
                } // if
                var s_key_field_set = raudrohi.wg_processing_t1.s_key_field_set(
                    self_public_);
                if (ht.get(s_key_field_set) === 'f') {
                    self_public_.set_content("");
                    return;
                } // if
                var s_key_field = raudrohi.wg_processing_t1.s_key_field(
                    self_public_);
                var s = ht.get(s_key_field);
                self_public_.set_content(s);
            } catch (err) {
                raudrohi.tmg('84c4e8d5-4780-42ff-8593-d0a250705dd7', err);
            } // catch
        } // set_content_from_collection_t1

        this.phone.receive_phonecall = function (a_phonecall_instance) {
            try {
                var data = raudrohi.adapter.trim(a_phonecall_instance.data);
                var a_pair = raudrohi.base.bisect(data, '|||');
                raudrohi.base.assert_isNotnull(a_pair, 'a_pair',
                    '2e7f5ac2-722a-4ebc-8793-d0a250705dd7');
                if (pileofmethods_t1_.standard_phonecall_received_t1(a_pair,
                    a_phonecall_instance)) {
                    return;
                } // if
                switch (a_pair.a) {
                    case 'set_focus':
                        self_public_.set_focus();
                        break;
                    case 'set_content':
                        self_public_.set_content(a_phonecall_instance.data2);
                        break;
                    case 'get_content':
                        var c = self_public_.get_content();
                        self_public_.phone.call(
                            a_phonecall_instance.origin_phone_number, c, 0);
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript === true) {
                            raudrohi.tmg(
                                '564a9525-f650-4425-9293-d0a250705dd7',
                                'There\'s no message handler for ' + a_pair.a);
                        } // if
                } // switch
            } catch (err) {
                raudrohi.tmg('2ddd454d-0c1c-4831-b583-d0a250705dd7', err);
            } // catch
        } // receive_phonecall

        self_public_.startup_sequence_init();

    } catch (err) {
        raudrohi.tmg('5fbac982-7cfb-45a4-b483-d0a250705dd7', err);
    } // catch
} // raudrohi.widgets.g1.textarea_t1

//------------------------------------------------------------------------
//=========================================================================

// It's instantiated in the library constructor.
raudrohi.widgets.g1.password_editor_t1 = function (s_html_id, parent_instance) {
    try {

        // RENESSAATOR_BLOCK_START
// RENESSAATOR_BLOCK_ID=block_1
// RENESSAATOR_SOURCE_LANGUAGE=Ruby
// RENESSAATOR_SOURCE_START
// RAUDROHI_HOME=ENV['RAUDROHI_HOME']
// require(RAUDROHI_HOME+"/src/dev_tools/code_generation/raudrohi_cg0.rb")
// require(RAUDROHI_CODE_GENERATION+"/by_file/raudrohi_js_widgets_password_editor_t1_block_1.rb")
// RENESSAATOR_SOURCE_END
//
// RENESSAATOR_AUTOGENERATED_TEXT_START

    if(raudrohi_settings_debug_JavaScript===true){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_debug_verification 
            raudrohi.base.assert_is_HTML_ID(s_html_id,'s_html_id',
                '4af3232b-731b-4a37-8376-503371705dd7');
raudrohi.base.assert_is_g1_widget(parent_instance,'parent_instance',
                '5c5e5a34-6509-4fdc-8576-503371705dd7');

    } // if
     //---widget--boilerplate_1_--start--
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget 
		var self_public_=this;
		var pileofmethods_t1_=new raudrohi.widgets.g1.pileofmethods_t1(
                 self_public_,'raudrohi.widgets.g1.password_editor_t1',
                 s_html_id);
		var prc_=self_public_.private_code_;
		var wg_hooks_=self_public_.wg_hooks_;
     //---widget--boilerplate_1_--end----


prc_.parent_instance_=parent_instance;

var widget_partialmenu_t1_retain_or_modify_=null;
var id_partialmenu_t1_retain_or_modify_=prc_.html_id_+'_partialmenu_t1_retain_or_modify';
var widget_textarea_t1_line_1_=null;
var id_textarea_t1_line_1_=prc_.html_id_+'_textarea_t1_line_1';
var widget_textarea_t1_line_2_=null;
var id_textarea_t1_line_2_=prc_.html_id_+'_textarea_t1_line_2';
var widget_html_t2_line_1_legend_=null;
var id_html_t2_line_1_legend_=prc_.html_id_+'_html_t2_line_1_legend';
var widget_html_t2_line_2_legend_=null;
var id_html_t2_line_2_legend_=prc_.html_id_+'_html_t2_line_2_legend';
var widget_html_t2_disqualification_message_=null;
var id_html_t2_disqualification_message_=prc_.html_id_+'_html_t2_disqualification_message';



   		function create_widgets_autogen( ){
				        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget 
			try{
				widget_partialmenu_t1_retain_or_modify_=new
        raudrohi.widgets.g1.partialmenu_t1(
                id_partialmenu_t1_retain_or_modify_,self_public_,
                40,40,1,
                "There is a flaw.  '8d807425-b69b-4169-91da-f0c27041abd7'",
                'partialmenu_t1_mode_1','partialmenu_t1_containertype_vertical_1');
widget_partialmenu_t1_retain_or_modify_.s_field_name_in_parent='retain_or_modify';
prc_.register_subwidget(
        widget_partialmenu_t1_retain_or_modify_,'visible');

var ar_autogenerated_tmpvar_317ef25f_ac53_432a_91a6_503371705dd7=[];
var x_autogenerated_tmpvar_3ee3dfa4_a4fa_4242_bca6_503371705dd7;
x_autogenerated_tmpvar_3ee3dfa4_a4fa_4242_bca6_503371705dd7={};
x_autogenerated_tmpvar_3ee3dfa4_a4fa_4242_bca6_503371705dd7.s_label1='retain';
x_autogenerated_tmpvar_3ee3dfa4_a4fa_4242_bca6_503371705dd7.s_label2='Retain';
ar_autogenerated_tmpvar_317ef25f_ac53_432a_91a6_503371705dd7.push(x_autogenerated_tmpvar_3ee3dfa4_a4fa_4242_bca6_503371705dd7);
x_autogenerated_tmpvar_3ee3dfa4_a4fa_4242_bca6_503371705dd7={};
x_autogenerated_tmpvar_3ee3dfa4_a4fa_4242_bca6_503371705dd7.s_label1='modify';
x_autogenerated_tmpvar_3ee3dfa4_a4fa_4242_bca6_503371705dd7.s_label2='Modify';
ar_autogenerated_tmpvar_317ef25f_ac53_432a_91a6_503371705dd7.push(x_autogenerated_tmpvar_3ee3dfa4_a4fa_4242_bca6_503371705dd7);

widget_partialmenu_t1_retain_or_modify_.set_menu_content(ar_autogenerated_tmpvar_317ef25f_ac53_432a_91a6_503371705dd7)
	            var ht_widget_textarea_t1_line_1_params=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
	            ht_widget_textarea_t1_line_1_params.put('type','password');
             widget_textarea_t1_line_1_=new raudrohi.widgets.g1.textarea_t1(
                     id_textarea_t1_line_1_,i_password_field_width_,1,
                     ht_widget_textarea_t1_line_1_params);
             widget_textarea_t1_line_1_.set_alignment('west');
             prc_.register_subwidget(widget_textarea_t1_line_1_,'hidden');
             widget_textarea_t1_line_1_.s_field_name_in_parent='line_1';
             raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_widget_textarea_t1_line_1_params);

	            var ht_widget_textarea_t1_line_2_params=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
	            ht_widget_textarea_t1_line_2_params.put('type','password');
             widget_textarea_t1_line_2_=new raudrohi.widgets.g1.textarea_t1(
                     id_textarea_t1_line_2_,i_password_field_width_,1,
                     ht_widget_textarea_t1_line_2_params);
             widget_textarea_t1_line_2_.set_alignment('west');
             prc_.register_subwidget(widget_textarea_t1_line_2_,'hidden');
             widget_textarea_t1_line_2_.s_field_name_in_parent='line_2';
             raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_widget_textarea_t1_line_2_params);

widget_html_t2_line_1_legend_=new raudrohi.widgets.g1.html_t2(
        id_html_t2_line_1_legend_,self_public_);
widget_html_t2_line_1_legend_.s_field_name_in_parent='line_1_legend';
prc_.register_subwidget(
widget_html_t2_line_1_legend_,'hidden');

widget_html_t2_line_2_legend_=new raudrohi.widgets.g1.html_t2(
        id_html_t2_line_2_legend_,self_public_);
widget_html_t2_line_2_legend_.s_field_name_in_parent='line_2_legend';
prc_.register_subwidget(
widget_html_t2_line_2_legend_,'hidden');

widget_html_t2_disqualification_message_=new raudrohi.widgets.g1.html_t2(
        id_html_t2_disqualification_message_,self_public_);
widget_html_t2_disqualification_message_.s_field_name_in_parent='disqualification_message';
prc_.register_subwidget(
widget_html_t2_disqualification_message_,'hidden');

			} catch(err){
				raudrohi.tmg('36579805-20f8-4078-a3d6-503371705dd7',err);
			} // catch
		} // create_widgets_autogen


// RENESSAATOR_AUTOGENERATED_TEXT_END
// RENESSAATOR_BLOCK_END
        //-----------------------------------------------------------------
        var s_create_containers_s_password_fields_table_ = '';
        var b_create_containers_s_password_fields_table_cached_ = false;

        function create_containers_s_password_fields_table() {
            try {
                if (b_create_containers_s_password_fields_table_cached_ !==
                    true) {
                    var s_lines = '' +
                                  '<tr>' +
                                  "\n" +
                                  '<td class="" colspan="1">' +
                                  '<div id="' + id_html_t2_line_1_legend_ +
                                  '_div"></div></td>' +
                                  "\n" +
                                  '<td class="" colspan="1">' +
                                  '<div id="' + id_textarea_t1_line_1_ +
                                  '_div"></div></td>' +
                                  "\n" +
                                  '</tr>' +
                                  '<tr>' +
                                  "\n" +
                                  '<td class="" colspan="1"></td>' +
                                  "\n" +
                                  '<td class="" colspan="1">' +
                                  '<div id="' +
                                  id_html_t2_disqualification_message_ +
                                  '_div"></div></td>' +
                                  "\n" +
                                  '</tr>' +
                                  '<tr>' +
                                  "\n" +
                                  '<td class="" colspan="1">' +
                                  '<div id="' + id_html_t2_line_2_legend_ +
                                  '_div"></div></td>' +
                                  "\n" +
                                  '<td class="" colspan="1">' +
                                  '<div id="' + id_textarea_t1_line_2_ +
                                  '_div"></div></td>' +
                                  "\n" +
                                  '</tr>' +
                                  '';

                    var ar_class_names = ["raudrohi_positioning_table"]; // raudrohi_visible_table
                    s_create_containers_s_password_fields_table_ =
                    raudrohi.lang.cg_table_t1("" +
                                              s_lines,
                        ar_class_names);
                    b_create_containers_s_password_fields_table_cached_ = true;
                } // if
                var s_out = s_create_containers_s_password_fields_table_;
                return s_out;
            } catch (err) {
                raudrohi.tmg('1cce2b7b-2ad1-450e-b232-10f25081abd7', err);
            } // catch
        } // create_containers_s_password_fields_table

        //-----------------------------------------------------------------
        function create_containers_s_lines_north() {
            try {
                var s_out = '' +
                            '<tr>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1">' +
                            '<div id="' + id_partialmenu_t1_retain_or_modify_ +
                            '_div"></div></td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '</tr>' +
                            '<tr>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1">' +
                            create_containers_s_password_fields_table() +
                            '</td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '</tr>' +
                            '<tr>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '</tr>' +
                            '';
                return s_out;
            } catch (err) {
                raudrohi.tmg('1c51d6e1-e36e-4aac-b122-10f25081abd7', err);
            } // catch
        } // create_containers_s_lines_north

        function create_containers_s_lines_south() {
            try {
                var s_out = '' +
                            '<tr>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '</tr>' +
                            '<tr>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1">' +
                            create_containers_s_password_fields_table() +
                            '</td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '</tr>' +
                            '<tr>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1">' +
                            '<div id="' + id_partialmenu_t1_retain_or_modify_ +
                            '_div"></div></td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '</tr>' +
                            '';
                return s_out;
            } catch (err) {
                raudrohi.tmg('13a1c49c-6e3c-4789-a322-10f25081abd7', err);
            } // catch
        } // create_containers_s_lines_south

        function create_containers_s_lines_east() {
            try {
                var s_out = '' +
                            '<tr>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '</tr>' +
                            '<tr>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1">' +
                            create_containers_s_password_fields_table() +
                            '</td>' +
                            "\n" +
                            '<td class="" colspan="1">' +
                            '<div id="' + id_partialmenu_t1_retain_or_modify_ +
                            '_div"></div></td>' +
                            "\n" +
                            '</tr>' +
                            '<tr>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '</tr>' +
                            '';
                return s_out;
            } catch (err) {
                raudrohi.tmg('ff3e257d-481c-4ac0-9222-10f25081abd7', err);
            } // catch
        } // create_containers_s_lines_east

        function create_containers_s_lines_west() {
            try {
                var s_out = '' +
                            '<tr>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '</tr>' +
                            '<tr>' +
                            "\n" +
                            '<td class="" colspan="1">' +
                            '<div id="' + id_partialmenu_t1_retain_or_modify_ +
                            '_div"></div></td>' +
                            "\n" +
                            '<td class="" colspan="1">' +
                            create_containers_s_password_fields_table() +
                            '</td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '</tr>' +
                            '<tr>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '<td class="" colspan="1"></td>' +
                            "\n" +
                            '</tr>' +
                            '';
                return s_out;
            } catch (err) {
                raudrohi.tmg('decb224e-8b51-4b2d-9122-10f25081abd7', err);
            } // catch
        } // create_containers_s_lines_west

        function create_containers() {
            try {
                if (prc_.containers_html_cached_ !== true) {
                    var s_lines = null;
                    switch (s_menu_position_) {
                        case 'north':
                            s_lines = create_containers_s_lines_north();
                            break;
                        case 'south':
                            s_lines = create_containers_s_lines_south();
                            break;
                        case 'east':
                            s_lines = create_containers_s_lines_east();
                            break;
                        case 'west':
                            s_lines = create_containers_s_lines_west();
                            break;
                        default:
                            if (raudrohi_settings_debug_JavaScript) {
                                throw raudrohi.tmg(
                                    '491dc54a-89a8-4256-a322-10f25081abd7',
                                    'There\'s no branching for s_menu_position(==' +
                                    s_menu_position_ + ').');
                            } // if
                    } // switch
                    var ar_class_names = ["raudrohi_positioning_table"]; // raudrohi_visible_table
                    prc_.containers_html_cache_ = raudrohi.lang.cg_table_t1(
                        s_lines, ar_class_names);
                    prc_.containers_html_cached_ = true;
                } // if
                var s_container = prc_.containers_html_cache_;
                raudrohi.base.set_innerHTML(prc_.container_id_, s_container);
            } catch (err) {
                raudrohi.tmg('3f63f82a-4cf0-46a7-8522-10f25081abd7', err);
            } // catch
        } // create_containers

        //-----------------------------------------------------------------
        //prc_.content_set_=false;
        var b_acceptable_password_string_available_ = false;
        var b_password_string_available_but_unacceptable_ = false;
        var s_acceptable_password_string_ = '';
        var s_password_rejection_message_ = '';

        function set_password_fields_table_visibility(b_true_if_visible) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isBoolean(
                        b_true_if_visible, 'b_true_if_visible',
                        '373d9c92-c67b-4569-9122-10f25081abd7');
                } // if
                if (b_true_if_visible === true) {
                    if (b_password_string_available_but_unacceptable_ ===
                        true) {
                        prc_.mark_elemwidget_to_be_unhidden(
                            widget_html_t2_disqualification_message_);
                    } else {
                        prc_.mark_elemwidget_to_be_hidden(
                            widget_html_t2_disqualification_message_, true);
                    } // else
                    prc_.mark_elemwidget_to_be_unhidden(
                        widget_html_t2_line_1_legend_);
                    prc_.mark_elemwidget_to_be_unhidden(
                        widget_html_t2_line_2_legend_);
                    prc_.mark_elemwidget_to_be_unhidden(
                        widget_textarea_t1_line_1_);
                    prc_.mark_elemwidget_to_be_unhidden(
                        widget_textarea_t1_line_2_);
                } else { // hide it all
                    prc_.mark_elemwidget_to_be_hidden(
                        widget_html_t2_disqualification_message_, true);
                    prc_.mark_elemwidget_to_be_hidden(
                        widget_html_t2_line_1_legend_, true);
                    prc_.mark_elemwidget_to_be_hidden(
                        widget_html_t2_line_2_legend_, true);
                    prc_.mark_elemwidget_to_be_hidden(
                        widget_textarea_t1_line_1_, true);
                    prc_.mark_elemwidget_to_be_hidden(
                        widget_textarea_t1_line_2_, true);
                } // if
            } catch (err) {
                raudrohi.tmg('96a3f15f-7650-42e2-8522-10f25081abd7', err);
            } // catch
        } // set_password_fields_table_visibility

        var b_password_rejection_message_display_needs_to_be_updated_ = true;

        function update_password_rejection_message_display_properties() {
            try {
                if (b_password_string_available_but_unacceptable_ === false) {
                    return;
                } // if
                if (b_password_rejection_message_display_needs_to_be_updated_ ===
                    false) {
                    return;
                } // if
                var s_1 = raudrohi.lang.word_wrap(
                    s_password_rejection_message_,
                    Math.floor(i_password_field_width_ * 1.5), "<br/>\n",
                    ' ', true);
                var s_rjmsg = '<div style="color:' +
                              s_password_rejection_message_color_ + ';">' +
                              s_1 + '</div>';
                widget_html_t2_disqualification_message_.set_content(
                    s_rjmsg);
                b_password_rejection_message_display_needs_to_be_updated_ =
                false;
            } catch (err) {
                raudrohi.tmg('9625aa14-938f-49c6-a222-10f25081abd7', err);
            } // catch
        } // update_password_rejection_message_display_properties

        function set_subwidgets_visibility_according_to_states() {
            try {
                update_password_rejection_message_display_properties();
                var b_is_readonly = prc_.is_readonly_;
                switch (s_mode_) {
                    case 'add_new':
                        prc_.mark_elemwidget_to_be_hidden(
                            widget_partialmenu_t1_retain_or_modify_, true);
                        if (b_is_readonly === false) {
                            set_password_fields_table_visibility(true);
                        } else {
                            set_password_fields_table_visibility(false);
                        } // else
                        break;
                    case 'overwrite':
                        prc_.mark_elemwidget_to_be_unhidden(
                            widget_partialmenu_t1_retain_or_modify_);
                        if (b_is_readonly === false) {
                            var s_label1 = widget_partialmenu_t1_retain_or_modify_.get_content_s_label1();
                            if (s_label1 === 'retain') {
                                set_password_fields_table_visibility(false);
                            } else {
                                if (s_label1 === 'modify') {
                                    set_password_fields_table_visibility(true);
                                } else {
                                    if (raudrohi_settings_debug_JavaScript) {
                                        throw raudrohi.tmg(
                                            'cd2b2241-9802-4da9-b222-10f25081abd7',
                                            'There\'s no branching for s_label1(==' +
                                            s_label1 + ').');
                                    } // if
                                } // else
                            } // else
                        } else { // b_is_readonly===true
                            set_password_fields_table_visibility(false);
                        } // else
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '28efda11-17c4-4986-b312-10f25081abd7',
                                'There\'s no branching for s_mode_(==' +
                                s_mode_ + ').');
                        } // if
                } // switch
            } catch (err) {
                raudrohi.tmg('491b05f3-80e2-4ae6-9512-10f25081abd7', err);
            } // catch
        } // set_subwidgets_visibility_according_to_states
        //-----------------------------------------------------------------
        prc_.customizable.compulsory.render_editable = function () {
            try {
                create_containers();
                set_subwidgets_visibility_according_to_states();
            } catch (err) {
                raudrohi.tmg('ada7e433-a315-4c85-8312-10f25081abd7', err);
            } // catch
        } // prc_.customizable.compulsory.render_editable


        prc_.customizable.compulsory.render_readonly = function () {
            try {
                create_containers();
                set_subwidgets_visibility_according_to_states();
            } catch (err) {
                raudrohi.tmg('a75ec8f4-29e5-40ee-a312-10f25081abd7', err);
            } // catch
        } // prc_.customizable.compulsory.render_readonly

        //-----------------------------------------------------------------
        self_public_.private_code_.evh_.evh_partialmenu_t1_retain_or_modify_selected =
        function (mi) {
            try {
                set_subwidgets_visibility_according_to_states();
            } catch (err) {
                raudrohi.tmg('46556243-33d9-473a-ae12-10f25081abd7', err);
            } // catch
        } // self_public_.private_code_.evh_.evh_partialmenu_t1_retain_or_modify_selected
        //-----------------------------------------------------------------
        // Format described next to the
        // this.register_acceptance_verification_function
        var ar_acceptance_verification_functions_ = [];

        // The func_in is expected to return an array, where
        // ar[0]==<boolean true for failure, otherwise false>
        // ar[1]==<empty string if no failure, otherwise password rejection message>
        this.register_acceptance_verification_function = function (func_in) {
            try {
                var i = 0;
                var x = null;
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isFunction(func_in, 'func_in',
                        '18e8d831-b304-41af-a212-10f25081abd7');
                    var s_err_msg = 'The registered password acceptance ' +
                                    'verification function does not meet the specification.';
                    var ar_x = func_in('abra', 'cadabra');
                    raudrohi.base.assert_isArray(ar_x, 'ar_x==func_in(...)',
                        '9f47a82f-22c0-4eee-8312-10f25081abd7', s_err_msg);
                    i = ar_x.length;
                    if (i != 2) {
                        raudrohi.tmg('9184d1a1-48fa-4dcf-b812-10f25081abd7',
                            s_err_msg +
                            ' 2 != (func_in(...)==ar_x).length == ' + i);
                    } // if
                    x = ar_x[0];
                    raudrohi.base.assert_isBoolean(x, 'ar_x[0]',
                        '01baf223-a8f8-4e75-a312-10f25081abd7', s_err_msg);
                    x = ar_x[1];
                    raudrohi.base.assert_isString(x, 'ar_x[1]',
                        '59f38bd7-652e-4e8e-8102-10f25081abd7', s_err_msg);
                } // if
                ar_acceptance_verification_functions_.push(func_in);
                if (b_acceptable_password_string_available_ === true) {
                    // The new function might deem the
                    // previously accepted password unacceptable.
                    password_acceptance_verification();
                } // if
            } catch (err) {
                raudrohi.tmg('38611112-1724-4418-9402-10f25081abd7', err);
            } // catch
        } // register_acceptance_verification_function

        function remove_all_acceptance_verification_functions_except_mismatch() {
            try {
                ar_acceptance_verification_functions_ = [];
                if (b_password_string_available_but_unacceptable_ === true) {
                    // The password might have been deemed
                    // unacceptable by one of the functions
                    // that got unregistered here.
                    password_acceptance_verification();
                } // if
            } catch (err) {
                raudrohi.tmg('59185835-f651-4f78-b202-10f25081abd7', err);
            } // catch
        } // remove_all_acceptance_verification_functions_except_mismatch

        function password_acceptance_verification_rejected_by_func(s_line_1,
            s_line_2) {
            try {
                var b_password_rejected = false;
                var i_len = ar_acceptance_verification_functions_.length;
                var i = 0;
                var func_verification;
                var ar = null;
                var s_1 = null;
                for (i = 0; i < i_len; i++) {
                    func_verification =
                    ar_acceptance_verification_functions_[i];
                    ar = func_verification(s_line_1, s_line_2);
                    if (ar[0] === true) {
                        s_1 = ar[1];
                        if (s_password_rejection_message_ !== s_1) {
                            s_password_rejection_message_ = s_1;
                            b_password_rejection_message_display_needs_to_be_updated_ =
                            true;
                        } // if
                        b_password_rejected = true;
                        b_acceptable_password_string_available_ = false;
                        break;
                    } // if
                } // for
                return b_password_rejected;
            } catch (err) {
                raudrohi.tmg('77861a3e-1581-4b68-9202-10f25081abd7', err);
            } // catch
        } // password_acceptance_verification_rejected_by_func

        function password_acceptance_verification() {
            try {
                b_acceptable_password_string_available_ = false;
                b_password_string_available_but_unacceptable_ = false;
                var rgx = RegExp("[\\n]+$", "g");
                var s_lc_emptystring = "";
                var s_line_1 = widget_textarea_t1_line_1_.get_content().replace(
                    rgx, s_lc_emptystring);
                var s_line_2 = widget_textarea_t1_line_2_.get_content().replace(
                    rgx, s_lc_emptystring);
                if (s_line_1.length !== s_line_2.length) {
                    if (s_password_rejection_message_ !==
                        s_password_mismatch_message_) {
                        s_password_rejection_message_ =
                        s_password_mismatch_message_;
                        b_password_rejection_message_display_needs_to_be_updated_ =
                        true;
                    } // if
                    b_password_string_available_but_unacceptable_ = true;
                    prc_.repaint_if_graphical_and_not_hidden();
                    return;
                } // if
                if (s_line_1.length === 0) { // ===s_line_2.lenght
                    s_password_rejection_message_ = "Password length==0."; // hidden anyway
                    b_password_rejection_message_display_needs_to_be_updated_ =
                    true;
                    prc_.repaint_if_graphical_and_not_hidden();
                    return;
                } // if
                if (s_line_1 !== s_line_2) {
                    s_password_rejection_message_ =
                    s_password_mismatch_message_;
                    b_password_rejection_message_display_needs_to_be_updated_ =
                    true;
                    b_password_string_available_but_unacceptable_ = true;
                    prc_.repaint_if_graphical_and_not_hidden();
                    return;
                } // if

                if (password_acceptance_verification_rejected_by_func(s_line_1,
                    s_line_2) === true) {
                    b_password_string_available_but_unacceptable_ = true;
                    prc_.repaint_if_graphical_and_not_hidden();
                    return;
                } // if
                s_acceptable_password_string_ = s_line_1;
                b_acceptable_password_string_available_ = true;
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('8fc7d427-90e5-437d-9302-10f25081abd7', err);
            } // catch
        } // password_acceptance_verification


        //-----------------------------------------------------------------

        //wg_hooks_.evh_widget_textarea_t1_line_1_key_13=function(e) {
        // This function is meant to be overridden.
        //} // wg_hooks_.evh_widget_textarea_t1_line_2_key_13

        prc_.evh_.evh_widget_textarea_t1_line_1_key_blur_local = function (e) {
            try {
                var s_line_2 = widget_textarea_t1_line_2_.get_content();
                if (0 < s_line_2.length) {
                    password_acceptance_verification();
                } // if
            } catch (err) {
                raudrohi.tmg('7470ce34-413e-43d9-a102-10f25081abd7', err);
            } // catch
        } // prc_.evh_.evh_widget_textarea_t1_line_1_key_blur_local

        prc_.evh_.evh_widget_textarea_t1_line_1_key_13_local = function (e) {
            try {
                var s_line_2 = widget_textarea_t1_line_2_.get_content();
                if (0 < s_line_2.length) {
                    password_acceptance_verification();
                } // if
                widget_textarea_t1_line_2_.set_focus();
                //wg_hooks_.evh_widget_textarea_t1_line_1_key_13(e);
            } catch (err) {
                raudrohi.tmg('2d3e9194-09b4-4266-8702-10f25081abd7', err);
            } // catch
        } // prc_.evh_.evh_widget_textarea_t1_line_1_key_13_local

        wg_hooks_.evh_widget_textarea_t1_line_2_key_13 = function (e) {
            // This function is meant to be overridden.
        } // wg_hooks_.evh_widget_textarea_t1_line_2_key_13

        prc_.evh_.evh_widget_textarea_t1_line_2_key_blur_local = function (e) {
            try {
                password_acceptance_verification();
            } catch (err) {
                raudrohi.tmg('19d34d2d-6c22-4e6b-b502-10f25081abd7', err);
            } // catch
        } // prc_.evh_.evh_widget_textarea_t1_line_2_key_blur_local

        prc_.evh_.evh_widget_textarea_t1_line_2_key_13_local = function (e) {
            try {
                password_acceptance_verification();
                wg_hooks_.evh_widget_textarea_t1_line_2_key_13(e);
            } catch (err) {
                raudrohi.tmg('fd82ab1e-1555-49e8-8302-10f25081abd7', err);
            } // catch
        } // prc_.evh_.evh_widget_textarea_t1_line_2_key_13_local


        //-----------------------------------------------------------------
        function initiate_widgets() {
            try {
                self_public_.set_line_1_legend('');
                self_public_.set_line_2_legend('');
                widget_partialmenu_t1_retain_or_modify_.private_code_.customizable.optional.evh_selection_impl =
                self_public_.private_code_.evh_.evh_partialmenu_t1_retain_or_modify_selected;
                // raudrohi_virtual_key_blur
                widget_textarea_t1_line_1_.set_keylistener('13',
                    prc_.evh_.evh_widget_textarea_t1_line_1_key_13_local);
                widget_textarea_t1_line_2_.set_keylistener('13',
                    prc_.evh_.evh_widget_textarea_t1_line_2_key_13_local);
                widget_textarea_t1_line_1_.set_keylistener(
                    'raudrohi_virtual_key_blur',
                    prc_.evh_.evh_widget_textarea_t1_line_1_key_blur_local);
                widget_textarea_t1_line_2_.set_keylistener(
                    'raudrohi_virtual_key_blur',
                    prc_.evh_.evh_widget_textarea_t1_line_2_key_blur_local);
                //self_public_.private_code_.evh_.evh_button_add_new_report=function(e){
            } catch (err) {
                raudrohi.tmg('5a932851-2ab2-47d1-af02-10f25081abd7', err);
            } // catch
        } // initiate_widgets

        prc_.customizable.optional.create_subwidgets = function () {
            try {
                create_widgets_autogen();
                initiate_widgets();
            } catch (err) {
                raudrohi.tmg('7f23ff49-2736-42fb-b2f1-10f25081abd7', err);
            } // catch
        } // prc_.customizable.optional.create_subwidgets=function(){

        //-----------------------------------------------------------------
        var s_mode_ = 'add_new';
        this.set_mode = function (s_mode) {
            try {
                var i = null;
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        s_mode, 's_mode',
                        '5e9a0533-fe8e-452b-93f1-10f25081abd7');
                    i = s_mode.length;
                    raudrohi.base.assert_X1_isSmallerThanOrEqualTo_X2(1,
                        '1', '4685415d-f3d0-4d85-a5f1-10f25081abd7',
                        i, 's_mode.length', ' Empty strings are not allowed.');
                    switch (s_mode) {
                        case 'add_new':
                            break;
                        case 'overwrite':
                            break;
                        default:
                            if (raudrohi_settings_debug_JavaScript) {
                                throw raudrohi.tmg(
                                    '284a58f2-8012-4409-bcf1-10f25081abd7',
                                    'There\'s no branching for s_mode(==' +
                                    s_mode + ').');
                            } // if
                    } // switch
                } // if
                if (s_mode_ === s_mode) {
                    return;
                } // if
                s_mode_ = "" + s_mode;
                widget_partialmenu_t1_retain_or_modify_.set_content_by_s_label1(
                    'modify');
                prc_.containers_html_cached_ = false;
                prc_.repaint_if_graphical_and_not_hidden();
                // The duplication of widget_partialmenu_t1_retain_or_modify_
                // selection assignment is just to increase fault tolerance,
                // because the menu position really has to be "modify",
                // if the s_mode==="add_new" and one can not be too sure,
                // what will happen at the graphical side before
                // this function exits. In theory, if the JavaScript
                // is really a single-threaded application, the
                // secondary menu content assignment is not necessary,
                // but this is the WEB, which tends to be
                // somewhat crappy, so I'll better be safe than sorry.
                widget_partialmenu_t1_retain_or_modify_.set_content_by_s_label1(
                    'modify');
            } catch (err) {
                raudrohi.tmg('1aae9c40-9d7d-4dc3-a2f1-10f25081abd7', err);
            } // catch
        } // set_mode

        this.s_get_mode = function () {
            try {
                var s_out = "" + s_mode_;
                return s_out;
            } catch (err) {
                raudrohi.tmg('4c5b1d49-3af0-468a-b4f1-10f25081abd7', err);
            } // catch
        } // s_get_mode

        //-----------------------------------------------------------------
        var s_menu_position_ = 'north';

        // s_menu_position inSet {"north", "south", "east", "west"}
        // The position is relative to the textfields. For example,
        // If the menu is to the right of the visible textfields, then
        // the  s_menu_position=="west".
        this.set_menu_position = function (s_menu_position) {
            try {
                var i = null;
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        s_menu_position, 's_menu_position',
                        '670a8150-92b7-407d-85f1-10f25081abd7');
                    i = s_menu_position.length;
                    raudrohi.base.assert_X1_isSmallerThanOrEqualTo_X2(1,
                        '1', '85518194-6a13-4129-b5f1-10f25081abd7',
                        i, 's_menu_position.length',
                        ' Empty strings are not allowed.');
                } // if
                if (s_menu_position_ === s_menu_position) {
                    return;
                } // if
                switch (s_menu_position) {
                    case 'north':
                        break;
                    case 'south':
                        break;
                    case 'east':
                        break;
                    case 'west':
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                'e064b52a-fba0-4a75-84f1-10f25081abd7',
                                'There\'s no branching for s_menu_position(==' +
                                s_menu_position + ').');
                        } // if
                } // switch
                s_menu_position_ = "" + s_menu_position;
                prc_.containers_html_cached_ = false;
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('9fb52d3d-6a18-470d-91e1-10f25081abd7', err);
            } // catch
        } // set_menu_position

        this.s_get_menu_position = function () {
            try {
                var s_out = "" + s_menu_position_;
                return s_out;
            } catch (err) {
                raudrohi.tmg('a030843c-afaa-428a-83e1-10f25081abd7', err);
            } // catch
        } // s_get_menu_position

        //-----------------------------------------------------------------
        var i_password_field_width_ = 20;
        this.set_i_password_field_width = function (i_password_field_width) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(
                        i_password_field_width, 'i_password_field_width',
                        '9bf85ea1-fa5c-4534-aee1-10f25081abd7');
                    raudrohi.lang.assert_is_a_whole_number(
                        i_password_field_width, 'i_password_field_width',
                        'c7118453-e984-4c19-b1e1-10f25081abd7');
                    raudrohi.base.assert_X1_isSmallerThanOrEqualTo_X2(5,
                        '5', '3f3e3335-18b3-48f0-b3e1-10f25081abd7',
                        i_password_field_width, 'i_password_field_width', '');
                } // if
                if (i_password_field_width_ === i_password_field_width) {
                    return;
                } // if
                i_password_field_width_ = "" + i_password_field_width;
                b_password_rejection_message_display_needs_to_be_updated_ =
                true;
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('a2fc9745-917e-4d90-83e1-10f25081abd7', err);
            } // catch
        } // set_i_password_field_width

        this.s_get_i_password_field_width = function () {
            try {
                var i_out = 0 + i_password_field_width_;
                return i_out;
            } catch (err) {
                raudrohi.tmg('3351d1e3-2e12-4d87-85e1-10f25081abd7', err);
            } // catch
        } // s_get_i_password_field_width

        //-----------------------------------------------------------------
        var i_password_field_legend_width_ = 15;
        this.set_i_password_field_legend_width =
        function (i_password_field_legend_width) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(
                        i_password_field_legend_width,
                        'i_password_field_legend_width',
                        '13f11840-4ee8-45c6-82e1-10f25081abd7');
                    raudrohi.lang.assert_is_a_whole_number(
                        i_password_field_legend_width,
                        'i_password_field_legend_width',
                        'af064835-8c47-477e-85e1-10f25081abd7');
                    raudrohi.base.assert_X1_isSmallerThanOrEqualTo_X2(5,
                        '5', '6f195b48-51b0-408d-a4e1-10f25081abd7',
                        i_password_field_legend_width,
                        'i_password_field_legend_width', '');
                } // if
                if (i_password_field_legend_width_ ===
                    i_password_field_legend_width) {
                    return;
                } // if
                i_password_field_legend_width_ =
                "" + i_password_field_legend_width;
                prc_.containers_html_cached_ = false;
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('2166d061-d0b0-467d-b8d1-10f25081abd7', err);
            } // catch
        } // set_i_password_field_legend_width

        this.s_get_i_password_field_legend_width = function () {
            try {
                var i_out = 0 + i_password_field_legend_width_;
                return i_out;
            } catch (err) {
                raudrohi.tmg('630e0735-f980-4eb2-94d1-10f25081abd7', err);
            } // catch
        } // s_get_i_password_field_legend_width

        //-----------------------------------------------------------------
        var s_line_1_legend_ = 'not_set';
        this.set_line_1_legend = function (s_line_1_legend) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        s_line_1_legend, 's_line_1_legend',
                        'a6ac494a-b31a-4823-b5d1-10f25081abd7');
                } // if
                if (s_line_1_legend_ === s_line_1_legend) {
                    return;
                } // if
                s_line_1_legend_ = "" + s_line_1_legend;
                var s_wdwpd = raudrohi.lang.word_wrap(s_line_1_legend_,
                    i_password_field_legend_width_, "<br/>\n", ' ');
                widget_html_t2_line_1_legend_.set_content(s_wdwpd);
                prc_.containers_html_cached_ = false;
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('87b10cca-5d0f-4269-93d1-10f25081abd7', err);
            } // catch
        } // set_line_1_legend

        this.s_get_line_1_legend = function () {
            try {
                var s_out = "" + s_line_1_legend_;
                return s_out;
            } catch (err) {
                raudrohi.tmg('e957052b-0335-424b-b3d1-10f25081abd7', err);
            } // catch
        } // s_get_line_1_legend

        //-----------------------------------------------------------------
        var s_line_2_legend_ = 'not_set';
        this.set_line_2_legend = function (s_line_2_legend) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        s_line_2_legend, 's_line_2_legend',
                        'b2906d15-1ef6-4eea-91d1-10f25081abd7');
                } // if
                if (s_line_2_legend_ === s_line_2_legend) {
                    return;
                } // if
                s_line_2_legend_ = "" + s_line_2_legend;
                var s_wdwpd = raudrohi.lang.word_wrap(s_line_2_legend_,
                    i_password_field_legend_width_, "<br/>\n", ' ');
                widget_html_t2_line_2_legend_.set_content(s_wdwpd);
                prc_.containers_html_cached_ = false;
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('c68c5a2a-28ae-46b2-b4d1-10f25081abd7', err);
            } // catch
        } // set_line_2_legend

        this.s_get_line_2_legend = function () {
            try {
                var s_out = "" + s_line_2_legend_;
                return s_out;
            } catch (err) {
                raudrohi.tmg('d32d7435-8c3d-4ec4-91d1-10f25081abd7', err);
            } // catch
        } // s_get_line_2_legend

        //-----------------------------------------------------------------
        var s_password_mismatch_message_ = "The passowords don't match.";
        this.set_password_mismatch_message =
        function (s_password_mismatch_message) {
            try {
                var i = null;
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        s_password_mismatch_message,
                        's_password_mismatch_message',
                        'de6c8547-5c9b-43c7-94c1-10f25081abd7');
                    i = s_password_mismatch_message.length;
                    raudrohi.base.assert_X1_isSmallerThanOrEqualTo_X2(1,
                        '1', '97f0421b-9c4d-485d-b4c1-10f25081abd7',
                        i, 's_password_mismatch_message.length',
                        ' Empty strings are not allowed.');
                } // if
                if (s_password_mismatch_message_ ===
                    s_password_mismatch_message) {
                    return;
                } // if
                s_password_mismatch_message_ = "" + s_password_mismatch_message;
                b_password_rejection_message_display_needs_to_be_updated_ =
                true;
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('806d522c-917e-4e7a-84c1-10f25081abd7', err);
            } // catch
        } // set_password_mismatch_message

        this.s_get_password_mismatch_message = function () {
            try {
                var s_out = "" + s_password_mismatch_message_;
                return s_out;
            } catch (err) {
                raudrohi.tmg('477f7a22-fd0f-4484-82c1-10f25081abd7', err);
            } // catch
        } // s_get_password_mismatch_message

        //-----------------------------------------------------------------
        var s_password_rejection_message_color_ = window.raudrohi.widgets.g1.theme.s_color_no;
        this.set_password_rejection_message_color =
        function (s_password_rejection_message_color) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        s_password_rejection_message_color,
                        's_password_rejection_message_color',
                        'c4a17542-3826-4980-81c1-10f25081abd7');
                    raudrohi.lang.assert_is_an_HTML_color(
                        s_password_rejection_message_color,
                        's_password_rejection_message_color',
                        '208537b3-c762-4074-92c1-10f25081abd7');
                } // if
                if (s_password_rejection_message_color_ ===
                    s_password_rejection_message_color) {
                    return;
                } // if
                s_password_rejection_message_color_ =
                "" + s_password_rejection_message_color;
                b_password_rejection_message_display_needs_to_be_updated_ =
                true;
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('59dc5b31-3ba0-48c6-b2c1-10f25081abd7', err);
            } // catch
        } // set_password_rejection_message_color

        this.s_get_password_rejection_message_color = function () {
            try {
                var s_out = "" + s_password_rejection_message_color_;
                return s_out;
            } catch (err) {
                raudrohi.tmg('64dd3e1f-0622-462d-b4c1-10f25081abd7', err);
            } // catch
        } // s_get_password_rejection_message_color

        //-----------------------------------------------------------------
        // Retunrs an instance namespace x with a format of:
        //
        // x.b_password_not_available
        // x.s_password
        // x.b_retain_old_password
        //
        // if(x.b_password_not_available===true){ x.s_password==='';}
        // if(x.b_retain_old_password===true){ x.b_password_not_available===true;}
        this.get_content = function () {
            try {
                var x_out = {};
                x_out.s_password = '';
                x_out.b_password_not_available = true;
                var s_label1 = widget_partialmenu_t1_retain_or_modify_.get_content_s_label1();
                if (s_label1 === 'retain') {
                    x_out.b_retain_old_password = true;
                    return x_out;
                } // if
                x_out.b_retain_old_password = false; // s_label1==='modify'
                password_acceptance_verification();
                if (b_acceptable_password_string_available_ === true) {
                    x_out.s_password = '' + s_acceptable_password_string_;
                    x_out.b_password_not_available = false;
                } // if
                return x_out;
            } catch (err) {
                raudrohi.tmg('58fbd631-7084-45ad-85b1-10f25081abd7', err);
            } // catch
        } // get_content

        //-----------------------------------------------------------------
        this.get_content_2_collection_t1 = function (ht) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht, 'ht',
                        'b979d854-3a2c-4e0e-b5b1-10f25081abd7');
                } // if
                var s_sb_set = raudrohi.wg_processing_t1.s_key_field_set(
                    self_public_);
                var s_dbf_key = raudrohi.wg_processing_t1.s_key_field(
                    self_public_);
                var x = self_public_.get_content();
                if (x.b_retain_old_password === true) {
                    ht.put(s_dbf_key, ' ');
                    ht.put(s_sb_set, 'f');
                    return;
                } // if
                if (x.b_password_not_available === true) {
                    raudrohi.tmg('73078c47-6448-4a58-84b1-10f25081abd7',
                        'self_public_.get_content().b_retain_old_password===false and ' +
                        'self_public_.get_content().b_password_not_available===true , but' +
                        'the self_public_.get_content_2_collection_t1(...) got called. ' +
                        'The parent widget is expected to verify that the ' +
                        'self_public_.get_content().b_password_not_available===false ' +
                        'before calling the self_public_.get_content_2_collection_t1(...)' +
                        '');
                } // if
                ht.put(s_dbf_key, x.s_password);
                ht.put(s_sb_set, 't');
            } catch (err) {
                raudrohi.tmg('dceb951f-0f34-4a21-81b1-10f25081abd7', err);
            } // catch
        } // get_content_2_collection_t1

        this.set_content_from_collection_t1 = function (ht) {
            try {
                // Passwords are never expected to be sent from the
                // server.
                self_public_.set_mode('overwrite');
                widget_partialmenu_t1_retain_or_modify_.set_content_by_s_label1(
                    'retain');
            } catch (err) {
                raudrohi.tmg('8bad0c2b-9d88-404f-85b1-10f25081abd7', err);
            } // catch
        } // set_content_from_collection_t1

        //-----------------------------------------------------------------
        prc_.customizable.optional.startup_hook = function () {
            try {
                // This function can be deleted from here, because
                // it is already defined in the pile of methods.
            } catch (err) {
                raudrohi.tmg('10ae0803-45df-46e7-8fb1-10f25081abd7', err);
            } // catch
        } // prc_.customizable.optional.startup_hook

        prc_.customizable.optional.shutdown_hook = function () {
            try {
                // This function can be deleted from here, because
                // it is already defined in the pile of methods.
            } catch (err) {
                raudrohi.tmg('54c01b91-df52-47bb-95b1-10f25081abd7', err);
            } // catch
        } // prc_.customizable.optional.shutdown_hook

        self_public_.startup_sequence_init();
    } catch (err) {
        raudrohi.tmg('204c9017-4266-4c78-a3b1-10f25081abd7', err);
    } // catch
} // raudrohi.widgets.g1.password_editor_t1

//-------------------------------------------------------------------------
//=========================================================================

raudrohi.widgets.g1.menu_t1_content_ar_rgxs = [];
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values = [];
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("Ãµ;", "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("&otilde;");
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("Ã", "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("&Otilde;");
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("Ã¤", "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("&auml;");
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("Ã", "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("&Auml;");
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("Ã¶", "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("&ouml;");
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("Ã", "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("&Ouml;");
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("Ã¼", "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("&uuml;");
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("Ã", "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("&Uuml;");
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("Å¡", "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("&scaron;");
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("Å ", "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("&Scaron;");
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("Å¾", "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("&#382;");
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("Å½", "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("&#381;");
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("â", "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("&bdquo;");
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("â", "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("&ldquo;");
raudrohi.widgets.g1.menu_t1_content_ar_rgxs.push(new RegExp("[\\s\\t\\n\\r]",
    "g"));
raudrohi.widgets.g1.menu_t1_content_ar_replacement_values.push("_");


// The raudrohi.widgets.g1.menu_t1_content associates menu item text with an instance
// that contains further information about the menu item.
// As the menu has a maximum width, the menuitem_text_max_width
// is used for tuning the truncation function, which is used for
// making sure that no menuitem text within the array_of_menuitem_texts
// is wider than the menuitem_text_max_width. The
// array_of_menuitem_instances is expected to contain objects that
// have a "menuitem_label" public field.
raudrohi.widgets.g1.menu_t1_content =
function (array_of_menuitem_instances, menuitem_text_max_width) {
    try {
        var self_public_ = this;
        if (raudrohi_settings_debug_JavaScript === true) {
            if (!raudrohi_adapter_isArray(array_of_menuitem_instances)) {
                raudrohi.tmg('0452882d-cb7f-4e42-938a-f29150705dd7',
                    'The array_of_menuitem_instances is not an array.');
            } // if
            if (!raudrohi_adapter_isNumber(menuitem_text_max_width)) {
                raudrohi.tmg('40b994a8-eaf9-416e-958a-f29150705dd7',
                    'The menuitem_text_max_width is not of a numeric type.');
            } // if
            if (menuitem_text_max_width < 1) {
                raudrohi.tmg('77b25a12-df40-4fba-a48a-f29150705dd7',
                    'menuitem_text_max_width==' + menuitem_text_max_width +
                    ' < 1');
            } // if
        } // if
        var menuitem_text_max_width_ = menuitem_text_max_width;
        var ar_menuitem_texts_for_writing_2_GUI_ = []; // for cacheing only
        this.get_array_of_menuitem_texts_that_are_meant_only_for_writing_into_GUI =
        function () {
            return ar_menuitem_texts_for_writing_2_GUI_;
        }// get_array_of_menuitem_texts_that_are_meant_only_for_writing_into_GUI
        var numberOfmenuitems_ = 0;

        // key   == menuitem text
        // value == angervaks.ui.products_menuitem
        var ht_reversefunc_ = new Hashtable();

        // Amazing, just imagine, that if a menu contains 'Hello "Earth"!'
        // as its menu item, i.e. menuitem label, then the form content
        // is returned only till the first double quotation mark, which
        // is: 'Hello '. Well done!!!! Ingenious!!!! Now, everyone,
        // let's all start a game called MineSeeper and try to find other
        // characters that have special treatment like the doublequote (")
        // has. If you hit a mine, the application crashes, preferably
        // in the client's computer. And there's no-one other in a better
        // position at finding those mines than the people, who actually,
        // extensively, use the application, i.e. the clients.
        function truncate_by_WEBskriptkiddymentality_idiocity_workaroundquirk_1(s_text) {
            try {
                var s_out = s_text;
                var i1 = s_text.indexOf('"');
                if (i1 === (-1)) {
                    return s_out;
                } // if
                if (i1 === 0) {
                    return "";
                } // if
                s_out = s_text.substring(0, i1);
                return s_out;
            } catch (err) {
                raudrohi.tmg('b0d03c31-a9c0-4b2d-b28a-f29150705dd7', err);
            } // catch
        } // truncate_by_WEBskriptkiddymentality_idiocity_workaroundquirk_1

        // There's a problem that the current Hashtable
        // implementation does not handle all UTF-8 characters
        // correctly. So this function is a kind of "pre-hash"
        // function that replaces at least some of the most
        // common non-ASCII characters out. It's a kind of dirty,
        // solution that postpones the real refactoring, which
        // will probably be quite time consuming.
        function prehash(s_text) {
            try {
                var ar_rgx = raudrohi.widgets.g1.menu_t1_content_ar_rgxs;
                var ar_replacement_values = raudrohi.widgets.g1.menu_t1_content_ar_replacement_values;
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_text, 's_text',
                        '71beeeb5-f658-47fb-917a-f29150705dd7');
                    if (ar_rgx.length !== ar_replacement_values.length) {
                        raudrohi.tmg('56d6e037-0d9a-484d-a57a-f29150705dd7',
                            "ar_rgx.length==" + ar_rgx.length +
                            " != ar_replacement_values.length==" +
                            ar_replacement_values.length);
                    } // if
                } // if
                var s1 = s_text;
                var s2 = null;
                var len = ar_rgx.length;
                var i = 0;
                var rgx;
                var s_replacement_value;
                for (i = 0; i < len; i++) {
                    rgx = ar_rgx[i];
                    s_replacement_value = ar_replacement_values[i];
                    s2 = s1.replace(rgx, s_replacement_value);
                    s1 = s2;
                } // for
                return s1;
            } catch (err) {
                raudrohi.tmg('3624882a-9da2-4ee2-b37a-f29150705dd7', err);
            } // catch
        } // prehash

        // One needs to hash the same text for 'Hello "Earth"'
        // and 'Hello ', because  the GUI part has a quirk that
        // if a menu text 'Hello "Earth"' is read in, 'Hello ' is
        // returned.
        //
        // There will also be collisions between
        // 'Welcome to "Hell"!' and
        // 'Welcome to "Heaven"!'.
        // The workaround to that is  to put unique prefixes, like
        // 'a: Welcome to "Hell"!' and
        // 'b: Welcome to "Heaven"!'.
        //
        // A sample scenario, if menuitem_text_max_width_==4 :
        //   ' a " c d   '   (menuitem_label)
        //    'a " c d'      (trim)
        //    'a " '         (truncate by max width)
        //    'a '           (doublequote qurik by GUI)
        function text_as_if_it_were_read_from_GUI_menu(s_menu_item_dot_menuitem_label) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_menu_item_dot_menuitem_label,
                        's_menu_item_dot_menuitem_label',
                        'e31dba3b-0d76-44b4-857a-f29150705dd7');
                } // if
                var s1 = s_menu_item_dot_menuitem_label;
                var s2 = null;
                var s3 = null;
                s2 = raudrohi.adapter.trim(s1);
                s3 = s2.substring(0, menuitem_text_max_width_);
                s1 =
                truncate_by_WEBskriptkiddymentality_idiocity_workaroundquirk_1(s3);
                return s1;
            } catch (err) {
                raudrohi.tmg('68605f1d-68da-42d5-a27a-f29150705dd7', err);
            } // catch
        } // text_as_if_it_were_read_from_GUI_menu

        this.GUI_sideefectfree_text_2_hashtable_key =
        function (s_menu_item_dot_menuitem_label) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        s_menu_item_dot_menuitem_label,
                        's_menu_item_dot_menuitem_label',
                        '24e31dd3-9fb2-4f83-9c7a-f29150705dd7');
                } // if
                var s1 = s_menu_item_dot_menuitem_label;
                var s2 = text_as_if_it_were_read_from_GUI_menu(s1);
                var s3 = prehash(s2);
                return s3;
            } catch (err) {
                raudrohi.tmg('9ae25821-b8fc-4337-857a-f29150705dd7', err);
            } // catch
        } // GUI_sideefectfree_text_2_hashtable_key

        this.text_with_GUI_sideffects_2_hashtable_key =
        function (s_text_as_read_from_the_GUI_menu) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        s_text_as_read_from_the_GUI_menu,
                        's_text_as_read_from_the_GUI_menu',
                        '91445d26-51f4-4a20-816a-f29150705dd7');
                } // if
                var s1 = s_text_as_read_from_the_GUI_menu;
                var s2 = prehash(s1);
                return s2;
            } catch (err) {
                raudrohi.tmg('c0ffcd39-eccf-4904-b56a-f29150705dd7', err);
            } // catch
        } // text_with_GUI_sideffects_2_hashtable_key

        var ar_GUI_sideeffectfree_texts_ = [];
        this.get_ar_GUI_sideeffectfree_texts = function () {
            try {
                return ar_GUI_sideeffectfree_texts_;
            } catch (err) {
                raudrohi.tmg('c177b834-2144-4db0-936a-f29150705dd7', err);
            } // catch
        } // get_GUI_sideeffectfree_texts

        function a_constructor(array_of_menuitem_instances) {
            try {
                ht_reversefunc_.clear();
                ar_menuitem_texts_for_writing_2_GUI_ = [];
                ar_GUI_sideeffectfree_texts_ = [];
                var len = array_of_menuitem_instances.length;
                numberOfmenuitems_ = len;
                var i = 0;
                var mi;
                var s = null;
                var s1 = null;
                var s2 = null;
                var s3 = null;
                var s_hashtable_key = null;
                for (i = 0; i < len; i++) {
                    mi = array_of_menuitem_instances[i];
                    mi.mc_ordinal_number = i;
                    // If the string bisection is done so that the very
                    // last character is a space, then later, when one reads
                    // that value from the textfield, the space is lost,
                    // unless there's a doublequotes character in the
                    // string.  Further comments are at
                    // text_as_if_it_were_read_from_GUI_menu
                    s1 = mi.menuitem_label;
                    ar_GUI_sideeffectfree_texts_.push(s1);
                    s2 = raudrohi.adapter.trim(s1);
                    s3 = s2.substring(0, menuitem_text_max_width_);
                    mi.mc_truncated_text_ = s3;
                    ar_menuitem_texts_for_writing_2_GUI_.push(s3);
                    s_hashtable_key =
                    self_public_.GUI_sideefectfree_text_2_hashtable_key(s1);
                    // In the case of the next if-statement  there
                    // can be collisions, because the
                    // because the hashtable hash function does not
                    // handle all UTF-8 characters properly,
                    if (raudrohi_settings_debug_JavaScript === true) {
                        if (ht_reversefunc_.containsKey(s_hashtable_key) ===
                            true) {
                            //raudrohi.adapter.log("WARNING: "+
                            raudrohi.tmg("8e33095c-684f-4b91-918a-f29150705dd7",
                                "Given the maximum menu width of " +
                                "menuitem_text_max_width_==" +
                                menuitem_text_max_width_ +
                                ", there is a collision of menuitem texts, " +
                                "s=='" + s + "'.");
                        } // if
                    } // if
                    ht_reversefunc_.put(s_hashtable_key, mi);
                } // for
            } catch (err) {
                raudrohi.tmg('35b0c25e-0779-463a-846a-f29150705dd7', err);
            } // catch
        } // a_constructor
        a_constructor(array_of_menuitem_instances);

        this.GUI_sideeffectfree_text_2_instance =
        function (s_menu_item_dot_menuitem_label) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        s_menu_item_dot_menuitem_label,
                        's_menu_item_dot_menuitem_label',
                        '0f439243-e607-4e74-a56a-f29150705dd7');
                } // if
                var s_hashtable_key = self_public_.GUI_sideefectfree_text_2_hashtable_key(
                    s_menu_item_dot_menuitem_label);
                var mi = ht_reversefunc_.get(s_hashtable_key);
                return mi;
            } catch (err) {
                raudrohi.tmg('4f2d7ab8-0097-4721-826a-f29150705dd7', err);
            } // catch
        } // GUI_sideeffectfree_text_2_instance

        this.text_with_GUI_sideeffects_2_instance =
        function (s_text_as_read_from_the_GUI_menu) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        s_text_as_read_from_the_GUI_menu,
                        's_text_as_read_from_the_GUI_menu',
                        '08058b42-38a9-4b94-956a-f29150705dd7');
                } // if
                var s_hashtable_key = self_public_.text_with_GUI_sideffects_2_hashtable_key(
                    s_text_as_read_from_the_GUI_menu);
                var mi = ht_reversefunc_.get(s_hashtable_key);
                return mi;
            } catch (err) {
                raudrohi.tmg('4a5f69bf-f6a5-4242-b56a-f29150705dd7', err);
            } // catch
        } // text_with_GUI_sideeffects_2_instance


        this.menuitem_text_exists = function (s_menu_item_dot_menuitem_label) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_menu_item_dot_menuitem_label,
                        's_menu_item_dot_menuitem_label',
                        '3370f746-2644-4138-955a-f29150705dd7');
                } // if
                var s_hashtable_key = self_public_.GUI_sideefectfree_text_2_hashtable_key(
                    s_menu_item_dot_menuitem_label);
                var b = ht_reversefunc_.containsKey(s_hashtable_key);
                return b;
            } catch (err) {
                raudrohi.tmg('19359311-0eea-44c9-b35a-f29150705dd7', err);
            } // catch
        } // menuitem_text_exists

        this.numberOfmenuitems = function () {
            return numberOfmenuitems_;
        } // numberOfmenuitems

    } catch (err) {
        raudrohi.tmg('e22b5b5e-53d5-40f5-a55a-f29150705dd7', err);
    } // catch
} // raudrohi.widgets.g1.menu_t1_content

//------------------------------------------------------------------------

// WARNING: Direct use of this class is DEPRECATED, strongly discouraged.
// Use a wrapper, raudrohi.widgets.g1.partialmenu_t1 instead.
//
// TODO: This class works correctly and for backward compatibility it
// can not be thrown out, but one should make a copy of it, create
// menu_t2 and refactor the partialmenu_t1 to use the newer version.
raudrohi.widgets.g1.menu_t1 =
function (s_html_id, html_if_menucontent_not_set) {
    var self_public_ = this;
    var lc_s_emptystring = raudrohi_glc_s_emptystring;
    var lc_s_space = raudrohi_glc_s_space;
    var lc_s_br = raudrohi_glc_s_br;
    try {
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_is_HTML_ID(s_html_id, 's_html_id',
                '49ca853e-6b7b-4459-b45a-f29150705dd7');
            raudrohi.base.assert_isString(html_if_menucontent_not_set,
                'html_if_menucontent_not_set',
                '78a77520-bbc2-4d2b-935a-f29150705dd7');
        } // if

        var pileofmethods_t1_ = new raudrohi.widgets.g1.pileofmethods_t1(
            self_public_, 'raudrohi.widgets.g1.menu_t1', s_html_id);
        var prc_ = self_public_.private_code_;
        prc_.content_set_ = false;

        var useed_ = prc_.html_id_ + '_useed';
        prc_.container_id_ = prc_.html_id_ + '_div';
        prc_.content_ = new raudrohi.widgets.g1.menu_t1_content([], 2);
        var selector_location_id_ = useed_ + '_selector_location_div';
        var menutext_display_id_ = useed_ + '_selector_menuitemtext_div';
        var html_if_menucontent_not_set_ = html_if_menucontent_not_set;

        var selected_menuitem_ = null;
        this.get_selected_menuitem = function () {
            return selected_menuitem_;
        } // get_selected_menuitem

        var display_menuitem_whole_label_ = true;
        this.display_menuitem_whole_label = function (true_if_display) {
            raudrohi.base.assert_isBoolean(true_if_display, 'true_if_display',
                '1b37e4a9-acf8-4e6d-b55a-f29150705dd7');
            try {
                display_menuitem_whole_label_ = true_if_display;
                if (self_public_.is_hidden() === false) {
                    self_public_.unhide();
                } // if
            } catch (err) {
                raudrohi.tmg('7a141d3a-8d63-4938-a25a-f29150705dd7', err);
            } // catch
        } // display_menuitem_whole_label

        var b_always_display_menuitem_whole_label_ = false;
        this.always_display_menuitem_whole_label = function (true_if_display) {
            raudrohi.base.assert_isBoolean(true_if_display, 'true_if_display',
                '4fd4f861-5968-463e-b54a-f29150705dd7');
            try {
                b_always_display_menuitem_whole_label_ = true_if_display;
                if (self_public_.is_hidden() === false) {
                    self_public_.unhide();
                } // if
            } catch (err) {
                raudrohi.tmg('334d6772-2b3f-413b-824a-f29150705dd7', err);
            } // catch
        } // display_menuitem_whole_label

        var b_apply_wordwrap_ = false;
        var i_wordwrap_max_line_width_ = 30;

        // If the i_wordwrap_max_line_width_or_null===null,
        // the wordwrap is not used, i.e. by setting the wordwrap to
        // null, it is switched off.
        this.set_wordwrap = function (i_wordwrap_max_line_width_or_null) {
            try {
                if (i_wordwrap_max_line_width_or_null === null) {
                    b_apply_wordwrap_ = false;
                    return;
                } // if
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(
                        i_wordwrap_max_line_width_or_null,
                        'i_wordwrap_max_line_width_or_null',
                        '16244612-3c37-4b67-924a-f29150705dd7');
                    if (i_wordwrap_max_line_width_or_null < 1) {
                        raudrohi.tmg('46178565-3a3c-456e-a54a-f29150705dd7',
                            "i_wordwrap_max_line_width_or_null==" +
                            i_wordwrap_max_line_width_or_null);
                    } // if
                } // if
                i_wordwrap_max_line_width_ = i_wordwrap_max_line_width_or_null;
                b_apply_wordwrap_ = true;
            } catch (err) {
                raudrohi.tmg('31660c35-91c2-4966-814a-f29150705dd7', err);
            } // catch
        } // this.set_wordwrap


        function create_containers_selector_html() {
            try {
                var ht = raudrohi.widgetless_ui.func.get_alignment_style_values(prc_.alignment1_);
                var answer = lc_s_emptystring +
                             '<table border="0px"><tbody>' +
                             '<tr><td>' +
                             '<div id="' + menutext_display_id_ + '" ></div>' +
                             '</td></tr>' +
                             '<tr><td>' +
                             '<div id="' + selector_location_id_ +
                             '" style="vertical-align:' +
                             ht.get('vertical-align') + ';text-align:' +
                             ht.get('text-align') +
                             ';"></div>' +
                             '</td></tr>' +
                             '</tbody></table>';
                raudrohi.base.pool_of_hashtables.return_used_hashtable(ht);
                return answer;
            } catch (err) {
                raudrohi.tmg('e4f83450-1d6f-4364-b14a-f29150705dd7', err);
            } // catch
        } // create_containers_selector_html


        var containers_html_cache_;

        function create_containers() {
            try {
                if (!prc_.containers_html_cached_) {
                    containers_html_cache_ = create_containers_selector_html();
                    prc_.containers_html_cached_ = true;
                } // if
                raudrohi.base.set_innerHTML(prc_.container_id_,
                    containers_html_cache_);
            } catch (err) {
                raudrohi.tmg('1ae91585-2ca2-470e-8b4a-f29150705dd7', err);
            } // catch
        } // create_containers

        // Within the evh_selection_menu_t1 it is assumed that the menu is visible.
        self_public_.private_code_.evh_.evh_selection_menu_t1 = function (e) {
            try {
                //raudrohi.adapter.YUI_preventdefault(e); // intentionally omitted
                if (self_public_.is_hidden()) {
                    raudrohi.tmg('9164cc55-5e56-4717-813a-f29150705dd7',
                        'One ought to be able to select only, when the selector ' +
                        'is not hidden.');
                } // if
                var formfield_value = raudrohi.widgetless_ui.func.get_formfield_value(prc_.html_id_);
                var menu_item = prc_.content_.text_with_GUI_sideeffects_2_instance(
                    formfield_value);
                if (menu_item == null) {
                    raudrohi.tmg('b4452e8f-5a4c-4cf0-b43a-f29150705dd7',
                        'Textfield value =="' + formfield_value +
                        '", but the menu content does not contain ' +
                        'such element. ');
                } // if
                render_menutext_display_value_t1(menu_item.menuitem_label);
                selected_menuitem_ = menu_item;
                if (menu_item == null) {
                    raudrohi.tmg('3d24872d-af42-4f67-b43a-f29150705dd7',
                        'menu_item==null');
                } // if
                self_public_.evh_selection_impl(menu_item);
            } catch (err) {
                raudrohi.tmg('93444b37-1a3f-4ccc-823a-f29150705dd7', err);
            } // catch
        } // evh_selection_menu_t1


        function render_part2_selector() {
            try {
                var ar_menuitem_texts_for_writing_2_GUI = prc_.content_.get_array_of_menuitem_texts_that_are_meant_only_for_writing_into_GUI();
                var selector_html;
                if (selected_menuitem_ !== null) {
                    selector_html =
                    raudrohi.widgetless_ui.func.toHTML_array2selector(
                        prc_.html_id_, ar_menuitem_texts_for_writing_2_GUI,
                        selected_menuitem_.mc_truncated_text_, 1);
                } else {
                    selector_html =
                    raudrohi.widgetless_ui.func.toHTML_array2selector(
                        prc_.html_id_, ar_menuitem_texts_for_writing_2_GUI,
                        lc_s_emptystring, 1);
                } // else
                raudrohi.base.set_innerHTML(selector_location_id_,
                    selector_html);
                raudrohi.adapter.addEventListner(prc_.html_id_, 'change',
                    self_public_.private_code_.evh_.evh_selection_menu_t1);
            } catch (err) {
                raudrohi.tmg('53f05392-093b-4256-913a-f29150705dd7', err);
            } // catch
        } // render_part2_selector

        function render_menutext_display_value_t1(s_full_menuitem_text) {
            try {
                if ((display_menuitem_whole_label_ === true) ||
                    (b_always_display_menuitem_whole_label_ === true)) {
                    var fulltext = s_full_menuitem_text;
                    var truncated_text = raudrohi.widgetless_ui.func.get_formfield_value(prc_.html_id_);
                    if ((truncated_text.length < fulltext.length) ||
                        (b_always_display_menuitem_whole_label_ === true)) {
                        var s = fulltext;
                        if (b_apply_wordwrap_ === true) {
                            var b_use_fake_but_fast = true;
                            s = raudrohi.lang.word_wrap(fulltext,
                                i_wordwrap_max_line_width_,
                                lc_s_br, lc_s_space, b_use_fake_but_fast);
                        } // if
                        raudrohi.base.set_innerHTML(menutext_display_id_,
                            '<p>' + s + '</p>');
                    } else {
                        raudrohi.base.set_innerHTML(menutext_display_id_,
                            lc_s_emptystring);
                    } // else
                } else {
                    raudrohi.base.set_innerHTML(menutext_display_id_,
                        lc_s_emptystring);
                } // else
            } catch (err) {
                raudrohi.tmg('b5180244-cd4e-4294-8f3a-f29150705dd7', err);
            } // catch
        } // render_menutext_display_value_t1

        function render_menutext_display_value() {
            try {
                var fulltext = selected_menuitem_.menuitem_label;
                render_menutext_display_value_t1(fulltext);
            } catch (err) {
                raudrohi.tmg('80ef8838-2ab8-46bb-a32a-f29150705dd7', err);
            } // catch
        } // render_menutext_display_value

        prc_.customizable.compulsory.render_editable = function () {
            try {
                if (prc_.content_set_ !== true) {
                    raudrohi.base.set_innerHTML(prc_.container_id_,
                        html_if_menucontent_not_set_);
                    return;
                } // if
                create_containers();
                render_part2_selector();
                render_menutext_display_value();
            } catch (err) {
                raudrohi.tmg('4172ca99-5fe0-4249-a52a-f29150705dd7', err);
            } // catch
        } // render_editable

        prc_.customizable.compulsory.render_readonly = function () {
            try {
                if (!prc_.content_set_) {
                    raudrohi.base.set_innerHTML(prc_.container_id_,
                        html_if_menucontent_not_set_);
                    return;
                } // if
                create_containers();
                raudrohi.base.set_innerHTML(selector_location_id_,
                    lc_s_emptystring);

                var s = selected_menuitem_.menuitem_label;
                if (b_apply_wordwrap_ === true) {
                    var b_use_fake_but_fast = true;
                    s =
                    raudrohi.lang.word_wrap(selected_menuitem_.menuitem_label,
                        i_wordwrap_max_line_width_,
                        lc_s_br, lc_s_space, b_use_fake_but_fast);
                } // if
                raudrohi.base.set_innerHTML(menutext_display_id_, s);
            } catch (err) {
                raudrohi.tmg('dd1ffc56-da18-4e70-942a-f29150705dd7', err);
            } // catch
        } // render_readonly

        this.menuitem_text_exists = function (s_menu_item_dot_menuitem_label) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_menu_item_dot_menuitem_label,
                        's_menu_item_dot_menuitem_label',
                        '01944e0a-b00f-42c3-812a-f29150705dd7');
                } // if
                if (prc_.content_set_ !== true) {
                    return false;
                } // if
                var b = prc_.content_.menuitem_text_exists(
                    s_menu_item_dot_menuitem_label);
                return b;
            } catch (err) {
                raudrohi.tmg('5f7f64c6-abf9-4c62-952a-f29150705dd7', err);
            } // catch
        };

        // If the content is not set or a menu item with a given label does
        // not exist within the menu, then this function just returns default
        // text that depicts the get_menuitem_text_by_indexsituation.
        this.get_menuitem_text_by_index = function (an_int) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(an_int,
                        'an_int', '6b030b48-15ee-4d26-852a-f29150705dd7');
                    if (an_int < 0) {
                        raudrohi.tmg('bdc98a28-cabe-456e-a12a-f29150705dd7',
                            lc_s_emptystring + an_int + '==an_int < 0');
                    } // if
                } // if
                // This method is a bit bad from API-s ortogonality point
                // of view, but it's been added here in a hurry, so
                // that explains its existance.
                var s_out = 'get_menuitem_text_by_index error: ' +
                            'menu content not set';
                if (prc_.content_set_ === false) {
                    return s_out;
                } // if
                var ar = prc_.content_.get_ar_GUI_sideeffectfree_texts();
                if ((ar.length - 1) < an_int) {
                    s_out = 'get_menuitem_text_by_index error: ' + +ar.length +
                            '==(ar.length-1) < an_int==' + an_int;
                    if (raudrohi_settings_debug_JavaScript === true) {
                        raudrohi.tmg('0f8f7223-7ff2-4fa2-b31a-f29150705dd7',
                            s_out);
                    } else {
                        return s_out;
                    } // else
                } // if
                s_out = ar[an_int];
                return s_out;
            } catch (err) {
                raudrohi.tmg('e87e9831-50cd-496f-841a-f29150705dd7', err);
            } // catch
        } // get_menuitem_text_by_index

        // If the content is not set or a menu item with a given label does
        // not exist within the menu, then this function just returns without
        // throwning any exceptions.
        this.set_selected_by_menuitem_text =
        function (s_menu_item_dot_menuitem_label) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_menu_item_dot_menuitem_label,
                        's_menu_item_dot_menuitem_label',
                        '7b200892-fa90-4a5e-b11a-f29150705dd7');
                } // if
                var b;
                b =
                self_public_.menuitem_text_exists(s_menu_item_dot_menuitem_label);
                if (b !== true) {
                    return;
                } // if
                selected_menuitem_ =
                prc_.content_.GUI_sideeffectfree_text_2_instance(
                    s_menu_item_dot_menuitem_label);
                if (self_public_.is_hidden() === false) {
                    self_public_.unhide();
                } // if
                self_public_.evh_selection_impl(selected_menuitem_);
            } catch (err) {
                raudrohi.tmg('3f01401b-075c-485a-921a-f29150705dd7', err);
            } // catch
        } // set_selected_by_menuitem_text

        // menu_item === <something that has been stored into raudrohi.widgets.g1.menu_t1_content>
        this.evh_selection_impl = function (menu_item) {
            //            This method is expected to be overriden by the
            //            widget's container.
        } // evh_selection_impl

        // The menuitem_text_max_width is used for tuning the
        // truncation function, which is used for
        // making sure that no menuitem text within the array_of_menuitem_texts
        // is wider than the menuitem_text_max_width. The
        // array_of_menuitem_instances is expected to contain objects that
        // have a "menuitem_label" public field.
        this.set_content =
        function (array_of_menuitem_instances, menuitem_text_max_width) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    // If the widget is hidden, the
                    // wrong type of the content will come appearent when
                    // the call stack does not contain the faulty call any more.
                    raudrohi.base.assert_isArray(array_of_menuitem_instances,
                        'array_of_menuitem_instances',
                        '50c77122-1e3d-4ae0-a21a-f29150705dd7');
                    raudrohi.base.assert_isNumber(menuitem_text_max_width,
                        'menuitem_text_max_width',
                        '09e9df11-eb60-4158-951a-f29150705dd7');
                } // if
                self_public_.clear_all_custom_indices();
                prc_.content_ = new raudrohi.widgets.g1.menu_t1_content(
                    array_of_menuitem_instances, menuitem_text_max_width);
                if (0 < prc_.content_.numberOfmenuitems()) {
                    // The the very first menu item is selected by default.
                    var ar = prc_.content_.get_ar_GUI_sideeffectfree_texts();
                    var txt = ar[0];
                    selected_menuitem_ =
                    prc_.content_.GUI_sideeffectfree_text_2_instance(txt);
                    self_public_.evh_selection_impl(selected_menuitem_);
                    prc_.content_set_ = true;
                } else {
                    selected_menuitem_ = null;
                    prc_.content_set_ = false; // an empty menu
                } // else
                if (self_public_.is_hidden() === false) {
                    self_public_.unhide();
                } // if
            } catch (err) {
                raudrohi.tmg('b9719e27-533b-4ce8-b21a-f29150705dd7', err);
            } // catch
        } // set_content


        this.get_content = function () {
            try {
                return prc_.content_;
            } catch (err) {
                raudrohi.tmg('19ef7c34-5e55-4e59-a20a-f29150705dd7', err);
            } // catch
        } // get_content

        this.get_number_of_menuitems = function () {
            try {
                var n = prc_.content_.numberOfmenuitems();
                return n;
            } catch (err) {
                raudrohi.tmg('75a98296-3cc3-472c-a90a-f29150705dd7', err);
            } // catch
        } // get_number_of_menuitems

        this.clear_menu_content = function () {
            try {
                prc_.content_set_ = false;
                self_public_.clear_all_custom_indices();
                prc_.content_ = null;
                selected_menuitem_ = null;
                if (self_public_.is_hidden() === false) {
                    self_public_.unhide();
                } // if
            } catch (err) {
                raudrohi.tmg('d339cd5a-4b16-4583-a30a-f29150705dd7', err);
            } // catch
        } // clear_menu_content

        var ht_custom_indices_ = new Hashtable();

        this.clear_all_custom_indices = function () {
            try {
                var keys = ht_custom_indices_.keys();
                var len = keys.length;
                var key;
                var ht_index;
                for (var i = 0; i < len; i++) {
                    key = keys[i];
                    ht_index = ht_custom_indices_.get(key);
                    raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_index);
                } // for
                ht_custom_indices_.clear();
            } catch (err) {
                raudrohi.tmg('fd99ef38-a669-4b09-830a-f29150705dd7', err);
            } // catch
        } // clear_all_custom_indices

        // It doesn't throw, if the index does not exist.
        // It does not remove the index, it only removes its elements.
        this.clear_custom_index = function (s_index_name) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_index_name, 's_index_name',
                        '37438e66-3b9f-447f-a30a-f29150705dd7');
                } // if
                var b_index_exists = ht_custom_indices_.containsKey(s_index_name);
                if (b_index_exists === false) {
                    return;
                } // if
                var ht_index = ht_custom_indices_.get(s_index_name);
                ht_index.clear();
            } catch (err) {
                raudrohi.tmg('4bc43848-a6a3-4ef5-b20a-f29150705dd7', err);
            } // catch
        } // clear_custom_index

        // The menu item, x_menu_item, has to be present in the
        // menu prior to a call to this method. If it's missing,
        // this mentod will throw.
        this.insert_2_custom_index =
        function (s_index_name, s_key, x_menu_item) {
            try {
                if (prc_.content_set_ === false) {
                    raudrohi.tmg('358e7521-0afd-4557-850a-f29150705dd7',
                        'prc_.content_set_===false');
                } // if
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_index_name, 's_index_name',
                        '5c854693-3e5f-49c5-a1f9-f29150705dd7');
                    raudrohi.base.assert_isString(s_key, 's_key',
                        '92b9c319-aaf7-410a-a4f9-f29150705dd7');
                    raudrohi.base.assert_isObject(x_menu_item, 'x_menu_item',
                        '90a67818-9012-4c83-92f9-f29150705dd7');
                    var b_label_ok = prc_.content_.menuitem_text_exists(
                        x_menu_item.menuitem_label);
                    if (b_label_ok == false) {
                        raudrohi.tmg('f3e230b6-0ad4-4401-a1f9-f29150705dd7',
                            "There's no menuitem with a label of \"" +
                            x_menu_item.menuitem_label + '".');
                    } // if
                } // if
                var b_index_exists = ht_custom_indices_.containsKey(s_index_name);
                var ht_index = null;
                if (b_index_exists === false) {
                    ht_index =
                    raudrohi.base.pool_of_hashtables.get_empty_hashtable();
                    ht_custom_indices_.put(s_index_name, ht_index);
                } else {
                    ht_index = ht_custom_indices_.get(s_index_name);
                } // else
                ht_index.put(s_key, x_menu_item);
            } catch (err) {
                raudrohi.tmg('3fa8a825-f1dc-4634-a1f9-f29150705dd7', err);
            } // catch
        } // insert_2_custom_index

        // In non-debug mode it won't throw, if the index or the key
        // do not exist, because it's not such a big flaw that it
        // should crash the application, but in general it is a bug,
        // if the given index or its key do not exist.
        this.set_selected_by_custom_index_key = function (s_index_name, s_key) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_index_name, 's_index_name',
                        '47505a57-a3fe-4624-a2f9-f29150705dd7');
                    raudrohi.base.assert_isString(s_key, 's_key',
                        'e54fb640-ddd5-41c0-91f9-f29150705dd7');
                } // if
                var b_index_exists = ht_custom_indices_.containsKey(s_index_name);
                if (b_index_exists == false) {
                    if (raudrohi_settings_debug_JavaScript === true) {
                        raudrohi.tmg('19663213-0343-473f-84e9-f29150705dd7',
                            'A custom index with a name of "' + s_index_name +
                            '" does not exist.');
                    } else {
                        return;
                    } // else
                } // if
                var ht_index = ht_custom_indices_.get(s_index_name);
                var b_key_exists = ht_index.containsKey(s_key);
                if (b_key_exists == false) {
                    return; // PLUTO
                    if (raudrohi_settings_debug_JavaScript === true) {
                        raudrohi.tmg('1b7df794-de23-4abc-b9e9-f29150705dd7',
                            'A custom index with a name of "' + s_index_name +
                            '" does not contain key "' + s_key + '".');
                    } else {
                        return;
                    } // else
                } // if
                var mi = ht_index.get(s_key);
                self_public_.set_selected_by_menuitem_text(mi.menuitem_label);
            } catch (err) {
                raudrohi.tmg('7c4d7822-6f01-44cc-93e9-f29150705dd7',
                    's_field_name_in_parent==' +
                    self_public_.s_field_name_in_parent + '  ' + err);
            } // catch
        } // set_selected_by_custom_index_key

        this.phone.receive_phonecall = function (a_phonecall_instance) {
            try {
                var data = raudrohi.adapter.trim(a_phonecall_instance.data);
                var a_pair_branching = raudrohi.base.bisect(data, '|||');
                raudrohi.base.assert_isNotnull(a_pair_branching,
                    'a_pair_branching', '9f4e7322-d1e6-4bf7-82e9-f29150705dd7');
                if (pileofmethods_t1_.standard_phonecall_received_t1(
                    a_pair_branching, a_phonecall_instance)) {
                    return;
                } // if
                switch (a_pair_branching.a) {
                    case 'set_content':
                        self_public_.set_content(a_phonecall_instance.data2);
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript === true) {
                            raudrohi.tmg('81364f3d-b687-43b2-94e9-f29150705dd7',
                                'There\'s no message handler for ' +
                                a_pair_branching.a);
                        } // if
                } // switch
            } catch (err) {
                raudrohi.widgets.g1.sys.phonecall_receiver_tmg(
                    '26db3602-02fc-4015-8ae9-f29150705dd7', err,
                    a_phonecall_instance);
            } // catch
        } // receive_phonecall

        prc_.startup_shutdown_handler_.startbutton_pushed();
    } catch (err) {
        raudrohi.tmg('5937da18-9664-4454-92d9-f29150705dd7', err);
    } // catch
} // raudrohi.widgets.g1.menu_t1

//------------------------------------------------------------------------
//=========================================================================


//
// This widget does not use the widgets statemachine achitecture
// for its states, but it has 2, independent statebits:
// b_state_blank_, prc_.content_set_.
//
// TODO: add the usage of critical sections to the content gettersetters.
//
// WARNING: Actually, as of 01.2011 this implementation is deprecated,
// because it uses the HTML form menu. The problem with the HTML form
// menu is that one could not figurea out, within a week, how to
// create an atomic method that sets the menu content and selects
// a specific menu-item. The core of the problem consists of
// the following assertions:
//
// 1) The HTML elements, including form menus, are rendered in
//    a background thread.
// 2) One can not select a menu-item of a menu that has not been
//    rendered.
// 3) If a form menu gets rendered, one of the menu elements is
//    "graphically" selected by default and that triggers a
//    menu selection event just as if the user would have selected it.
// 4) According to the Raudrohi JavaScript Library any widget,
//    including menus, must have a functionality that they have
//    both, visible state, and hidden state and they are expected to
//    be missing the graphical representation in the hidden state.
//
// So, all in all, one just couldn't figure out, how to
// create a function like
// set_content_and_select_a_menuitem(content,s_label1)
// because even if all of the menu-item selection commands and
// menu content edit commands were placed into a single queue
// (which I tried, unfortunately) and the queue were emptied
// one by one by using the HTML menu selection events for clocking,
// the clocking gets messed up if the widget gets hidden or
// there's a combination of hide/show events between "clock ticks".
//
// The next version of a menu widget to try is to use the
// API of this widget, but to replace the HTML form menu with something
// that one can control oneself to be able to create atomic operations.
raudrohi.widgets.g1.partialmenu_t1 =
function (s_html_id, parent_instance, i_menu_max_width, i_textarea_width,
    i_textarea_height, s_html_if_menucontent_not_set, s_mode,
    s_container_style) {
    try {
        s_mode =
        typeof(s_mode) !== 'undefined' ? s_mode : 'partialmenu_t1_mode_1';
        if (raudrohi_settings_debug_JavaScript === true) {
            // The s_html_id is tested in an autogenerated code region.
            raudrohi.base.assert_isString(s_mode, 's_mode',
                'd660e595-98ae-44d7-b23f-02d151705dd7');
        } // if
        switch (s_mode) {
            case 'partialmenu_t1_mode_1':
                s_container_style = typeof(s_container_style) !==
                                    'undefined' ? s_container_style : 'partialmenu_t1_containertype_vertical_1';
                break;
            case 'units_1':
                s_container_style = typeof(s_container_style) !==
                                    'undefined' ? s_container_style : 'partialmenu_t1_containertype_vertical_1';
                break;
            default:
                if (raudrohi_settings_debug_JavaScript) {
                    throw raudrohi.tmg(
                        '1727d545-1ddb-4fd8-b85f-02d151705dd7',
                        'There\'s no branching for s_mode(==' +
                        s_mode + ').');
                } // if
        } // switch

        // Hrere's the truth table for this widget's internals:
        // |-------------|----------------------------|-------------------|
        // | <menu set>  | <widget is in blank state> | prc_.content_set_ |
        // |-------------|----------------------------|-------------------|
        // |    false    |           true             |      false        |
        // |    true     |           true             |      true         |
        // |    true     |           false            |      true         |
        // |-------------|----------------------------|-------------------|
        // If the menu does not contain any menu items, the <menu set>===false


        // RENESSAATOR_BLOCK_START
// RENESSAATOR_BLOCK_ID=block_1
// RENESSAATOR_SOURCE_LANGUAGE=Ruby
// RENESSAATOR_SOURCE_START
// RAUDROHI_HOME=ENV['RAUDROHI_HOME']
// require(RAUDROHI_HOME+"/src/dev_tools/code_generation/raudrohi_cg0.rb")
// require(RAUDROHI_CODE_GENERATION+"/by_file/raudrohi_js_widgets_partialmenu_block_1.rb")
// RENESSAATOR_SOURCE_END
//
// RENESSAATOR_AUTOGENERATED_TEXT_START
    if(raudrohi_settings_debug_JavaScript===true){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_debug_verification 
            raudrohi.base.assert_isNumber(i_menu_max_width,'i_menu_max_width',
                'a8604359-24d9-43ff-912a-503371705dd7');
raudrohi.base.assert_isNumber(i_textarea_width,'i_textarea_width',
                '12f7bcfc-c5ab-4977-852a-503371705dd7');
raudrohi.base.assert_isNumber(i_textarea_height,'i_textarea_height',
                'cdc5b32c-f792-4789-842a-503371705dd7');
raudrohi.base.assert_isString(s_html_if_menucontent_not_set,'s_html_if_menucontent_not_set',
                'cefd2816-9680-4fcf-a23a-503371705dd7');
raudrohi.base.assert_isString(s_container_style,'s_container_style',
                '6232c92a-5b4c-4468-a33a-503371705dd7');

    } // if

    if(raudrohi_settings_debug_JavaScript===true){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_debug_verification 
            raudrohi.base.assert_is_HTML_ID(s_html_id,'s_html_id',
                '3202612a-ced5-46b6-b13a-503371705dd7');
raudrohi.base.assert_is_g1_widget(parent_instance,'parent_instance',
                '8cdd191f-8741-47fa-933a-503371705dd7');

    } // if
     //---widget--boilerplate_1_--start--
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget 
		var self_public_=this;
		var pileofmethods_t1_=new raudrohi.widgets.g1.pileofmethods_t1(
                 self_public_,'raudrohi.widgets.g1.partialmenu_t1',
                 s_html_id);
		var prc_=self_public_.private_code_;
		var wg_hooks_=self_public_.wg_hooks_;
     //---widget--boilerplate_1_--end----


prc_.parent_instance_=parent_instance;

var widget_textarea_t1_custom_value_=null;
var id_textarea_t1_custom_value_=prc_.html_id_+'_textarea_t1_custom_value';
var widget_menu_t1_standard_values_=null;
var id_menu_t1_standard_values_=prc_.html_id_+'_menu_t1_standard_values';

		self_public_.private_code_.evh_.evh_menu_t1_standard_values=function(e){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget_g1_menu_t1 
			try{
              evh_menu_t1_standard_values_selected_impl();
			} catch (err){
				raudrohi.tmg('e5284f45-f443-49a8-832a-503371705dd7',err);
			} // catch
		} // evh_menu_t1_standard_values 



   		function create_widgets_autogen( ){
				        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget 
			try{
					            var ht_widget_textarea_t1_custom_value_params=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
	            ht_widget_textarea_t1_custom_value_params.put('type','text');
             widget_textarea_t1_custom_value_=new raudrohi.widgets.g1.textarea_t1(
                     id_textarea_t1_custom_value_,i_textarea_width_,i_textarea_height_,
                     ht_widget_textarea_t1_custom_value_params);
             widget_textarea_t1_custom_value_.set_alignment('west');
             prc_.register_subwidget(widget_textarea_t1_custom_value_,'hidden');
             widget_textarea_t1_custom_value_.s_field_name_in_parent='custom_value';
             raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_widget_textarea_t1_custom_value_params);

        widget_menu_t1_standard_values_=new raudrohi.widgets.g1.menu_t1(
                id_menu_t1_standard_values_,
                s_html_if_menucontent_not_set_);
        widget_menu_t1_standard_values_.evh_selection_impl=self_public_.private_code_.evh_.evh_menu_t1_standard_values;
        widget_menu_t1_standard_values_.set_alignment('west');
        widget_menu_t1_standard_values_.s_field_name_in_parent='standard_values';
        prc_.register_subwidget(widget_menu_t1_standard_values_,'visible');

			} catch(err){
				raudrohi.tmg('91bf8a8f-46a3-4a71-846a-503371705dd7',err);
			} // catch
		} // create_widgets_autogen


// RENESSAATOR_AUTOGENERATED_TEXT_END
// RENESSAATOR_BLOCK_END
        var lc_s_emptystring = raudrohi_glc_s_emptystring;
        var lc_s_label1 = raudrohi_glc_s_label1;
        var lc_s_label2 = raudrohi_glc_s_label2;

        if (raudrohi_settings_debug_JavaScript === true) {
            if (i_menu_max_width < 1) {
                raudrohi.tmg('32b59423-40a2-4a83-8358-02d151705dd7',
                    "i_menu_max_width==" + i_menu_max_width + " < 1 ");
            } // if
            if (i_textarea_width < 1) {
                raudrohi.tmg('e55474f4-ddb6-411c-a6d8-02d151705dd7',
                    "i_textarea_width==" + i_textarea_width + " < 1 ");
            } // if
            if (i_textarea_height < 1) {
                raudrohi.tmg('2b7ef491-95f0-432a-a848-02d151705dd7',
                    "i_textarea_width==" + i_textarea_height + " < 1 ");
            } // if
        } // if

        prc_.content_set_ = false;
        prc_.content_ = raudrohi.base.pool_of_hashtables.get_empty_hashtable();
        var i_menu_max_width_ = i_menu_max_width;
        var i_textarea_width_ = i_textarea_width;
        var i_textarea_height_ = i_textarea_height;
        var s_html_if_menucontent_not_set_ = s_html_if_menucontent_not_set;
        var ht_label1_to_label2_ = new Hashtable();
        var ht_label2_to_label1_ = new Hashtable();
        var ht_label1_to_mi_ = new Hashtable();
        var array_of_menuitem_instances_ = [];
        var b_textarea_visible_ = false;
        var ar_menu_setup_ = [];
        var s_mode_ = s_mode;
        var s_container_style_ = s_container_style;
        var s_textfield_default_value_ = "";
        var s_menu_default_value_s_label1_ = null;


        // Is expected to work also, when the widgets
        // have not yet been initialized or the menu
        // does not contain any items.
        function select_menuitem_by_s_label_1(s_label1) {
            try {
                var s_label1_converted = null;
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_label1, 's_label1',
                        '44378a41-fbb3-44fc-bb58-02d151705dd7');
                    s_label1_converted =
                    prc_.customizable.optional.hook_for_autoconverting_incoming_content_s_label1(
                        s_label1);
                    if (0 < ar_menu_setup_.length) {
                        if (ht_label1_to_mi_.containsKey(s_label1_converted) ===
                            false) {
                            raudrohi.tmg('6dc39950-40a7-4723-8b28-02d151705dd7',
                                'A menu item with s_label1=="' +
                                s_label1_converted +
                                '" is missing from the menu.');
                        } // if
                    } // if
                } // if
                if (s_label1_converted === null) {
                    s_label1_converted =
                    prc_.customizable.optional.hook_for_autoconverting_incoming_content_s_label1(
                        s_label1);
                } // if
                // It might be that the whole widget, including the
                // subwidgets, the menu and the text area, is hidden,
                // which means that the menu content assignment does not
                // trigger a selection event. That's why one assigns
                // the b_textarea_visible_ here.
                b_textarea_visible_ = false;
                switch (s_mode_) {
                    case 'partialmenu_t1_mode_1':
                        if (s_label1_converted == 'custom') {
                            b_textarea_visible_ = true;
                        } // if
                        break;
                    case 'units_1':
                        b_textarea_visible_ = true;
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                'c75afe22-4b84-4212-a917-02d151705dd7',
                                'There\'s no branching for s_mode_(==' +
                                s_mode_ + ').');
                        } // if
                } // switch
                if (widget_menu_t1_standard_values_ !== null) {
                    if (0 < ar_menu_setup_.length) {
                        var mi = ht_label1_to_mi_.get(s_label1_converted);
                        widget_menu_t1_standard_values_.set_selected_by_menuitem_text(
                            mi.menuitem_label);
                    } // if
                    // The menu widget takes care of its own
                    // gaphical updating, but the repainting is
                    // needed for updating the visibility of the
                    // textarea widget.
                    prc_.repaint_if_graphical_and_not_hidden();
                } // if
            } catch (err) {
                raudrohi.tmg('923371e0-bb96-4153-a6f7-02d151705dd7', err);
            } // catch
        } // select_menuitem_by_s_label_1

        function set_menu_content_impl_init_array_of_menuitem_instances() {
            try {
                array_of_menuitem_instances_ = [];
                var len = ar_menu_setup_.length;
                var i = 0;
                var elem;
                var x;
                for (i = 0; i < len; i++) {
                    elem = ar_menu_setup_[i];
                    ht_label1_to_label2_.put(elem.s_label1, elem.s_label2);
                    ht_label2_to_label1_.put(elem.s_label2, elem.s_label1);
                    x = {};
                    x.s_label1 = elem.s_label1;
                    x.menuitem_label = elem.s_label2;
                    array_of_menuitem_instances_.push(x);
                    ht_label1_to_mi_.put(elem.s_label1, x);
                } // for
            } catch (err) {
                raudrohi.tmg('45342af1-6290-45b7-8047-02d151705dd7', err);
            } // catch
        } // set_menu_content_impl_init_array_of_menuitem_instances

        prc_.set_menu_content_impl = function (ar_menu_setup) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isArray(ar_menu_setup, 'ar_menu_setup',
                        '3351e423-81de-4a00-9317-02d151705dd7');
                } // if
                self_public_.clear_menu_content();
                ar_menu_setup_ = ar_menu_setup;
                set_menu_content_impl_init_array_of_menuitem_instances();
                if (widget_menu_t1_standard_values_ !== null) {
                    widget_menu_t1_standard_values_.set_content(
                        array_of_menuitem_instances_, i_menu_max_width_);
                } // if
                // If the menu widget is hidden, the menu item
                // selection event is not triggered at menu
                // content assignment.
                b_textarea_visible_ = false;
                if (0 < ar_menu_setup_.length) {
                    var mi = array_of_menuitem_instances_[0];
                    s_menu_default_value_s_label1_ = mi.s_label1;
                    switch (s_mode_) {
                        case 'partialmenu_t1_mode_1':
                            if (s_menu_default_value_s_label1_ == 'custom') {
                                b_textarea_visible_ = true;
                            } // if
                            break;
                        case 'units_1':
                            b_textarea_visible_ = true;
                            break;
                        default:
                            if (raudrohi_settings_debug_JavaScript) {
                                throw raudrohi.tmg(
                                    '788ee0f5-0068-4dc8-ab37-02d151705dd7',
                                    'There\'s no branching for s_mode_(==' +
                                    s_mode_ + ').');
                            } // if
                    } // switch
                    prc_.content_set_ = true;
                } // if
                if (widget_menu_t1_standard_values_ !== null) {
                    prc_.repaint_if_graphical_and_not_hidden();
                } // if
            } catch (err) {
                raudrohi.tmg('a27542ee-bb59-41c2-8a27-02d151705dd7', err);
            } // catch
        } // prc_.set_menu_content_impl

        // The ar_menu_setup is expected to contain objects with field
        // "s_label1" and "s_label2". The s_label1 is a "machine readable"
        // text and the s_label2 is mostly only for "human consumption".
        // s_label2 is the human readable menu text.
        //
        // If the s_mode=="partialmenu_t1_mode_1", then
        // the s_label1 value of 'custom' is reserved. It's not compulsory
        // to include it to the ar_menu_setup_container, but if it is there,
        // then its selection results an appearance of a textarea.
        // inserting a custom s_label2. The custom s_label2 won't override the
        // menu text.
        this.set_menu_content = function (ar_menu_setup) {
            try {
                prc_.set_menu_content_impl(ar_menu_setup);
            } catch (err) {
                raudrohi.tmg('428e08c5-b498-49fe-9357-02d151705dd7', err);
            } // catch
        } // set_menu_content

        // The idea is that during application the values of the
        // standard values change, but the old versions tend to
        // stay in the database. Sometimes one just needs to
        // change the view of the content. For example, when
        // the partialmenu widget was used for submiting and displaying
        // volume in both litres and m^3, then one should be
        // able to remove the litres and display only m^3 values
        // by silently auto-converting the litres value to m^3.
        // That's what this hook is for.
        prc_.customizable.optional.hook_for_autoconverting_incoming_content =
        function (ht_content) {
            try {
                // If You're overriding this function, then
                // please don't forget to override the
                // prc_.customizable.optional.hook_for_autoconverting_incoming_content_s_label1
                return ht_content;
            } catch (err) {
                raudrohi.tmg('843fcfc7-be58-4b6d-9f16-02d151705dd7', err);
            } // catch
        } // prc_.customizable.optional.hook_for_autoconverting_incoming_content

        prc_.customizable.optional.hook_for_autoconverting_incoming_content_s_label1 =
        function (s_label1) {
            try {
                var s = lc_s_emptystring + s_label1;
                return s;
            } catch (err) {
                raudrohi.tmg('483b22e4-7049-4b83-b636-02d151705dd7', err);
            } // catch
        } // prc_.customizable.optional.hook_for_autoconverting_incoming_content_s_label1

        prc_.customizable.optional.content_from_GUI_2_vars = function () {
            try {
                if (prc_.content_set_ === false) {
                    return;
                } // if
                var mi = widget_menu_t1_standard_values_.get_selected_menuitem();
                var s_label1 = mi.s_label1;
                var s_label2 = null;
                switch (s_mode_) {
                    case 'units_1':
                        s_label2 =
                        widget_textarea_t1_custom_value_.get_content();
                        break;
                    case 'partialmenu_t1_mode_1':
                        if (s_label1 == 'custom') {
                            s_label2 =
                            widget_textarea_t1_custom_value_.get_content();
                        } else {
                            s_label2 = "" + ht_label1_to_label2_.get(s_label1);
                        } // else
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '42a545b3-142d-4195-8536-02d151705dd7',
                                'There\'s no branching for s_mode_(==' +
                                s_mode_ + ').');
                        } // if
                } // switch
                prc_.content_.put('s_label1', s_label1);
                prc_.content_.put('s_label2', s_label2);
            } catch (err) {
                raudrohi.tmg('42fb1eb7-9646-408a-ac56-02d151705dd7', err);
            } // catch
        } // prc_.customizable.optional.content_from_GUI_2_vars

        // The mi is the selected menuitem that has fields
        // "menuitem_label" and "s_label1". The "menuitem_label"
        // corresponds to "s_label2".
        prc_.customizable.optional.evh_selection_impl = function (mi) {
            //            This method is expected to be overriden by the
            //            widget's container.
        } // evh_selection_impl

        function evh_menu_t1_standard_values_selected_impl() {
            try {
                var mi = widget_menu_t1_standard_values_.get_selected_menuitem();
                var s_label1 = mi.s_label1;
                b_textarea_visible_ = false;
                switch (s_mode_) {
                    case 'units_1':
                        b_textarea_visible_ = true;
                        break;
                    case 'partialmenu_t1_mode_1':
                        if (s_label1 == 'custom') {
                            b_textarea_visible_ = true;
                        } else {
                            b_textarea_visible_ = false;
                        } // else
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '1893de33-2895-4f15-b356-02d151705dd7',
                                'There\'s no branching for s_mode_(==' +
                                s_mode_ + ').');
                        } // if
                } // switch
                prc_.repaint_if_graphical_and_not_hidden();
                if (prc_.content_set_ === true) {
                    //var ht_content=self_public_.get_content();
                    prc_.customizable.optional.evh_selection_impl(mi);
                } // if
            } catch (err) {
                raudrohi.tmg('5ffcf664-af2d-44d2-9016-02d151705dd7', err);
            } // catch
        } // evh_menu_t1_standard_values_selected_impl

        this.set_alignment = function (s_alignment_as_a_cardinal_point) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(
                        s_alignment_as_a_cardinal_point,
                        's_alignment_as_a_cardinal_point',
                        '3e3a80c7-1b53-446f-9a26-02d151705dd7');
                    raudrohi.widgetless_ui.func.assert_alignment_value(
                        s_alignment_as_a_cardinal_point);
                } // if
                if (s_alignment_as_a_cardinal_point == prc_.alignment1_) {
                    return;
                } // if
                widget_textarea_t1_custom_value_.set_alignment(
                    s_alignment_as_a_cardinal_point);
                widget_menu_t1_standard_values_.set_alignment(
                    s_alignment_as_a_cardinal_point);
                prc_.alignment1_ = s_alignment_as_a_cardinal_point;
                prc_.containers_html_cached_ = false;
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('202ad901-24d2-4fe5-af15-02d151705dd7', err);
            } // catch
        } // set_alignment

        prc_.customizable.optional.create_subwidgets = function () {
            try {
                create_widgets_autogen();

                widget_menu_t1_standard_values_.set_content(
                    array_of_menuitem_instances_, i_menu_max_width_);
                prc_.content_set_ = false;
                if (0 < array_of_menuitem_instances_.length) {
                    prc_.content_set_ = true;
                    self_public_.set_content_to_default();
                } // if
                self_public_.set_alignment('west');
                self_public_.always_display_menuitem_whole_label =
                widget_menu_t1_standard_values_.always_display_menuitem_whole_label;
                self_public_.set_wordwrap =
                widget_menu_t1_standard_values_.set_wordwrap;
            } catch (err) {
                raudrohi.tmg('55b817d1-638b-464c-a535-02d151705dd7', err);
            } // catch
        } // create_widgets


        function create_containers() {
            try {
                if (!prc_.containers_html_cached_) {
                    var s_pm1_c1_textarea_line = "" +
                                                 "<tr>\n" + // raudrohi_visible_table_cells
                                                 "<td class=\"\" colspan=\"1\"><div id=\"" +
                                                 id_textarea_t1_custom_value_ +
                                                 "_div\"></div></td>\n" +
                                                 "</tr>\n";

                    var s_pm1_c1_menu_line = "" +
                                             "<tr>\n" +
                                             "<td class=\"\" colspan=\"1\"><div id=\"" +
                                             id_menu_t1_standard_values_ +
                                             "_div\"></div></td>\n" +
                                             "</tr>\n";

                    var s_units_1_c1_line_1 = "" +
                                              "<tr>\n" +
                                              "<td class=\"\" colspan=\"1\"><div id=\"" +
                                              id_textarea_t1_custom_value_ +
                                              "_div\"></div></td>\n" +
                                              "<td class=\"\" colspan=\"1\"><div id=\"" +
                                              id_menu_t1_standard_values_ +
                                              "_div\"></div></td>\n" +
                                              "</tr>\n";


                    var ht_alignmet_styles = raudrohi.widgetless_ui.func.get_alignment_style_values(
                        prc_.alignment1_);
                    var s_algdivstart = "\n" +
                                        '<div style="vertical-align:' +
                                        ht_alignmet_styles.get('vertical-align') +
                                        ';text-align:' +
                                        ht_alignmet_styles.get('text-align') +
                                        ";\">\n";
                    var s_algdivend = "\n</div>\n";

                    //raudrohi_visible_table
                    var ar_class_names = ["raudrohi_positioning_table"];
                    prc_.containers_html_cache_pm1_c1_ = s_algdivstart +
                                                         raudrohi.lang.cg_table_t1(
                                                             s_pm1_c1_menu_line +
                                                             s_pm1_c1_textarea_line,
                                                             ar_class_names) +
                                                         s_algdivend;
                    prc_.containers_html_cache_units_1_c1_ = s_algdivstart +
                                                             raudrohi.lang.cg_table_t1(
                                                                 s_units_1_c1_line_1,
                                                                 ar_class_names) +
                                                             s_algdivend;
                    prc_.containers_html_cached_ = true;
                } // if
                var s_container = null;
                switch (s_mode_) {
                    case 'partialmenu_t1_mode_1':
                        if (s_container_style_ ==
                            'partialmenu_t1_containertype_vertical_1') {
                            s_container = prc_.containers_html_cache_pm1_c1_;
                        } else {
                            raudrohi.tmg('05af837b-9e89-4152-b015-02d151705dd7',
                                "s_container_style=='" + s_container_style_ +
                                "'.");
                        } // else
                        break;
                    case 'units_1':
                        s_container = prc_.containers_html_cache_units_1_c1_;
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '04db9791-45cf-47a4-8825-02d151705dd7',
                                'There\'s no branching for s_mode_(==' +
                                s_mode_ + ').');
                        } // if
                } // switch
                raudrohi.base.set_innerHTML(prc_.html_id_ + "_div",
                    s_container);
            } catch (err) {
                raudrohi.tmg('48a21355-d842-4726-b415-02d151705dd7', err);
            } // catch
        } // create_containers


        prc_.customizable.compulsory.render_editable = function () {
            try {
                create_containers();
                if (b_textarea_visible_ === true) {
                    prc_.mark_elemwidget_to_be_unhidden(
                        widget_textarea_t1_custom_value_);
                } else {
                    prc_.mark_elemwidget_to_be_hidden(widget_textarea_t1_custom_value_);
                } // else
                if (prc_.is_readonly_ === false) {
                    if (ar_menu_setup_.length === 1) {
                        widget_menu_t1_standard_values_.set_readonly(true);
                    } else {
                        widget_menu_t1_standard_values_.set_readonly(false);
                    } // else
                } // if
                prc_.mark_elemwidget_to_be_unhidden(widget_menu_t1_standard_values_);
            } catch (err) {
                raudrohi.tmg('c528338c-45f1-4163-8855-02d151705dd7', err);
            } // catch
        } // render_editable

        prc_.customizable.compulsory.render_readonly =
        prc_.customizable.compulsory.render_editable;

        this.always_display_menuitem_whole_label = function (true_if_display) {
        }

        prc_.set_content_to_default_impl = function () {
            try {
                // If there is at least one item in the menu, the
                // content of this widget is always set.
                // Otherwise the content is not set.
                if (prc_.content_set_ === false) {
                    return;
                } // if
                select_menuitem_by_s_label_1(s_menu_default_value_s_label1_);
                widget_textarea_t1_custom_value_.set_content(
                    s_textfield_default_value_);
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('1554bbd4-ffef-41c3-be55-02d151705dd7', err);
            } // catch
        } // prc_.set_content_to_default_impl

        this.set_content_to_default = function () {
            try {
                prc_.set_content_to_default_impl();
            } catch (err) {
                raudrohi.tmg('258fef13-b8f7-492e-bf24-02d151705dd7', err);
            } // catch
        } // set_content_to_default

        this.set_default_value_for_the_textfield =
        function (s_textfield_default_value) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_textfield_default_value,
                        's_textfield_default_value',
                        '42ae71ad-1a07-4ea7-9534-02d151705dd7');
                } // if
                s_textfield_default_value_ = s_textfield_default_value;
                widget_textarea_t1_custom_value_.set_content(
                    s_textfield_default_value_);
            } catch (err) {
                raudrohi.tmg('1c9cee25-19c5-4789-a734-02d151705dd7', err);
            } // catch
        } // set_default_value_for_the_textfield

        prc_.set_default_value_for_the_menu_impl = function (s_label1) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_label1, 's_label1',
                        '1ab73b73-74ef-40dc-9e24-02d151705dd7');
                } // if
                if (ht_label1_to_mi_.containsKey(s_label1) === false) {
                    raudrohi.tmg('28c13602-8b8f-4970-a854-02d151705dd7',
                        'The s_label1=="' + s_label1 +
                        '", but there is no such element in the menu.');
                } // if
                s_menu_default_value_s_label1_ = s_label1;
                self_public_.set_content_to_default();
            } catch (err) {
                raudrohi.tmg('bc595713-5810-4268-a044-02d151705dd7', err);
            } // catch
        } // prc_.set_default_value_for_the_menu_impl


        this.set_default_value_for_the_menu = function (s_label1) {
            try {
                prc_.set_default_value_for_the_menu_impl(s_label1);
            } catch (err) {
                raudrohi.tmg('21096ba3-d666-42c2-aa14-02d151705dd7', err);
            } // catch
        } // set_default_value_for_the_menu

        prc_.clear_menu_content_impl = function () {
            try {
                if (widget_menu_t1_standard_values_ === null) {
                    return;
                } // if
                if (widget_textarea_t1_custom_value_ === null) {
                    return;
                } // if
                prc_.content_set_ = false;
                switch (s_mode_) {
                    case 'units_1':
                        b_textarea_visible_ = true;
                        break;
                    case 'partialmenu_t1_mode_1':
                        b_textarea_visible_ = false;
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                'a1f08f21-b9d1-4052-9043-02d151705dd7',
                                'There\'s no branching for s_mode_(==' +
                                s_mode_ + ').');
                        } // if
                } // switch
                widget_textarea_t1_custom_value_.set_content(
                    s_textfield_default_value_);
                widget_menu_t1_standard_values_.clear_menu_content();
                s_menu_default_value_s_label1_ = null;
                ht_label1_to_label2_.clear();
                ht_label2_to_label1_.clear();
                ht_label1_to_mi_.clear();
                ar_menu_setup_ = [];
                array_of_menuitem_instances_ = [];
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('62893358-6db8-4de7-9533-02d151705dd7', err);
            } // catch
        } // clear_menu_content_impl

        this.clear_menu_content = function () {
            try {
                prc_.clear_menu_content_impl();
            } catch (err) {
                raudrohi.tmg('bd7b543c-38a1-411e-bb33-02d151705dd7', err);
            } // catch
        } // clear_menu_content

        // ht_content is expected to contain fields "s_label1" and "s_label2",
        // where the s_label1 is the computer-readable string and
        // s_label2 is the human-readable string.
        this.set_content = function (ht_content) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht_content, 'ht_content',
                        '20174183-6f9d-4bb8-a213-02d151705dd7');
                    if (ht_content.containsKey(lc_s_label2) === false) {
                        raudrohi.tmg('65f267a5-a89b-43e3-9843-02d151705dd7',
                            "The key of 's_label2' is missing from the ht_content.");
                    } // if
                    if (ht_content.containsKey(lc_s_label1) === false) {
                        raudrohi.tmg('1bd618a4-c6f2-47c7-9913-02d151705dd7',
                            "The key of 's_label1' is missing from the ht_content.");
                    } // if
                } // if
                var ht_content_converted = prc_.customizable.optional.hook_for_autoconverting_incoming_content(
                    ht_content);
                var s_label2 = ht_content_converted.get('s_label2');
                var s_label1 = ht_content_converted.get('s_label1');
                if (ht_label1_to_label2_.containsKey(s_label1) === false) {
                    raudrohi.tmg('7241cdaf-a6df-4e16-8232-02d151705dd7',
                        'The s_label1=="' + s_label1 +
                        '", but there is no such element in the menu.');
                } // if
                raudrohi.base.pool_of_hashtables.return_used_hashtable(
                    prc_.content_);
                prc_.content_ = ht_content_converted;
                switch (s_mode_) {
                    case 'units_1':
                        widget_textarea_t1_custom_value_.set_content(s_label2);
                        break;
                    case 'partialmenu_t1_mode_1':
                        if (s_label1 == 'custom') {
                            widget_textarea_t1_custom_value_.set_content(s_label2);
                        } else {
                            widget_textarea_t1_custom_value_.set_content(
                                s_textfield_default_value_);
                        } // if
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '21b02a24-30eb-4fb7-9332-02d151705dd7',
                                'There\'s no branching for s_mode_(==' +
                                s_mode_ + ').');
                        } // if
                } // switch
                select_menuitem_by_s_label_1(s_label1);
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('3bd7ea73-35ca-4da5-bd42-02d151705dd7', err);
            } // catch
        } // set_content

        prc_.set_content_by_s_label1_impl = function (s_label1) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_label1, 's_label1',
                        '3ab8ce61-1a68-4084-b712-02d151705dd7');
                } // if
                var s_label1_converted = prc_.customizable.optional.hook_for_autoconverting_incoming_content_s_label1(
                    s_label1);
                if (ht_label1_to_label2_.containsKey(s_label1_converted) ===
                    false) {
                    raudrohi.tmg('a2d0b0d3-d9e2-4d34-ad22-02d151705dd7',
                        'The s_label1=="' + s_label1_converted +
                        '", but there is no such element in the menu.');
                } // if
                var ht_content = raudrohi.base.pool_of_hashtables.get_empty_hashtable();
                ht_content.put(lc_s_label1, s_label1_converted);
                var s_label2 = ht_label1_to_label2_.get(s_label1_converted);
                ht_content.put(lc_s_label2, lc_s_emptystring + s_label2);
                self_public_.set_content(ht_content);
            } catch (err) {
                raudrohi.tmg('54bb0943-c258-4ca4-9922-02d151705dd7', err);
            } // catch
        } // prc_.set_content_by_s_label1_impl

        this.set_content_by_s_label1 = function (s_label1) {
            try {
                prc_.set_content_by_s_label1_impl(s_label1);
            } catch (err) {
                raudrohi.tmg('238cffd3-64de-4216-9012-02d151705dd7', err);
            } // catch
        } // set_content_by_s_label1


        prc_.customizable.optional.startup_hook = function () {
            try {
            } catch (err) {
                raudrohi.tmg('21c833b5-bedf-4ecc-a811-02d151705dd7', err);
            } // catch
        } // prc_.customizable.optional.startup_hook

        this.set_focus = function () {
            try {
                if (b_textarea_visible_ === true) {
                    // It copes with the hidden state.
                    widget_textarea_t1_custom_value_.set_focus();
                } // if
            } catch (err) {
                raudrohi.tmg('174de132-ced5-4f10-ad31-02d151705dd7', err);
            } // catch
        } // set_focus

        // Returns a hashtable that has keys s_label1 and s_label2
        this.get_content = function () {
            try {
                if (prc_.content_set_ === false) {
                    return null;
                } // if
                var ht = raudrohi.base.pool_of_hashtables.get_empty_hashtable();
                prc_.customizable.optional.content_from_GUI_2_vars();
                ht.put('s_label1', "" + prc_.content_.get('s_label1'));
                ht.put('s_label2', "" + prc_.content_.get('s_label2'));
                return ht;
            } catch (err) {
                raudrohi.tmg('2205eb72-d636-41d7-9951-02d151705dd7', err);
            } // catch
        } // get_content

        // For comfort and speed only.
        this.get_content_s_label1 = function () {
            try {
                if (prc_.content_set_ === false) {
                    raudrohi.tmg('5be66f42-d586-4716-b521-02d151705dd7',
                        'Content is not set.');
                } // if
                prc_.customizable.optional.content_from_GUI_2_vars();
                var s_label1 = "" + prc_.content_.get('s_label1');
                return s_label1;
            } catch (err) {
                raudrohi.tmg('7784f905-d501-46bd-8821-02d151705dd7', err);
            } // catch
        } // get_content_s_label1

        // For comfort and speed only.
        this.get_content_s_label2 = function () {
            try {
                if (prc_.content_set_ === false) {
                    raudrohi.tmg('2ae2dc61-14fb-4dc0-9e51-02d151705dd7',
                        'Content is not set.');
                } // if
                prc_.customizable.optional.content_from_GUI_2_vars();
                var s_label2 = "" + prc_.content_.get('s_label2');
                return s_label2;
            } catch (err) {
                raudrohi.tmg('512a1ec1-a804-4492-b4f0-02d151705dd7', err);
            } // catch
        } // get_content_s_label2

        this.get_content_2_collection_t1 = function (ht) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht, 'ht',
                        '6690ac88-8f5e-49fb-ae20-02d151705dd7');
                } // if
                var ht_content = self_public_.get_content();
                var s_key_field_set = raudrohi.wg_processing_t1.s_key_field_set(
                    self_public_);
                if (ht_content === null) {
                    ht.put(s_key_field_set, "false");
                    raudrohi.wg_processing_t1.dbfcreate_s_t1(ht,
                        self_public_.s_field_name_in_parent + "_s_label1",
                        lc_s_emptystring, false);
                    raudrohi.wg_processing_t1.dbfcreate_s_t1(ht,
                        self_public_.s_field_name_in_parent + "_s_label2",
                        lc_s_emptystring, false);
                } // if
                ht.put(s_key_field_set, "true");
                raudrohi.wg_processing_t1.dbfcreate_s_t1(ht,
                    self_public_.s_field_name_in_parent + "_s_label1",
                    ht_content.get(lc_s_label1), false);
                raudrohi.wg_processing_t1.dbfcreate_s_t1(ht,
                    self_public_.s_field_name_in_parent + "_s_label2",
                    ht_content.get(lc_s_label2), true);
            } catch (err) {
                raudrohi.tmg('57d9e1c3-c68f-4dd9-af10-02d151705dd7', err);
            } // catch
        } // get_content_2_collection_t1


        this.set_content_from_collection_t1 = function (ht) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht, 'ht',
                        '4f53cee2-b926-4166-af40-02d151705dd7');
                } // if
                var s_key_field_set = raudrohi.wg_processing_t1.s_key_field_set(
                    self_public_);
                if (ht.get(s_key_field_set) === 'f') {
                    self_public_.set_content_to_default();
                    return;
                } // if

                var s_label1 = raudrohi.wg_processing_t1.get_subfield(
                    self_public_, lc_s_label1, ht);
                var s_label2 = raudrohi.wg_processing_t1.get_subfield(
                    self_public_, lc_s_label2, ht);
                var ht_content = raudrohi.base.pool_of_hashtables.get_empty_hashtable();
                ht_content.put(lc_s_label1, s_label1);
                ht_content.put(lc_s_label2, s_label2);
                self_public_.set_content(ht_content);
            } catch (err) {
                raudrohi.tmg('1628dd7c-47fc-46ce-8bf0-02d151705dd7', err);
            } // catch
        } // set_content_from_collection_t1

        self_public_.startup_sequence_init();
    } catch (err) {
        raudrohi.tmg('e6722391-579d-44b7-b71f-02d151705dd7', err);
    } // catch
} // raudrohi.widgets.g1.partialmenu_t1
//=========================================================================

raudrohi.widgets.g1.calendar_t1_dictionary = new Hashtable();

raudrohi.widgets.g1.calendar_t1_dictionary_init = function () {
    try {
        var ht = null;
        var s_year = 'year';
        var s_month = 'month';
        var s_day = 'day';
        var s_hour = 'hour';
        var s_minute = 'minute';
        var s_second = 'second';
        ht = new Hashtable();
        ht.put(s_year, 'Aasta');
        ht.put(s_month, 'Kuu');
        ht.put(s_day, 'PÃ¤ev');
        ht.put(s_hour, 'Tund');
        ht.put(s_minute, 'Minut');
        ht.put(s_second, 'Sekund');
        raudrohi.widgets.g1.calendar_t1_dictionary.put('et', ht);
        ht = new Hashtable();
        ht.put(s_year, 'Year');
        ht.put(s_month, 'Month');
        ht.put(s_day, 'Day');
        ht.put(s_hour, 'Hour');
        ht.put(s_minute, 'Minute');
        ht.put(s_second, 'Second');
        raudrohi.widgets.g1.calendar_t1_dictionary.put('uk', ht);
        // According to "Eesti Keele KÃ¤siraamat", page 52,
        // month names start with lower case letter, unless they
        // are at the start of a sentence or a title or apply to
        // other special cases.
        ht = new Hashtable();
        ht.put("1", 'jaanuar');
        ht.put("2", 'veebruar');
        ht.put("3", 'mÃ¤rts');
        ht.put("4", 'aprill');
        ht.put("5", 'mai');
        ht.put("6", 'juuni');
        ht.put("7", 'juuli');
        ht.put("8", 'august');
        ht.put("9", 'september');
        ht.put("10", 'oktoober');
        ht.put("11", 'november');
        ht.put("12", 'detsember');
        raudrohi.widgets.g1.calendar_t1_dictionary.put('et_months', ht);
        ht = new Hashtable();
        ht.put("1", 'January');
        ht.put("2", 'February');
        ht.put("3", 'March');
        ht.put("4", 'April');
        ht.put("5", 'May');
        ht.put("6", 'June');
        ht.put("7", 'July');
        ht.put("8", 'August');
        ht.put("9", 'September');
        ht.put("10", 'October');
        ht.put("11", 'November');
        ht.put("12", 'December');
        raudrohi.widgets.g1.calendar_t1_dictionary.put('uk_months', ht);
    } catch (err) {
        raudrohi.tmg('49514ff1-2875-4334-9b58-018250705dd7', err);
    } // catch
} // raudrohi.widgets.g1.calendar_t1_dictionary_init
raudrohi.widgets.g1.calendar_t1_dictionary_init();

raudrohi.widgets.g1.calendar_t1 =
function (s_html_id, parent_instance, s_display_format, s_language) {
    try {

        s_display_format = typeof(s_display_format) !==
                           'undefined' ? s_display_format : "DD/MM/YY";
        s_language = typeof(s_language) !== 'undefined' ? s_language : "uk";

        // RENESSAATOR_BLOCK_START
// RENESSAATOR_BLOCK_ID=block_1
// RENESSAATOR_SOURCE_LANGUAGE=Ruby
// RENESSAATOR_SOURCE_START
// RAUDROHI_HOME=ENV['RAUDROHI_HOME']
// require(RAUDROHI_HOME+"/src/dev_tools/code_generation/raudrohi_cg0.rb")
// require(RAUDROHI_CODE_GENERATION+"/by_file/raudrohi_js_widgets_calendar_t1_block_1.rb")
// RENESSAATOR_SOURCE_END
//
// RENESSAATOR_AUTOGENERATED_TEXT_START
    if(raudrohi_settings_debug_JavaScript===true){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_debug_verification 
            raudrohi.base.assert_is_g1_widget(parent_instance,'parent_instance',
                'fccc783f-da11-456d-8569-603371705dd7');
raudrohi.base.assert_isString(s_display_format,'s_display_format',
                'c902835b-feb8-433e-b569-603371705dd7');
raudrohi.base.assert_isString(s_language,'s_language',
                'f3b66907-c5fc-48b8-9169-603371705dd7');

    } // if

    if(raudrohi_settings_debug_JavaScript===true){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_debug_verification 
            raudrohi.base.assert_is_HTML_ID(s_html_id,'s_html_id',
                'c4c0e416-7c40-441a-9269-603371705dd7');
raudrohi.base.assert_is_g1_widget(parent_instance,'parent_instance',
                'a6d72629-8759-44ee-8469-603371705dd7');

    } // if
     //---widget--boilerplate_1_--start--
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget 
		var self_public_=this;
		var pileofmethods_t1_=new raudrohi.widgets.g1.pileofmethods_t1(
                 self_public_,'raudrohi.widgets.g1.calendar_t1',
                 s_html_id);
		var prc_=self_public_.private_code_;
		var wg_hooks_=self_public_.wg_hooks_;
     //---widget--boilerplate_1_--end----


prc_.parent_instance_=parent_instance;

var widget_button_t1_year_inc_=null;
var id_button_t1_year_inc_=prc_.html_id_+'_button_t1_year_inc';
var widget_textarea_t1_year_=null;
var id_textarea_t1_year_=prc_.html_id_+'_textarea_t1_year';
var widget_button_t1_year_dec_=null;
var id_button_t1_year_dec_=prc_.html_id_+'_button_t1_year_dec';
var widget_partialmenu_t1_month_=null;
var id_partialmenu_t1_month_=prc_.html_id_+'_partialmenu_t1_month';
var widget_button_t1_day_inc_10x_=null;
var id_button_t1_day_inc_10x_=prc_.html_id_+'_button_t1_day_inc_10x';
var widget_button_t1_day_inc_=null;
var id_button_t1_day_inc_=prc_.html_id_+'_button_t1_day_inc';
var widget_textarea_t1_day_=null;
var id_textarea_t1_day_=prc_.html_id_+'_textarea_t1_day';
var widget_button_t1_day_dec_=null;
var id_button_t1_day_dec_=prc_.html_id_+'_button_t1_day_dec';
var widget_button_t1_day_dec_10x_=null;
var id_button_t1_day_dec_10x_=prc_.html_id_+'_button_t1_day_dec_10x';
var widget_partialmenu_t1_hour_=null;
var id_partialmenu_t1_hour_=prc_.html_id_+'_partialmenu_t1_hour';
var widget_partialmenu_t1_minute_=null;
var id_partialmenu_t1_minute_=prc_.html_id_+'_partialmenu_t1_minute';
var widget_partialmenu_t1_second_=null;
var id_partialmenu_t1_second_=prc_.html_id_+'_partialmenu_t1_second';

		self_public_.private_code_.evh_.evh_button_t1_year_inc=function(e){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget_button_t1 
			try{
              evh_increment_year();
			} catch (err){
				raudrohi.tmg('e8aeeb15-2276-4ff8-9529-603371705dd7',err);
			} // catch
		} // evh_button_t1_year_inc 

		self_public_.private_code_.evh_.evh_button_t1_year_dec=function(e){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget_button_t1 
			try{
              evh_decrement_year();
			} catch (err){
				raudrohi.tmg('61bdfc24-d5bc-45f3-a439-603371705dd7',err);
			} // catch
		} // evh_button_t1_year_dec 

		self_public_.private_code_.evh_.evh_button_t1_day_inc_10x=function(e){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget_button_t1 
			try{
              evh_increment_day_10x();
			} catch (err){
				raudrohi.tmg('16c868b1-c1d3-41c9-b449-603371705dd7',err);
			} // catch
		} // evh_button_t1_day_inc_10x 

		self_public_.private_code_.evh_.evh_button_t1_day_inc=function(e){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget_button_t1 
			try{
              evh_increment_day();
			} catch (err){
				raudrohi.tmg('35e1fcbc-c967-415b-a549-603371705dd7',err);
			} // catch
		} // evh_button_t1_day_inc 

		self_public_.private_code_.evh_.evh_button_t1_day_dec=function(e){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget_button_t1 
			try{
              evh_decrement_day();
			} catch (err){
				raudrohi.tmg('184fbb11-4871-4c97-8d49-603371705dd7',err);
			} // catch
		} // evh_button_t1_day_dec 

		self_public_.private_code_.evh_.evh_button_t1_day_dec_10x=function(e){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget_button_t1 
			try{
              evh_decrement_day_10x();
			} catch (err){
				raudrohi.tmg('9c7bcd4e-e0ca-4eb4-a259-603371705dd7',err);
			} // catch
		} // evh_button_t1_day_dec_10x 



   		function create_widgets_autogen( ){
				        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget 
			try{
				             widget_button_t1_year_inc_=new raudrohi.widgets.g1.button_t1(
                     id_button_t1_year_inc_,'>');
             widget_button_t1_year_inc_.evh_button_pushed_impl=self_public_.private_code_.evh_.evh_button_t1_year_inc;
             widget_button_t1_year_inc_.s_field_name_in_parent='year_inc';
             prc_.register_subwidget(widget_button_t1_year_inc_,'hidden');

	            var ht_widget_textarea_t1_year_params=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
	            ht_widget_textarea_t1_year_params.put('type','text');
             widget_textarea_t1_year_=new raudrohi.widgets.g1.textarea_t1(
                     id_textarea_t1_year_,5,1,
                     ht_widget_textarea_t1_year_params);
             widget_textarea_t1_year_.set_alignment('west');
             prc_.register_subwidget(widget_textarea_t1_year_,'visible');
             widget_textarea_t1_year_.s_field_name_in_parent='year';
             raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_widget_textarea_t1_year_params);

             widget_button_t1_year_dec_=new raudrohi.widgets.g1.button_t1(
                     id_button_t1_year_dec_,'<');
             widget_button_t1_year_dec_.evh_button_pushed_impl=self_public_.private_code_.evh_.evh_button_t1_year_dec;
             widget_button_t1_year_dec_.s_field_name_in_parent='year_dec';
             prc_.register_subwidget(widget_button_t1_year_dec_,'hidden');

widget_partialmenu_t1_month_=new
        raudrohi.widgets.g1.partialmenu_t1(
                id_partialmenu_t1_month_,self_public_,
                5,2,1,
                'month',
                'partialmenu_t1_mode_1','partialmenu_t1_containertype_vertical_1');
widget_partialmenu_t1_month_.s_field_name_in_parent='month';
prc_.register_subwidget(
        widget_partialmenu_t1_month_,'hidden');

var ar_autogenerated_tmpvar_8f006139_b5be_40cd_83d9_603371705dd7=[];
var x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7;
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7={};
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label1='1';
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label2='1';
ar_autogenerated_tmpvar_8f006139_b5be_40cd_83d9_603371705dd7.push(x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7);
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7={};
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label1='2';
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label2='2';
ar_autogenerated_tmpvar_8f006139_b5be_40cd_83d9_603371705dd7.push(x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7);
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7={};
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label1='3';
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label2='3';
ar_autogenerated_tmpvar_8f006139_b5be_40cd_83d9_603371705dd7.push(x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7);
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7={};
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label1='4';
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label2='4';
ar_autogenerated_tmpvar_8f006139_b5be_40cd_83d9_603371705dd7.push(x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7);
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7={};
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label1='5';
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label2='5';
ar_autogenerated_tmpvar_8f006139_b5be_40cd_83d9_603371705dd7.push(x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7);
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7={};
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label1='6';
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label2='6';
ar_autogenerated_tmpvar_8f006139_b5be_40cd_83d9_603371705dd7.push(x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7);
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7={};
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label1='7';
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label2='7';
ar_autogenerated_tmpvar_8f006139_b5be_40cd_83d9_603371705dd7.push(x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7);
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7={};
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label1='8';
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label2='8';
ar_autogenerated_tmpvar_8f006139_b5be_40cd_83d9_603371705dd7.push(x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7);
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7={};
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label1='9';
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label2='9';
ar_autogenerated_tmpvar_8f006139_b5be_40cd_83d9_603371705dd7.push(x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7);
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7={};
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label1='10';
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label2='10';
ar_autogenerated_tmpvar_8f006139_b5be_40cd_83d9_603371705dd7.push(x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7);
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7={};
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label1='11';
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label2='11';
ar_autogenerated_tmpvar_8f006139_b5be_40cd_83d9_603371705dd7.push(x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7);
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7={};
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label1='12';
x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7.s_label2='12';
ar_autogenerated_tmpvar_8f006139_b5be_40cd_83d9_603371705dd7.push(x_autogenerated_tmpvar_299b0153_ae33_460e_91d9_603371705dd7);

widget_partialmenu_t1_month_.set_menu_content(ar_autogenerated_tmpvar_8f006139_b5be_40cd_83d9_603371705dd7)
             widget_button_t1_day_inc_10x_=new raudrohi.widgets.g1.button_t1(
                     id_button_t1_day_inc_10x_,'>>');
             widget_button_t1_day_inc_10x_.evh_button_pushed_impl=self_public_.private_code_.evh_.evh_button_t1_day_inc_10x;
             widget_button_t1_day_inc_10x_.s_field_name_in_parent='day_inc_10x';
             prc_.register_subwidget(widget_button_t1_day_inc_10x_,'hidden');

             widget_button_t1_day_inc_=new raudrohi.widgets.g1.button_t1(
                     id_button_t1_day_inc_,'>');
             widget_button_t1_day_inc_.evh_button_pushed_impl=self_public_.private_code_.evh_.evh_button_t1_day_inc;
             widget_button_t1_day_inc_.s_field_name_in_parent='day_inc';
             prc_.register_subwidget(widget_button_t1_day_inc_,'hidden');

	            var ht_widget_textarea_t1_day_params=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
	            ht_widget_textarea_t1_day_params.put('type','text');
             widget_textarea_t1_day_=new raudrohi.widgets.g1.textarea_t1(
                     id_textarea_t1_day_,5,1,
                     ht_widget_textarea_t1_day_params);
             widget_textarea_t1_day_.set_alignment('west');
             prc_.register_subwidget(widget_textarea_t1_day_,'visible');
             widget_textarea_t1_day_.s_field_name_in_parent='day';
             raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_widget_textarea_t1_day_params);

             widget_button_t1_day_dec_=new raudrohi.widgets.g1.button_t1(
                     id_button_t1_day_dec_,'<');
             widget_button_t1_day_dec_.evh_button_pushed_impl=self_public_.private_code_.evh_.evh_button_t1_day_dec;
             widget_button_t1_day_dec_.s_field_name_in_parent='day_dec';
             prc_.register_subwidget(widget_button_t1_day_dec_,'hidden');

             widget_button_t1_day_dec_10x_=new raudrohi.widgets.g1.button_t1(
                     id_button_t1_day_dec_10x_,'<<');
             widget_button_t1_day_dec_10x_.evh_button_pushed_impl=self_public_.private_code_.evh_.evh_button_t1_day_dec_10x;
             widget_button_t1_day_dec_10x_.s_field_name_in_parent='day_dec_10x';
             prc_.register_subwidget(widget_button_t1_day_dec_10x_,'hidden');

widget_partialmenu_t1_hour_=new
        raudrohi.widgets.g1.partialmenu_t1(
                id_partialmenu_t1_hour_,self_public_,
                5,2,1,
                'hour',
                'partialmenu_t1_mode_1','partialmenu_t1_containertype_vertical_1');
widget_partialmenu_t1_hour_.s_field_name_in_parent='hour';
prc_.register_subwidget(
        widget_partialmenu_t1_hour_,'hidden');

var ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7=[];
var x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7;
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='0';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='0';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='1';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='1';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='2';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='2';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='3';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='3';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='4';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='4';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='5';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='5';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='6';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='6';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='7';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='7';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='8';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='8';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='9';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='9';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='10';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='10';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='11';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='11';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='12';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='12';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='13';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='13';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='14';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='14';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='15';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='15';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='16';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='16';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='17';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='17';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='18';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='18';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='19';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='19';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='20';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='20';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='21';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='21';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='22';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='22';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7={};
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label1='23';
x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7.s_label2='23';
ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7.push(x_autogenerated_tmpvar_2a3b3344_241d_4db3_911a_603371705dd7);

widget_partialmenu_t1_hour_.set_menu_content(ar_autogenerated_tmpvar_a6b51c4a_b5ae_453d_a11a_603371705dd7)
widget_partialmenu_t1_minute_=new
        raudrohi.widgets.g1.partialmenu_t1(
                id_partialmenu_t1_minute_,self_public_,
                5,2,1,
                'minute',
                'partialmenu_t1_mode_1','partialmenu_t1_containertype_vertical_1');
widget_partialmenu_t1_minute_.s_field_name_in_parent='minute';
prc_.register_subwidget(
        widget_partialmenu_t1_minute_,'hidden');

var ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7=[];
var x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7;
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='0';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='0';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='1';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='1';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='2';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='2';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='3';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='3';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='4';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='4';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='5';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='5';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='6';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='6';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='7';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='7';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='8';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='8';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='9';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='9';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='10';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='10';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='11';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='11';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='12';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='12';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='13';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='13';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='14';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='14';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='15';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='15';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='16';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='16';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='17';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='17';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='18';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='18';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='19';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='19';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='20';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='20';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='21';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='21';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='22';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='22';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='23';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='23';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='24';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='24';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='25';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='25';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='26';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='26';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='27';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='27';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='28';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='28';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='29';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='29';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='30';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='30';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='31';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='31';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='32';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='32';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='33';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='33';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='34';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='34';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='35';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='35';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='36';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='36';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='37';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='37';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='38';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='38';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='39';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='39';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='40';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='40';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='41';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='41';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='42';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='42';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='43';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='43';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='44';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='44';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='45';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='45';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='46';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='46';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='47';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='47';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='48';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='48';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='49';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='49';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='50';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='50';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='51';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='51';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='52';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='52';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='53';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='53';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='54';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='54';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='55';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='55';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='56';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='56';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='57';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='57';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='58';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='58';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7={};
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label1='59';
x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7.s_label2='59';
ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7.push(x_autogenerated_tmpvar_f32da94b_75fa_493b_823a_603371705dd7);

widget_partialmenu_t1_minute_.set_menu_content(ar_autogenerated_tmpvar_c42887cd_b3b4_427e_943a_603371705dd7)
widget_partialmenu_t1_second_=new
        raudrohi.widgets.g1.partialmenu_t1(
                id_partialmenu_t1_second_,self_public_,
                5,2,1,
                'second',
                'partialmenu_t1_mode_1','partialmenu_t1_containertype_vertical_1');
widget_partialmenu_t1_second_.s_field_name_in_parent='second';
prc_.register_subwidget(
        widget_partialmenu_t1_second_,'hidden');

var ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7=[];
var x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7;
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='0';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='0';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='1';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='1';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='2';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='2';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='3';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='3';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='4';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='4';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='5';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='5';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='6';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='6';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='7';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='7';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='8';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='8';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='9';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='9';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='10';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='10';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='11';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='11';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='12';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='12';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='13';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='13';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='14';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='14';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='15';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='15';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='16';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='16';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='17';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='17';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='18';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='18';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='19';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='19';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='20';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='20';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='21';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='21';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='22';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='22';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='23';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='23';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='24';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='24';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='25';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='25';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='26';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='26';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='27';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='27';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='28';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='28';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='29';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='29';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='30';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='30';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='31';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='31';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='32';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='32';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='33';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='33';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='34';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='34';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='35';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='35';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='36';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='36';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='37';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='37';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='38';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='38';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='39';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='39';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='40';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='40';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='41';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='41';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='42';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='42';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='43';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='43';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='44';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='44';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='45';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='45';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='46';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='46';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='47';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='47';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='48';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='48';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='49';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='49';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='50';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='50';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='51';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='51';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='52';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='52';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='53';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='53';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='54';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='54';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='55';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='55';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='56';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='56';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='57';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='57';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='58';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='58';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7={};
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label1='59';
x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7.s_label2='59';
ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7.push(x_autogenerated_tmpvar_ab02a930_9843_4010_956b_603371705dd7);

widget_partialmenu_t1_second_.set_menu_content(ar_autogenerated_tmpvar_488404e3_a8bd_4759_a26b_603371705dd7)
			} catch(err){
				raudrohi.tmg('4286848a-04c2-4aec-b49b-603371705dd7',err);
			} // catch
		} // create_widgets_autogen


// RENESSAATOR_AUTOGENERATED_TEXT_END
// RENESSAATOR_BLOCK_END

        var id_msg1_ = prc_.html_id_ + "_msg1";

        if (raudrohi.widgets.g1.calendar_t1_dictionary.containsKey(s_language) ===
            false) {
            if (raudrohi_settings_debug_JavaScript === true) {
                raudrohi.tmg('842c104d-0837-45fc-b576-018250705dd7',
                    "Language not supported by this widget. " +
                    "s_language==" + s_language);
            } else {
                s_language = "uk"; // It won't break anything, so one lets it be.
            } // else
        } // if

        if (raudrohi_settings_debug_JavaScript === true) {
            switch (s_display_format) {
                case "DD/MM/YY":
                    break;
                default:
                    if (raudrohi_settings_debug_JavaScript) {
                        throw raudrohi.tmg(
                            'd3359832-4c2c-4327-8585-018250705dd7',
                            'There\'s no branching for s_display_format(==' +
                            s_display_format + ').');
                    } // if
            } // switch
        } // if
        var s_display_format_ = s_display_format;
        var s_language_ = s_language;

        prc_.content_ = {}
        prc_.content_.i_year = 1970;
        prc_.content_.i_month = 1;
        prc_.content_.i_day = 1;
        prc_.content_.i_hour = 0;
        prc_.content_.i_minute = 0;
        prc_.content_.i_second = 0;
        // In the case of the content all formats are kept up to date,
        // but some can be "original" and therefore more precise.
        prc_.content_.s_most_precise_format = lc_s_human_perceivable;
        prc_.content_.i_unix_time = 0;
        prc_.content_set_ = false;
        var i_number_of_days_in_the_selected_month_ = 200;

        var lc_s_emptystring = raudrohi_glc_s_emptystring;
        var lc_s_space = raudrohi_glc_s_space;
        var lc_s_point = raudrohi_glc_s_point;
        var lc_s_content = "content";
        var lc_s_unix_time = raudrohi_glc_s_unix_time;
        var lc_s_human_perceivable = "human_perceivable";
        var lc_s_zero = raudrohi_glc_s_zero;
        var s_readonly_display_mode_ = "calendar_t1_readonly_display_mode_2";

        // Domain == {"calendar_t1_readonly_display_mode_1",
        // "calendar_t1_readonly_display_mode_2,
        // calendar_t1_readonly_display_mode_3"}.
        this.set_readonly_display_mode = function (s_readonly_display_mode) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_readonly_display_mode,
                        's_readonly_display_mode',
                        '28b0bee3-9804-4217-9015-018250705dd7');
                    // It's not that crucial that in the
                    // non-debug mode the domain is not
                    // checked here, because
                    // the render_readonly contains the domain
                    // check as a byproduct, "for free".
                    switch (s_readonly_display_mode) {
                        case 'calendar_t1_readonly_display_mode_1':
                            break;
                        case 'calendar_t1_readonly_display_mode_2':
                            break;
                        case 'calendar_t1_readonly_display_mode_3':
                            break;
                        default:
                            if (raudrohi_settings_debug_JavaScript) {
                                throw raudrohi.tmg(
                                    '491e15e3-d806-4c9e-9125-018250705dd7',
                                    'There\'s no branching for s_readonly_display_mode(==' +
                                    s_readonly_display_mode + ').');
                            } // if
                    } // switch
                } // if
                s_readonly_display_mode_ = s_readonly_display_mode;
            } catch (err) {
                raudrohi.tmg('4044acf2-1fa0-453d-9d55-018250705dd7', err);
            } // catch
        } // set_readonly_display_mode

        prc_.customizable.optional.create_subwidgets = function () {
            try {
                create_widgets_autogen();
                widget_partialmenu_t1_month_.private_code_.customizable.optional.evh_selection_impl =
                evh_month_selected;
                self_public_.set_content_2_now();
            } catch (err) {
                raudrohi.tmg('51d79a42-557a-4964-8435-018250705dd7', err);
            } // catch
        } // prc_.customizable.optional.create_subwidgets


        function create_containers() {
            try {
                if (!prc_.containers_html_cached_) {
                    var ht_dictionary = raudrohi.widgets.g1.calendar_t1_dictionary.get(s_language_);
                    var s_day = ht_dictionary.get('day');
                    var s_month = ht_dictionary.get('month');
                    var s_year = ht_dictionary.get('year');
                    var s_hour = ht_dictionary.get('hour');
                    var s_minute = ht_dictionary.get('minute');
                    var s_second = ht_dictionary.get('second');

                    var s_langline_t1 = null;
                    var s_dd_mm_yy_t1 = null;
                    var s_msgline_t1 = null;
                    switch (s_display_format_) {
                        case "DD/MM/YY":

                            s_msgline_t1 = "" +
                                           "<tr>\n" +
                                           "<td class=\"raudrohi_visible_table_cells\" colspan=\"7\">" +
                                           "<div id=\"" +
                                           id_msg1_ + "_div\">" +
                                           "</td>\n" +
                                           "</tr>\n";

                            s_langline_t1 = "" +
                                            "<tr>\n" +
                                            "<td class=\"raudrohi_visible_table_cells\" colspan=\"3\">" +
                                            s_day + "</td>\n" +
                                            "<td class=\"raudrohi_visible_table_cells\" colspan=\"1\">" +
                                            s_month + "</td>\n" +
                                            "<td class=\"raudrohi_visible_table_cells\" colspan=\"3\">" +
                                            s_year + "</td>\n" +
                                            "</tr>\n";

                            s_dd_mm_yy_t1 = "" +
                                            "<tr>\n" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_button_t1_day_dec_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_textarea_t1_day_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_button_t1_day_inc_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_partialmenu_t1_month_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_button_t1_year_dec_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_textarea_t1_year_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_button_t1_year_inc_ +
                                            "_div\"></div></td>\n" +
                                            "</tr>\n" +
                                            "" +
                                            "" +
                                            "<tr>\n" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_button_t1_day_dec_10x_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_button_t1_day_inc_10x_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"></td>\n" +
                                            "" +
                                            "</tr>\n";
                            break;
                        default:
                            if (raudrohi_settings_debug_JavaScript) {
                                throw raudrohi.tmg(
                                    '42d17163-a0af-40e2-b124-018250705dd7',
                                    'There\'s no branching for s_display_format_(==' +
                                    s_display_format_ + ').');
                            } // if
                    } // switch

                    var ar_class_names = ["raudrohi_visible_table"];
                    prc_.containers_html_cache_dd_mm_yy_c1_ =
                    prc_.selfread.wrap_2_alignment_div(
                        raudrohi.lang.cg_table_t1(
                            "" +//s_msgline_t1+
                            s_langline_t1 +
                            s_dd_mm_yy_t1,
                            ar_class_names));

                    prc_.containers_html_cached_ = true;
                } // if
                var s_container = null;
                switch (s_display_format_) {
                    case "DD/MM/YY":
                        s_container = prc_.containers_html_cache_dd_mm_yy_c1_;
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '5475c5e1-32aa-4c90-b254-018250705dd7',
                                'There\'s no branching for s_display_format_(==' +
                                s_display_format_ + ').');
                        } // if
                } // switch
                raudrohi.base.set_innerHTML(prc_.html_id_ + "_div",
                    s_container);
                //raudrohi.base.set_innerHTML(id_msg1_+"_div",lc_s_emptystring);
            } catch (err) {
                raudrohi.tmg('5f428441-3f2f-49d2-9a34-018250705dd7', err);
            } // catch
        } // create_containers

        var b_day_is_incrementable_by_one_ = true;
        var b_day_is_decrementable_by_one_ = false;
        var b_day_is_incrementable_by_10_ = true;
        var b_day_is_decrementable_by_10_ = false;

        function render_editable_day() {
            try {
                prc_.mark_elemwidget_to_be_unhidden(
                    widget_textarea_t1_day_);

                if (b_day_is_incrementable_by_one_ === true) {
                    widget_button_t1_day_inc_.set_readonly(false);
                } else {
                    widget_button_t1_day_inc_.set_readonly(true);
                } // else
                if (b_day_is_incrementable_by_10_ === true) {
                    widget_button_t1_day_inc_10x_.set_readonly(false);
                } else {
                    widget_button_t1_day_inc_10x_.set_readonly(true);
                } // else

                if (b_day_is_decrementable_by_one_ === true) {
                    widget_button_t1_day_dec_.set_readonly(false);
                } else {
                    widget_button_t1_day_dec_.set_readonly(true);
                } // else
                if (b_day_is_decrementable_by_10_ === true) {
                    widget_button_t1_day_dec_10x_.set_readonly(false);
                } else {
                    widget_button_t1_day_dec_10x_.set_readonly(true);
                } // else

                prc_.mark_elemwidget_to_be_unhidden(
                    widget_button_t1_day_dec_);
                prc_.mark_elemwidget_to_be_unhidden(
                    widget_button_t1_day_dec_10x_);
                prc_.mark_elemwidget_to_be_unhidden(
                    widget_button_t1_day_inc_);
                prc_.mark_elemwidget_to_be_unhidden(
                    widget_button_t1_day_inc_10x_);
            } catch (err) {
                raudrohi.tmg('cdc4a298-e888-4e20-8fb4-018250705dd7', err);
            } // catch
        } // render_editable_day


        prc_.customizable.compulsory.render_editable = function () {
            try {
                create_containers();
                switch (s_display_format_) {
                    case "DD/MM/YY":
                        widget_textarea_t1_year_.set_readonly(true);
                        widget_textarea_t1_day_.set_readonly(true);

                        prc_.mark_elemwidget_to_be_hidden(
                            widget_partialmenu_t1_hour_, true);
                        prc_.mark_elemwidget_to_be_hidden(
                            widget_partialmenu_t1_minute_, true);
                        prc_.mark_elemwidget_to_be_hidden(
                            widget_partialmenu_t1_second_, true);

                        render_editable_day();

                        prc_.mark_elemwidget_to_be_unhidden(
                            widget_partialmenu_t1_month_);

                        prc_.mark_elemwidget_to_be_unhidden(
                            widget_button_t1_year_dec_);
                        prc_.mark_elemwidget_to_be_unhidden(
                            widget_textarea_t1_year_);
                        prc_.mark_elemwidget_to_be_unhidden(
                            widget_button_t1_year_inc_);
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                'd1074aae-cace-4a53-b443-018250705dd7',
                                'There\'s no branching for s_display_format_(==' +
                                s_display_format_ + ').');
                        } // if
                } // switch
            } catch (err) {
                raudrohi.tmg('352f9364-07f7-4c35-a143-018250705dd7', err);
            } // catch
        } // prc_.customizable.compulsory.render_editable


        function render_readonly_display_mode_1_dd_mm_yy() {
            try {
                prc_.mark_elemwidget_to_be_hidden(
                    widget_partialmenu_t1_hour_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_partialmenu_t1_minute_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_partialmenu_t1_second_, true);

                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_dec_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_dec_10x_, true);
                prc_.mark_elemwidget_to_be_unhidden(
                    widget_textarea_t1_day_);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_inc_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_inc_10x_, true);

                prc_.mark_elemwidget_to_be_unhidden(
                    widget_partialmenu_t1_month_);


                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_year_dec_, true);
                prc_.mark_elemwidget_to_be_unhidden(
                    widget_textarea_t1_year_);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_year_inc_, true);
            } catch (err) {
                raudrohi.tmg('3d71ecd4-e044-4a8c-a453-018250705dd7', err);
            } // catch
        } // render_readonly_display_mode_1_dd_mm_yy

        function render_readonly_display_mode_1() {
            try {
                create_containers();
                switch (s_display_format_) {
                    case "DD/MM/YY":
                        render_readonly_display_mode_1_dd_mm_yy();
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '54f85f53-5828-4a46-ab53-018250705dd7',
                                'There\'s no branching for s_display_format_(==' +
                                s_display_format_ + ').');
                        } // if
                } // switch
            } catch (err) {
                raudrohi.tmg('e18f1ca5-ea99-4dea-9a13-018250705dd7', err);
            } // catch
        } // render_readonly_display_mode_1

        function mark_all_subwidgets_to_be_hidden() {
            try {
                prc_.mark_elemwidget_to_be_hidden(
                    widget_partialmenu_t1_hour_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_partialmenu_t1_minute_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_partialmenu_t1_second_, true);

                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_dec_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_dec_10x_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_textarea_t1_day_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_inc_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_inc_10x_, true);

                prc_.mark_elemwidget_to_be_hidden(
                    widget_partialmenu_t1_month_, true);


                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_year_dec_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_textarea_t1_year_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_year_inc_, true);
            } catch (err) {
                raudrohi.tmg('59447745-e687-44f2-b412-018250705dd7', err);
            } // catch
        } // mark_all_subwidgets_to_be_hidden

        function prepend_zero_if_smaller_than_10(i_something) {
            // TODO: refactor it out by creating a general function with
            // the ability to add multiple zeros, etc.
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(i_something, 'i_something',
                        '5f1e6301-285e-4c42-b722-018250705dd7');
                } // if
                var s_out = lc_s_emptystring + i_something;
                if (i_something < 10) {
                    s_out = lc_s_zero + s_out;
                } // if
                return s_out;
            } catch (err) {
                raudrohi.tmg('18cc0ba4-a6a7-44ce-8112-018250705dd7', err);
            } // catch
        } // prepend_zero_if_smaller_than_10

        function render_readonly_display_mode_2_dd_mm_yy() {
            try {
                mark_all_subwidgets_to_be_hidden();
                var i_year = 0;
                var i_month = 0;
                var i_day = 0;
                prc_.critical_section_r(lc_s_content,
                    function () {
                    }, function () {
                        i_year = prc_.content_.i_year;
                        i_month = prc_.content_.i_month;
                        i_day = prc_.content_.i_day;
                    });
                var s_month_name = raudrohi.widgets.g1.calendar_t1_dictionary.get(
                    s_language_ + '_months').get(lc_s_emptystring + i_month);
                var s_datestring = lc_s_emptystring + i_day + lc_s_point +
                                   lc_s_space + s_month_name + lc_s_space +
                                   i_year;
                var s_rendering_result = prc_.selfread.wrap_2_alignment_div(
                    s_datestring);
                raudrohi.base.set_innerHTML(prc_.html_id_ + "_div",
                    s_rendering_result);
            } catch (err) {
                raudrohi.tmg('14f93f7c-e15c-43aa-a922-018250705dd7', err);
            } // catch
        } // render_readonly_display_mode_2_dd_mm_yy

        function render_readonly_display_mode_2() {
            try {
                create_containers();
                switch (s_display_format_) {
                    case "DD/MM/YY":
                        render_readonly_display_mode_2_dd_mm_yy();
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '4b6c9045-516f-440e-8a41-018250705dd7',
                                'There\'s no branching for s_display_format_(==' +
                                s_display_format_ + ').');
                        } // if
                } // switch
            } catch (err) {
                raudrohi.tmg('741e67ea-1933-421e-9e81-018250705dd7', err);
            } // catch
        } // render_readonly_display_mode_2

        self_public_.render_readonly_display_mode_3_dd_mm_yy_text_if_content_not_set =
        "" +
        "value not yet set, GUID=='145b3085-83c0-4236-aa21-018250705dd7'";

        function render_readonly_display_mode_3() {
            try {
                create_containers();
                if (prc_.content_set_ === false) {
                    mark_all_subwidgets_to_be_hidden();
                    raudrohi.base.set_innerHTML(prc_.html_id_ + "_div",
                        self_public_.render_readonly_display_mode_3_dd_mm_yy_text_if_content_not_set);
                    return;
                } // if
                switch (s_display_format_) {
                    case "DD/MM/YY":
                        render_readonly_display_mode_2_dd_mm_yy();
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '5f9148f4-3dc4-49f4-be21-018250705dd7',
                                'There\'s no branching for s_display_format_(==' +
                                s_display_format_ + ').');
                        } // if
                } // switch
            } catch (err) {
                raudrohi.tmg('3eab31f5-0f66-4852-b051-018250705dd7', err);
            } // catch
        } // render_readonly_display_mode_3

        prc_.customizable.compulsory.render_readonly = function () {
            try {
                switch (s_readonly_display_mode_) {
                    case 'calendar_t1_readonly_display_mode_1':
                        render_readonly_display_mode_1();
                        break;
                    case 'calendar_t1_readonly_display_mode_2':
                        render_readonly_display_mode_2();
                        break;
                    case 'calendar_t1_readonly_display_mode_3':
                        render_readonly_display_mode_3();
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                'f10c2bb0-1fe5-4b96-a430-018250705dd7',
                                'There\'s no branching for s_readonly_display_mode(==' +
                                s_readonly_display_mode_ + ').');
                        } // if
                } // switch
            } catch (err) {
                raudrohi.tmg('73b85cd6-7537-430e-b99b-018250705dd7', err);
            } // catch
        } // prc_.customizable.compulsory.render_readonly

        //self_public_.calendarhacknamespace.usable_only_in_critical_section.update_day_buttons_clickability=function(){
        self_public_.calendarhacknamespace = {}
        self_public_.calendarhacknamespace.update_day_buttons_clickability =
        function () {
            try {
                var i_wouldbe = 0;
                if (prc_.content_.i_day <
                    i_number_of_days_in_the_selected_month_) {
                    b_day_is_incrementable_by_one_ = true;
                    i_wouldbe = prc_.content_.i_day + 10;
                    if (i_wouldbe <= i_number_of_days_in_the_selected_month_) {
                        b_day_is_incrementable_by_10_ = true;
                    } else {
                        b_day_is_incrementable_by_10_ = false;
                    } // else
                } else {
                    b_day_is_incrementable_by_one_ = false;
                    b_day_is_incrementable_by_10_ = false;
                } // else

                if (1 < prc_.content_.i_day) {
                    b_day_is_decrementable_by_one_ = true;
                    i_wouldbe = prc_.content_.i_day - 10;
                    if (1 <= i_wouldbe) {
                        b_day_is_decrementable_by_10_ = true;
                    } else {
                        b_day_is_decrementable_by_10_ = false;
                    } // else
                } else {
                    b_day_is_decrementable_by_one_ = false;
                    b_day_is_decrementable_by_10_ = false;
                } // else

            } catch (err) {
                raudrohi.tmg('3e69e375-6195-4925-861b-018250705dd7', err);
            } // catch
        } // update_day_buttons_clickability

        // The idea is that one does not want to trigger a new
        // menu selection event, if the call to the
        // content_2_widget_states was triggered by the
        // menu selection event.
        //var freaking_calendar_closurehack_usable_only_in_critical_section={};
        prc_.usable_only_in_critical_section.set_content_2_widget_states_month =
        function () {
            try {
                var s_label1 = widget_partialmenu_t1_month_.get_content_s_label1();
                if (s_label1 !== (lc_s_emptystring + prc_.content_.i_month)) {
                    widget_partialmenu_t1_month_.set_content_by_s_label1(
                        "" + prc_.content_.i_month);
                } // if
            } catch (err) {
                raudrohi.tmg('856bbfa0-0deb-4330-ad5a-018250705dd7', err);
            } // catch
        } // set_content_2_widget_states_month

        // The b_content_2_widgets_states_in_progress_ exists
        // because one has to set the month menu,
        // but that triggers menu selection event, which
        // in turn, if it's initiated by the user, must
        // trigger the recalculation and setting of other
        // widget values, like the day and that in turn
        // calls the content_2_widgets_states(), which
        // leads to a thread-lock in the critical section
        // that resides in the content_2_widgets_states().
        var b_content_2_widgets_states_in_progress_ = false;

        // The assumption is that the prc_.content_.... is never
        // contradictory. For example one has to make sure that
        // when the year or month is changed, the  prc_.content_.i_day
        // is not greater than the number of days in the given month.
        function content_2_widgets_states() {
            try {
                switch (s_display_format_) {
                    case "DD/MM/YY":
                        prc_.critical_section_rw(lc_s_content,
                            function () {
                            }, function () {
                                b_content_2_widgets_states_in_progress_ = true;
                                widget_textarea_t1_year_.set_content(
                                    lc_s_emptystring + prc_.content_.i_year);

                                prc_.usable_only_in_critical_section.set_content_2_widget_states_month();

                                widget_textarea_t1_day_.set_content(
                                    lc_s_emptystring + prc_.content_.i_day);
                                //x.i_hour=prc_.content_.i_hour;
                                //x.i_minute=prc_.content_.i_minute;
                                //x.i_second=prc_.content_.i_second;

                                //self_public_.private_code_.usable_only_in_critical_section.update_day_buttons_clickability();
                                self_public_.calendarhacknamespace.update_day_buttons_clickability();
                                b_content_2_widgets_states_in_progress_ = false;
                            });
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                'ff0ccae5-643f-4df9-8f1a-018250705dd7',
                                'There\'s no branching for s_display_format_(==' +
                                s_display_format_ + ').');
                        } // if
                } // switch
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('655dd430-1290-418f-ad1a-018250705dd7', err);
            } // catch
        } // content_2_widgets_states

        // If the month or year is changed, the number of
        // days in the month gets changed and the uppr bound can
        // decrease, which can leave the day to be "out of bounds".
        prc_.usable_only_in_critical_section.enforce_day_bounds = function () {
            try {
                i_number_of_days_in_the_selected_month_ = 0 +
                                                          raudrohi.date_and_time.number_of_days_in_a_month(
                                                              prc_.content_.i_month,
                                                              prc_.content_.i_year);
                if (i_number_of_days_in_the_selected_month_ <
                    prc_.content_.i_day) {
                    prc_.content_.i_day =
                    i_number_of_days_in_the_selected_month_;
                } // if
            } catch (err) {
                raudrohi.tmg('e4c58d13-a5d0-4944-bd49-018250705dd7', err);
            } // catch
        } // prc_.usable_only_in_critical_section.enforce_day_bounds


        prc_.usable_only_in_critical_section.year_change_evh_common =
        function () {
            try {
                prc_.usable_only_in_critical_section.enforce_day_bounds();
                prc_.content_.s_most_precise_format = lc_s_human_perceivable;
                prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                widget_textarea_t1_year_.set_content(
                    lc_s_emptystring + prc_.content_.i_year);
            } catch (err) {
                raudrohi.tmg('8410524a-4587-48a5-bc59-018250705dd7', err);
            } // catch
        } // prc_.usable_only_in_critical_section.year_change_evh_common

        function evh_decrement_year() {
            try {
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        prc_.content_.i_year = prc_.content_.i_year - 1;
                        prc_.usable_only_in_critical_section.year_change_evh_common();
                        i_number_of_days_in_the_selected_month_ =
                        raudrohi.date_and_time.number_of_days_in_a_month(
                            prc_.content_.i_month, prc_.content_.i_year);
                    });
                content_2_widgets_states();
            } catch (err) {
                raudrohi.tmg('a13fc050-1bec-45f0-a2a9-018250705dd7', err);
            } // catch
        } // evh_decrement_year

        function evh_increment_year() {
            try {
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        prc_.content_.i_year = prc_.content_.i_year + 1;
                        prc_.usable_only_in_critical_section.year_change_evh_common();
                        i_number_of_days_in_the_selected_month_ =
                        raudrohi.date_and_time.number_of_days_in_a_month(
                            prc_.content_.i_month, prc_.content_.i_year);
                    });
                content_2_widgets_states();
            } catch (err) {
                raudrohi.tmg('c3c27402-c9b6-4cae-a338-018250705dd7', err);
            } // catch
        } // evh_increment_year

        function evh_month_selected(mi) {
            try {
                if (b_content_2_widgets_states_in_progress_ === true) {
                    return;
                } // if
                var i_month = null;
                prc_.critical_section_rw(lc_s_content,
                    function () {
                        i_month = parseInt(lc_s_emptystring + mi.s_label1);
                        if (raudrohi_settings_debug_JavaScript === true) {
                            if (i_month < 1) {
                                raudrohi.tmg('226eff8e-84f9-463c-b538-018250705dd7',
                                    "i_month==" + i_month + " < 1");
                            } // if
                            if (12 < i_month) {
                                raudrohi.tmg('b50c49de-3360-4397-8e58-018250705dd7',
                                    "12 < i_month==" + i_month);
                            } // if
                        } // if
                    }, function () {
                        prc_.content_.i_month = i_month;
                        prc_.usable_only_in_critical_section.enforce_day_bounds();
                        prc_.content_.s_most_precise_format =
                        lc_s_human_perceivable;
                        prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                    });
                content_2_widgets_states();
            } catch (err) {
                raudrohi.tmg('fe22ce39-4ed0-45c1-8247-018250705dd7', err);
            } // catch
        } // evh_month_selected

        function evh_increment_day() {
            try {
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        if (prc_.content_.i_day <
                            i_number_of_days_in_the_selected_month_) {
                            prc_.content_.i_day = prc_.content_.i_day + 1;
                            prc_.content_.s_most_precise_format =
                            lc_s_human_perceivable;
                            prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                        } // if
                    });
                content_2_widgets_states();
            } catch (err) {
                raudrohi.tmg('5c697004-b801-4e18-9b37-018250705dd7', err);
            } // catch
        } // evh_increment_day

        function evh_decrement_day() {
            try {
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        if (1 < prc_.content_.i_day) {
                            prc_.content_.i_day = prc_.content_.i_day - 1;
                            prc_.content_.s_most_precise_format =
                            lc_s_human_perceivable;
                            prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                        } // if
                    });
                content_2_widgets_states();
            } catch (err) {
                raudrohi.tmg('22576868-b2df-4609-be27-018250705dd7', err);
            } // catch
        } // evh_decrement_day

        function evh_increment_day_10x() {
            try {
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        var i_wouldbe = prc_.content_.i_day + 10;
                        if (i_wouldbe <=
                            i_number_of_days_in_the_selected_month_) {
                            prc_.content_.i_day = i_wouldbe;
                            prc_.content_.s_most_precise_format =
                            lc_s_human_perceivable;
                            prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                        } // if
                    });
                content_2_widgets_states();
            } catch (err) {
                raudrohi.tmg('11a6e813-d4be-4e06-a146-018250705dd7', err);
            } // catch
        } // evh_increment_day_10x

        function evh_decrement_day_10x() {
            try {
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        var i_wouldbe = prc_.content_.i_day - 10;
                        if (1 <= i_wouldbe) {
                            prc_.content_.i_day = i_wouldbe;
                            prc_.content_.s_most_precise_format =
                            lc_s_human_perceivable;
                            prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                        } // if
                    });
                content_2_widgets_states();
            } catch (err) {
                raudrohi.tmg('49d70a35-fde6-4265-ab56-018250705dd7', err);
            } // catch
        } // evh_decrement_day_10x


        this.set_content = function (ht_timestamp) {
            try {
                if (ht_timestamp === null) {
                    self_public_.clear_content();
                    return;
                } // if
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.date_and_time.timestamp_is_contradictory(
                        ht_timestamp, true);
                } // if
                var ht_tmp_human = null;
                prc_.critical_section_rw(lc_s_content,
                    function () {
                        ht_tmp_human =
                        raudrohi.date_and_time.unix_time_2_human_perceivable(
                            ht_timestamp);
                    }, function () {
                        prc_.content_.i_year = parseInt(lc_s_emptystring +
                                                        ht_tmp_human.get('year'));
                        prc_.content_.i_month = parseInt(lc_s_emptystring +
                                                         ht_tmp_human.get('month'));
                        prc_.content_.i_day = parseInt(lc_s_emptystring +
                                                       ht_tmp_human.get('day'));
                        prc_.content_.i_hour = parseInt(lc_s_emptystring +
                                                        ht_tmp_human.get('hour'));
                        prc_.content_.i_minute = parseInt(lc_s_emptystring +
                                                          ht_tmp_human.get('minute'));
                        prc_.content_.i_second = parseInt(lc_s_emptystring +
                                                          ht_tmp_human.get('second'));
                        var s_ht_ts_s_format = ht_timestamp.get("s_format");
                        prc_.content_.s_most_precise_format = s_ht_ts_s_format;
                        if (s_ht_ts_s_format === lc_s_unix_time) {
                            prc_.content_.i_unix_time =
                            parseInt(lc_s_emptystring +
                                     ht_timestamp.get(lc_s_unix_time));
                        } else {
                            if (s_ht_ts_s_format === lc_s_human_perceivable) {
                                prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                            } else {
                                raudrohi.tmg('3443a033-8c78-49e0-ab56-018250705dd7',
                                    "Something is wrong. s_format==\"" +
                                    s_ht_ts_s_format + "\".");
                            } // else
                        } // else
                    }); // critical_section_rw
                content_2_widgets_states();
                prc_.content_set_ = true;
                raudrohi.base.pool_of_hashtables.return_used_hashtable(
                    ht_tmp_human);
            } catch (err) {
                raudrohi.tmg('3098c0a1-64f1-4820-b835-018250705dd7', err);
            } // catch
        } // set_content

        this.clear_content = function () {
            try {
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        prc_.content_set_ = false;
                    }); // critical_section_rw
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('16423c93-a797-42d5-8f15-018250705dd7', err);
            } // catch
        } // clear_content

        prc_.usable_only_in_critical_section.content_2_ht_timestamp_raw =
        function () {
            try {
                var ht_timestamp = raudrohi.base.pool_of_hashtables.get_empty_hashtable();
                ht_timestamp.put('year',
                    lc_s_emptystring + prc_.content_.i_year);
                ht_timestamp.put('month',
                    lc_s_emptystring + prc_.content_.i_month);
                ht_timestamp.put('day', lc_s_emptystring + prc_.content_.i_day);
                ht_timestamp.put('hour',
                    lc_s_emptystring + prc_.content_.i_hour);
                ht_timestamp.put('minute',
                    lc_s_emptystring + prc_.content_.i_minute);
                ht_timestamp.put('second',
                    lc_s_emptystring + prc_.content_.i_second);
                ht_timestamp.put("s_format", lc_s_emptystring +
                                             prc_.content_.s_most_precise_format);
                ht_timestamp.put(lc_s_unix_time, lc_s_emptystring +
                                                 prc_.content_.i_unix_time);
                return ht_timestamp;
            } catch (err) {
                raudrohi.tmg('937544b8-d7e9-4908-8a25-018250705dd7', err);
            } // catch
        } // prc_.usable_only_in_critical_section.content_2_ht_timestamp_raw

        // It is meant to be within a critical section with
        // mutex called "content".
        prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time =
        function () {
            try {
                var ht_timestamp_h2uxt_9234Xf = prc_.usable_only_in_critical_section.content_2_ht_timestamp_raw();
                ht_timestamp_h2uxt_9234Xf =
                raudrohi.date_and_time.human_perceivable_2_unix_time(
                    ht_timestamp_h2uxt_9234Xf);
                prc_.content_.i_unix_time = parseInt(
                    ht_timestamp_h2uxt_9234Xf.get(lc_s_unix_time));
                raudrohi.base.pool_of_hashtables.return_used_hashtable(
                    ht_timestamp_h2uxt_9234Xf);
            } catch (err) {
                raudrohi.tmg('b419cbb4-7dcd-4bc2-8325-018250705dd7', err);
            } // catch
        } // prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time

        // var ob_date=new Date(...);
        function set_content_by_JavaScript_Date_instance(ob_date) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ob_date, 'ob_date',
                        '56764122-26ea-4220-9344-018250705dd7');
                } // if
                var dt = ob_date
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        prc_.content_.i_year = dt.getFullYear();
                        // The month parameter to Date.UTC() is 0-indexed;
                        // January is 0, February is 1, etc. Same applies for the
                        // output of the Date.getMonth().
                        prc_.content_.i_month = dt.getMonth() + 1;
                        prc_.content_.i_day = dt.getDate();
                        prc_.content_.i_hour = dt.getHours();
                        prc_.content_.i_minute = dt.getMinutes();
                        prc_.content_.i_second = dt.getSeconds();
                        prc_.content_.s_most_precise_format =
                        lc_s_human_perceivable;
                        prc_.content_.i_unix_time = 0;
                        prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                        i_number_of_days_in_the_selected_month_ = 0 +
                                                                  raudrohi.date_and_time.number_of_days_in_a_month(
                                                                      prc_.content_.i_month,
                                                                      prc_.content_.i_year);
                    }); // critical_section_rw
                content_2_widgets_states();
                prc_.content_set_ = true;
            } catch (err) {
                raudrohi.tmg('185a3541-1cc4-4b6a-8714-018250705dd7', err);
            } // catch
        } // set_content_by_JavaScript_Date_instance

        this.set_content_by_unix_time = function (s_unix_time_in_seconds) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_unix_time_in_seconds,
                        's_unix_time_in_seconds',
                        '2ee80ef3-e6cf-4e8d-8744-018250705dd7');
                } // if
                var i_unix_time = parseInt(lc_s_emptystring +
                                           s_unix_time_in_seconds);
                var i_milliseconds = i_unix_time * 1000;
                var dt = new Date(i_milliseconds);
                set_content_by_JavaScript_Date_instance(dt);
            } catch (err) {
                raudrohi.tmg('8123ffee-9205-478a-8d33-018250705dd7', err);
            } // catch
        } // set_content_by_unix_time

        this.set_content_by_date = function (i_day, i_month, i_year) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(i_day, 'i_day',
                        '2a5b0863-5abe-4f13-bb43-018250705dd7');
                    raudrohi.base.assert_isNumber(i_month, 'i_month',
                        '548b3c92-1e19-489f-b733-018250705dd7');
                    raudrohi.base.assert_isNumber(i_year, 'i_year',
                        '43290fb5-a469-4eba-bd23-018250705dd7');
                } // if
                // One relies on garbage collection with the next line. :-)
                var b_throw_if_contradiction_found = true;
                raudrohi.date_and_time.date_is_contradictory(
                    i_day, i_month, i_year, b_throw_if_contradiction_found);
                // The month parameter of the JavaScript
                // Date class is 0-indexed; January is 0, February is 1, etc.
                var i_month_corrected = i_month - 1;
                var i_hour = 0;
                var i_minute = 0;
                var i_second = 0;
                var i_millisecond = 0;
                var dt = new Date(i_year, i_month_corrected,
                    i_day, i_hour, i_minute, i_second, i_millisecond);
                set_content_by_JavaScript_Date_instance(dt);
            } catch (err) {
                raudrohi.tmg('417fb693-6ccb-4263-9652-018250705dd7', err);
            } // catch
        } // set_content_by_date

        this.set_content_2_now = function () {
            try {
                var dt = new Date();
                set_content_by_JavaScript_Date_instance(dt);
            } catch (err) {
                raudrohi.tmg('c2eaf06b-fb3d-4324-8472-018250705dd7', err);
            } // catch
        } // set_content_2_now

        prc_.customizable.optional.startup_hook = function () {
            try {
                self_public_.set_content_2_now();
            } catch (err) {
                raudrohi.tmg('24fcd754-f19e-4e47-ba52-018250705dd7', err);
            } // catch
        } // prc_.customizable.optional.startup_hook

        // Returns null, if the content is not set.
        this.get_content = function () {
            try {
                var ht_timestamp = null;
                prc_.critical_section_r(lc_s_content,
                    function () {
                    }, function () {
                        if (prc_.content_set_ === true) {
                            ht_timestamp =
                            prc_.usable_only_in_critical_section.content_2_ht_timestamp_raw();
                        } // if
                    }); // critical_section_r
                return ht_timestamp;
            } catch (err) {
                raudrohi.tmg('a549663b-ec03-40be-b442-018250705dd7', err);
            } // catch
        } // get_content

        // Returns a string representation of the
        // unix_time or null, if the content is not set.
        this.get_content_unix_time = function () {
            try {
                var s_out = null;
                prc_.critical_section_r(lc_s_content,
                    function () {
                    }, function () {
                        if (prc_.content_set_ === true) {
                            s_out =
                            lc_s_emptystring + prc_.content_.i_unix_time;
                        } // if
                    }); // critical_section_r
                return s_out;
            } catch (err) {
                raudrohi.tmg('36ba9615-18cb-4bff-b521-018250705dd7', err);
            } // catch
        } // get_content

        this.get_content_2_collection_t1 = function (ht) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht, 'ht',
                        '24f9ccc1-eb80-4538-9931-018250705dd7');
                } // if
                var s_unix_time = self_public_.get_content_unix_time();
                if (s_unix_time === null) { //== <field not set>
                    s_unix_time = "";
                } // if
                raudrohi.wg_processing_t1.dbfcreate_s_t1(ht,
                    "i_" + self_public_.s_field_name_in_parent + "_unix_time",
                    s_unix_time, false);
            } catch (err) {
                raudrohi.tmg('354d0c49-281e-4c81-b151-018250705dd7', err);
            } // catch
        } // get_content_2_collection_t1

        this.set_content_from_collection_t1 = function (ht) {
            try {
                var s_key_subfield_set = "dbf_sb_i_" +
                                         self_public_.s_field_name_in_parent +
                                         "_unix_time_set";
                var s_key_field = "dbf_i_" +
                                  self_public_.s_field_name_in_parent +
                                  "_unix_time";

                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht, 'ht',
                        'b13a200a-a27c-4865-8921-018250705dd7');
                    if (ht.containsKey(s_key_subfield_set) !== true) {
                        raudrohi.tmg('c17b89fd-4f67-4009-8f10-018250705dd7',
                            'The ht does not contain the key "' +
                            s_key_subfield_set + '".');
                    } // if
                    if (ht.containsKey(s_key_field) !== true) {
                        raudrohi.tmg('370b8123-0709-4986-9c30-018250705dd7',
                            'The ht does not contain the key "' +
                            s_key_field + '".');
                    } // if
                } // if
                if (ht.get(s_key_subfield_set) === 'f') {
                    self_public_.clear_content();
                    return;
                } // if
                var s_unix_time = ht.get(s_key_field);
                self_public_.set_content_by_unix_time(s_unix_time);
            } catch (err) {
                raudrohi.tmg('e37acb39-3cec-411d-8510-018250705dd7', err);
            } // catch
        } // set_content_from_collection_t1

        self_public_.startup_sequence_init();
    } catch (err) {
        raudrohi.tmg('33efaa82-fdb6-48b6-bc1f-018250705dd7', err);
    } // catch
} // raudrohi.widgets.g1.calendar_t1
//=========================================================================

raudrohi.widgets.g1.calendar_t2_dictionary = new Hashtable();

raudrohi.widgets.g1.calendar_t2_dictionary_init = function () {
    try {
        var ht = null;
        var s_year = 'year';
        var s_month = 'month';
        var s_day = 'day';
        var s_hour = 'hour';
        var s_minute = 'minute';
        var s_second = 'second';
        ht = new Hashtable();
        ht.put(s_year, 'Aasta');
        ht.put(s_month, 'Kuu');
        ht.put(s_day, 'PÃ¤ev');
        ht.put(s_hour, 'Tund');
        ht.put(s_minute, 'Minut');
        ht.put(s_second, 'Sekund');
        raudrohi.widgets.g1.calendar_t2_dictionary.put('et', ht);
        ht = new Hashtable();
        ht.put(s_year, 'Year');
        ht.put(s_month, 'Month');
        ht.put(s_day, 'Day');
        ht.put(s_hour, 'Hour');
        ht.put(s_minute, 'Minute');
        ht.put(s_second, 'Second');
        raudrohi.widgets.g1.calendar_t2_dictionary.put('uk', ht);
        // According to "Eesti Keele KÃ¤siraamat", page 52,
        // month names start with lower case letter, unless they
        // are at the start of a sentence or a title or apply to
        // other special cases.
        ht = new Hashtable();
        ht.put("1", 'jaanuar');
        ht.put("2", 'veebruar');
        ht.put("3", 'mÃ¤rts');
        ht.put("4", 'aprill');
        ht.put("5", 'mai');
        ht.put("6", 'juuni');
        ht.put("7", 'juuli');
        ht.put("8", 'august');
        ht.put("9", 'september');
        ht.put("10", 'oktoober');
        ht.put("11", 'november');
        ht.put("12", 'detsember');
        raudrohi.widgets.g1.calendar_t2_dictionary.put('et_months', ht);
        ht = new Hashtable();
        ht.put("1", 'January');
        ht.put("2", 'February');
        ht.put("3", 'March');
        ht.put("4", 'April');
        ht.put("5", 'May');
        ht.put("6", 'June');
        ht.put("7", 'July');
        ht.put("8", 'August');
        ht.put("9", 'September');
        ht.put("10", 'October');
        ht.put("11", 'November');
        ht.put("12", 'December');
        raudrohi.widgets.g1.calendar_t2_dictionary.put('uk_months', ht);
    } catch (err) {
        raudrohi.tmg('4f42679c-8437-4773-8551-33d0c0505dd7', err);
    } // catch
} // raudrohi.widgets.g1.calendar_t2_dictionary_init
raudrohi.widgets.g1.calendar_t2_dictionary_init();

raudrohi.widgets.g1.calendar_t2 =
function (s_html_id, s_language, s_display_format) {
    try {
        s_display_format = typeof(s_display_format) !==
                           'undefined' ? s_display_format : "DD/MM/YY";
        s_language = typeof(s_language) !== 'undefined' ? s_language : "uk";

        // RENESSAATOR_BLOCK_START
// RENESSAATOR_BLOCK_ID=block_1
// RENESSAATOR_SOURCE_LANGUAGE=Ruby
// RENESSAATOR_SOURCE_START
// RAUDROHI_HOME=ENV['RAUDROHI_HOME']
// require(RAUDROHI_HOME+"/src/dev_tools/code_generation/raudrohi_cg0.rb")
// require(RAUDROHI_CODE_GENERATION+"/by_file/raudrohi_js_widgets_calendar_t2_block_1.rb")
// RENESSAATOR_SOURCE_END
//
// RENESSAATOR_AUTOGENERATED_TEXT_START
    if(raudrohi_settings_debug_JavaScript===true){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_debug_verification 
            raudrohi.base.assert_is_HTML_ID(s_html_id,'s_html_id',
                '4f4ec3c5-3344-4797-9a51-703371705dd7');
raudrohi.base.assert_isString(s_display_format,'s_display_format',
                '52203b9e-0238-4453-8b41-703371705dd7');
raudrohi.base.assert_isString(s_language,'s_language',
                '33c112b1-fa10-44cd-b151-703371705dd7');

    } // if

    if(raudrohi_settings_debug_JavaScript===true){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_debug_verification 
            raudrohi.base.assert_isString(s_html_id,'s_html_id',
                '8a532f7b-1c96-4072-bc51-703371705dd7');

    } // if
     //---widget--boilerplate_1_--start--
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget 
		var self_public_=this;
		var pileofmethods_t1_=new raudrohi.widgets.g1.pileofmethods_t1(
                 self_public_,'raudrohi.widgets.g1.calendar_t2',
                 s_html_id);
		var prc_=self_public_.private_code_;
		var wg_hooks_=self_public_.wg_hooks_;
     //---widget--boilerplate_1_--end----


var widget_button_t1_year_inc_=null;
var id_button_t1_year_inc_=prc_.html_id_+'_button_t1_year_inc';
var widget_textarea_t1_year_=null;
var id_textarea_t1_year_=prc_.html_id_+'_textarea_t1_year';
var widget_button_t1_year_dec_=null;
var id_button_t1_year_dec_=prc_.html_id_+'_button_t1_year_dec';
var widget_partialmenu_t1_month_=null;
var id_partialmenu_t1_month_=prc_.html_id_+'_partialmenu_t1_month';
var widget_button_t1_day_inc_10x_=null;
var id_button_t1_day_inc_10x_=prc_.html_id_+'_button_t1_day_inc_10x';
var widget_button_t1_day_inc_=null;
var id_button_t1_day_inc_=prc_.html_id_+'_button_t1_day_inc';
var widget_textarea_t1_day_=null;
var id_textarea_t1_day_=prc_.html_id_+'_textarea_t1_day';
var widget_button_t1_day_dec_=null;
var id_button_t1_day_dec_=prc_.html_id_+'_button_t1_day_dec';
var widget_button_t1_day_dec_10x_=null;
var id_button_t1_day_dec_10x_=prc_.html_id_+'_button_t1_day_dec_10x';
var widget_partialmenu_t1_hour_=null;
var id_partialmenu_t1_hour_=prc_.html_id_+'_partialmenu_t1_hour';
var widget_partialmenu_t1_minute_=null;
var id_partialmenu_t1_minute_=prc_.html_id_+'_partialmenu_t1_minute';
var widget_partialmenu_t1_second_=null;
var id_partialmenu_t1_second_=prc_.html_id_+'_partialmenu_t1_second';

		self_public_.private_code_.evh_.evh_button_t1_year_inc=function(e){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget_button_t1 
			try{
              evh_increment_year();
			} catch (err){
				raudrohi.tmg('3cfdc482-5567-46cc-8b5d-703371705dd7',err);
			} // catch
		} // evh_button_t1_year_inc 

		self_public_.private_code_.evh_.evh_button_t1_year_dec=function(e){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget_button_t1 
			try{
              evh_decrement_year();
			} catch (err){
				raudrohi.tmg('565fb5b1-ead3-49dc-942e-703371705dd7',err);
			} // catch
		} // evh_button_t1_year_dec 

		self_public_.private_code_.evh_.evh_button_t1_day_inc_10x=function(e){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget_button_t1 
			try{
              evh_increment_day_10x();
			} catch (err){
				raudrohi.tmg('47bea571-de38-4098-be3f-703371705dd7',err);
			} // catch
		} // evh_button_t1_day_inc_10x 

		self_public_.private_code_.evh_.evh_button_t1_day_inc=function(e){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget_button_t1 
			try{
              evh_increment_day();
			} catch (err){
				raudrohi.tmg('249c1513-ae6b-4b80-844f-703371705dd7',err);
			} // catch
		} // evh_button_t1_day_inc 

		self_public_.private_code_.evh_.evh_button_t1_day_dec=function(e){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget_button_t1 
			try{
              evh_decrement_day();
			} catch (err){
				raudrohi.tmg('221e4373-36cc-4d45-a75f-703371705dd7',err);
			} // catch
		} // evh_button_t1_day_dec 

		self_public_.private_code_.evh_.evh_button_t1_day_dec_10x=function(e){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget_button_t1 
			try{
              evh_decrement_day_10x();
			} catch (err){
				raudrohi.tmg('d1ffe722-0e82-4244-a040-703371705dd7',err);
			} // catch
		} // evh_button_t1_day_dec_10x 



   		function create_widgets_autogen( ){
				        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget 
			try{
				             widget_button_t1_year_inc_=new raudrohi.widgets.g1.button_t1(
                     id_button_t1_year_inc_,'>');
             widget_button_t1_year_inc_.evh_button_pushed_impl=self_public_.private_code_.evh_.evh_button_t1_year_inc;
             widget_button_t1_year_inc_.s_field_name_in_parent='year_inc';
             prc_.register_subwidget(widget_button_t1_year_inc_,'hidden');

	            var ht_widget_textarea_t1_year_params=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
	            ht_widget_textarea_t1_year_params.put('type','text');
             widget_textarea_t1_year_=new raudrohi.widgets.g1.textarea_t1(
                     id_textarea_t1_year_,5,1,
                     ht_widget_textarea_t1_year_params);
             widget_textarea_t1_year_.set_alignment('west');
             prc_.register_subwidget(widget_textarea_t1_year_,'visible');
             widget_textarea_t1_year_.s_field_name_in_parent='year';
             raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_widget_textarea_t1_year_params);

             widget_button_t1_year_dec_=new raudrohi.widgets.g1.button_t1(
                     id_button_t1_year_dec_,'<');
             widget_button_t1_year_dec_.evh_button_pushed_impl=self_public_.private_code_.evh_.evh_button_t1_year_dec;
             widget_button_t1_year_dec_.s_field_name_in_parent='year_dec';
             prc_.register_subwidget(widget_button_t1_year_dec_,'hidden');

widget_partialmenu_t1_month_=new
        raudrohi.widgets.g1.partialmenu_t1(
                id_partialmenu_t1_month_,self_public_,
                5,2,1,
                'month',
                'partialmenu_t1_mode_1','partialmenu_t1_containertype_vertical_1');
widget_partialmenu_t1_month_.s_field_name_in_parent='month';
prc_.register_subwidget(
        widget_partialmenu_t1_month_,'hidden');

var ar_autogenerated_tmpvar_a25a3d31_da97_455b_8a67_703371705dd7=[];
var x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7;
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7={};
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label1='1';
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label2='1';
ar_autogenerated_tmpvar_a25a3d31_da97_455b_8a67_703371705dd7.push(x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7);
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7={};
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label1='2';
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label2='2';
ar_autogenerated_tmpvar_a25a3d31_da97_455b_8a67_703371705dd7.push(x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7);
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7={};
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label1='3';
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label2='3';
ar_autogenerated_tmpvar_a25a3d31_da97_455b_8a67_703371705dd7.push(x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7);
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7={};
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label1='4';
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label2='4';
ar_autogenerated_tmpvar_a25a3d31_da97_455b_8a67_703371705dd7.push(x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7);
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7={};
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label1='5';
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label2='5';
ar_autogenerated_tmpvar_a25a3d31_da97_455b_8a67_703371705dd7.push(x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7);
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7={};
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label1='6';
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label2='6';
ar_autogenerated_tmpvar_a25a3d31_da97_455b_8a67_703371705dd7.push(x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7);
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7={};
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label1='7';
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label2='7';
ar_autogenerated_tmpvar_a25a3d31_da97_455b_8a67_703371705dd7.push(x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7);
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7={};
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label1='8';
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label2='8';
ar_autogenerated_tmpvar_a25a3d31_da97_455b_8a67_703371705dd7.push(x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7);
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7={};
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label1='9';
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label2='9';
ar_autogenerated_tmpvar_a25a3d31_da97_455b_8a67_703371705dd7.push(x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7);
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7={};
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label1='10';
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label2='10';
ar_autogenerated_tmpvar_a25a3d31_da97_455b_8a67_703371705dd7.push(x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7);
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7={};
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label1='11';
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label2='11';
ar_autogenerated_tmpvar_a25a3d31_da97_455b_8a67_703371705dd7.push(x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7);
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7={};
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label1='12';
x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7.s_label2='12';
ar_autogenerated_tmpvar_a25a3d31_da97_455b_8a67_703371705dd7.push(x_autogenerated_tmpvar_15e327c3_9755_4237_8b58_703371705dd7);

widget_partialmenu_t1_month_.set_menu_content(ar_autogenerated_tmpvar_a25a3d31_da97_455b_8a67_703371705dd7)
             widget_button_t1_day_inc_10x_=new raudrohi.widgets.g1.button_t1(
                     id_button_t1_day_inc_10x_,'>>');
             widget_button_t1_day_inc_10x_.evh_button_pushed_impl=self_public_.private_code_.evh_.evh_button_t1_day_inc_10x;
             widget_button_t1_day_inc_10x_.s_field_name_in_parent='day_inc_10x';
             prc_.register_subwidget(widget_button_t1_day_inc_10x_,'hidden');

             widget_button_t1_day_inc_=new raudrohi.widgets.g1.button_t1(
                     id_button_t1_day_inc_,'>');
             widget_button_t1_day_inc_.evh_button_pushed_impl=self_public_.private_code_.evh_.evh_button_t1_day_inc;
             widget_button_t1_day_inc_.s_field_name_in_parent='day_inc';
             prc_.register_subwidget(widget_button_t1_day_inc_,'hidden');

	            var ht_widget_textarea_t1_day_params=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
	            ht_widget_textarea_t1_day_params.put('type','text');
             widget_textarea_t1_day_=new raudrohi.widgets.g1.textarea_t1(
                     id_textarea_t1_day_,5,1,
                     ht_widget_textarea_t1_day_params);
             widget_textarea_t1_day_.set_alignment('west');
             prc_.register_subwidget(widget_textarea_t1_day_,'visible');
             widget_textarea_t1_day_.s_field_name_in_parent='day';
             raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_widget_textarea_t1_day_params);

             widget_button_t1_day_dec_=new raudrohi.widgets.g1.button_t1(
                     id_button_t1_day_dec_,'<');
             widget_button_t1_day_dec_.evh_button_pushed_impl=self_public_.private_code_.evh_.evh_button_t1_day_dec;
             widget_button_t1_day_dec_.s_field_name_in_parent='day_dec';
             prc_.register_subwidget(widget_button_t1_day_dec_,'hidden');

             widget_button_t1_day_dec_10x_=new raudrohi.widgets.g1.button_t1(
                     id_button_t1_day_dec_10x_,'<<');
             widget_button_t1_day_dec_10x_.evh_button_pushed_impl=self_public_.private_code_.evh_.evh_button_t1_day_dec_10x;
             widget_button_t1_day_dec_10x_.s_field_name_in_parent='day_dec_10x';
             prc_.register_subwidget(widget_button_t1_day_dec_10x_,'hidden');

widget_partialmenu_t1_hour_=new
        raudrohi.widgets.g1.partialmenu_t1(
                id_partialmenu_t1_hour_,self_public_,
                5,2,1,
                'hour',
                'partialmenu_t1_mode_1','partialmenu_t1_containertype_vertical_1');
widget_partialmenu_t1_hour_.s_field_name_in_parent='hour';
prc_.register_subwidget(
        widget_partialmenu_t1_hour_,'hidden');

var ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7=[];
var x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7;
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='0';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='0';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='1';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='1';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='2';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='2';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='3';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='3';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='4';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='4';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='5';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='5';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='6';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='6';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='7';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='7';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='8';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='8';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='9';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='9';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='10';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='10';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='11';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='11';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='12';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='12';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='13';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='13';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='14';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='14';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='15';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='15';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='16';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='16';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='17';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='17';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='18';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='18';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='19';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='19';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='20';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='20';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='21';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='21';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='22';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='22';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7={};
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label1='23';
x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7.s_label2='23';
ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7.push(x_autogenerated_tmpvar_b408389c_3463_4b74_bf2c_703371705dd7);

widget_partialmenu_t1_hour_.set_menu_content(ar_autogenerated_tmpvar_5e10ec92_10eb_4977_b75b_703371705dd7)
widget_partialmenu_t1_minute_=new
        raudrohi.widgets.g1.partialmenu_t1(
                id_partialmenu_t1_minute_,self_public_,
                5,2,1,
                'minute',
                'partialmenu_t1_mode_1','partialmenu_t1_containertype_vertical_1');
widget_partialmenu_t1_minute_.s_field_name_in_parent='minute';
prc_.register_subwidget(
        widget_partialmenu_t1_minute_,'hidden');

var ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7=[];
var x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7;
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='0';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='0';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='1';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='1';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='2';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='2';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='3';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='3';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='4';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='4';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='5';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='5';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='6';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='6';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='7';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='7';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='8';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='8';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='9';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='9';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='10';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='10';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='11';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='11';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='12';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='12';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='13';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='13';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='14';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='14';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='15';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='15';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='16';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='16';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='17';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='17';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='18';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='18';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='19';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='19';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='20';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='20';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='21';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='21';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='22';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='22';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='23';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='23';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='24';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='24';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='25';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='25';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='26';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='26';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='27';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='27';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='28';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='28';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='29';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='29';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='30';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='30';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='31';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='31';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='32';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='32';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='33';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='33';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='34';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='34';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='35';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='35';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='36';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='36';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='37';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='37';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='38';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='38';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='39';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='39';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='40';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='40';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='41';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='41';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='42';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='42';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='43';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='43';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='44';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='44';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='45';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='45';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='46';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='46';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='47';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='47';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='48';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='48';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='49';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='49';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='50';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='50';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='51';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='51';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='52';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='52';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='53';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='53';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='54';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='54';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='55';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='55';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='56';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='56';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='57';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='57';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='58';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='58';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7={};
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label1='59';
x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7.s_label2='59';
ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7.push(x_autogenerated_tmpvar_31771645_c710_4cb5_ad2e_703371705dd7);

widget_partialmenu_t1_minute_.set_menu_content(ar_autogenerated_tmpvar_b2c0238a_e6ff_4b6b_a91e_703371705dd7)
widget_partialmenu_t1_second_=new
        raudrohi.widgets.g1.partialmenu_t1(
                id_partialmenu_t1_second_,self_public_,
                5,2,1,
                'second',
                'partialmenu_t1_mode_1','partialmenu_t1_containertype_vertical_1');
widget_partialmenu_t1_second_.s_field_name_in_parent='second';
prc_.register_subwidget(
        widget_partialmenu_t1_second_,'hidden');

var ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7=[];
var x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7;
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='0';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='0';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='1';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='1';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='2';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='2';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='3';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='3';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='4';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='4';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='5';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='5';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='6';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='6';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='7';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='7';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='8';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='8';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='9';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='9';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='10';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='10';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='11';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='11';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='12';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='12';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='13';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='13';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='14';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='14';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='15';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='15';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='16';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='16';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='17';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='17';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='18';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='18';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='19';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='19';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='20';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='20';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='21';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='21';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='22';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='22';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='23';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='23';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='24';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='24';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='25';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='25';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='26';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='26';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='27';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='27';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='28';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='28';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='29';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='29';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='30';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='30';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='31';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='31';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='32';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='32';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='33';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='33';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='34';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='34';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='35';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='35';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='36';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='36';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='37';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='37';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='38';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='38';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='39';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='39';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='40';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='40';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='41';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='41';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='42';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='42';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='43';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='43';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='44';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='44';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='45';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='45';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='46';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='46';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='47';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='47';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='48';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='48';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='49';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='49';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='50';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='50';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='51';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='51';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='52';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='52';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='53';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='53';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='54';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='54';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='55';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='55';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='56';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='56';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='57';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='57';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='58';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='58';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7={};
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label1='59';
x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7.s_label2='59';
ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7.push(x_autogenerated_tmpvar_b83e564c_3216_4fa4_b180_703371705dd7);

widget_partialmenu_t1_second_.set_menu_content(ar_autogenerated_tmpvar_1938b5f2_9f14_4e6d_be20_703371705dd7)
			} catch(err){
				raudrohi.tmg('1ccf4e01-53da-4158-a244-703371705dd7',err);
			} // catch
		} // create_widgets_autogen


// RENESSAATOR_AUTOGENERATED_TEXT_END
// RENESSAATOR_BLOCK_END

        var id_msg1_ = prc_.html_id_ + "_msg1";

        if (raudrohi.widgets.g1.calendar_t2_dictionary.containsKey(s_language) ===
            false) {
            if (raudrohi_settings_debug_JavaScript === true) {
                raudrohi.tmg('bae38851-7636-4165-b431-33d0c0505dd7',
                    "Language not supported by this widget. " +
                    "s_language==" + s_language);
            } else {
                s_language = "uk"; // It won't break anything, so one lets it be.
            } // else
        } // if

        if (raudrohi_settings_debug_JavaScript === true) {
            switch (s_display_format) {
                case "DD/MM/YY":
                    break;
                default:
                    if (raudrohi_settings_debug_JavaScript) {
                        throw raudrohi.tmg(
                            'ce4c7a54-31be-404a-8431-33d0c0505dd7',
                            'There\'s no branching for s_display_format(==' +
                            s_display_format + ').');
                    } // if
            } // switch
        } // if
        var s_display_format_ = s_display_format;
        var s_language_ = s_language;

        prc_.content_ = {}
        prc_.content_.i_year = 1970;
        prc_.content_.i_month = 1;
        prc_.content_.i_day = 1;
        prc_.content_.i_hour = 0;
        prc_.content_.i_minute = 0;
        prc_.content_.i_second = 0;
        // In the case of the content all formats are kept up to date,
        // but some can be "original" and therefore more precise.
        prc_.content_.s_most_precise_format = lc_s_human_perceivable;
        prc_.content_.i_unix_time = 0;
        prc_.content_set_ = false;
        var i_number_of_days_in_the_selected_month_ = 200;

        var lc_s_emptystring = raudrohi_glc_s_emptystring;
        var lc_s_space = raudrohi_glc_s_space;
        var lc_s_point = raudrohi_glc_s_point;
        var lc_s_content = "content";
        var lc_s_unix_time = raudrohi_glc_s_unix_time;
        var lc_s_human_perceivable = "human_perceivable";
        var lc_s_zero = raudrohi_glc_s_zero;
        var s_readonly_display_mode_ = "calendar_t2_readonly_display_mode_2";

        // Domain == {"calendar_t2_readonly_display_mode_1",
        // "calendar_t2_readonly_display_mode_2,
        // calendar_t2_readonly_display_mode_3"}.
        this.set_readonly_display_mode = function (s_readonly_display_mode) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_readonly_display_mode,
                        's_readonly_display_mode',
                        'b5059516-f10a-49ab-b321-33d0c0505dd7');
                    // It's not that crucial that in the
                    // non-debug mode the domain is not
                    // checked here, because
                    // the render_readonly contains the domain
                    // check as a byproduct, "for free".
                    switch (s_readonly_display_mode) {
                        case 'calendar_t2_readonly_display_mode_1':
                            break;
                        case 'calendar_t2_readonly_display_mode_2':
                            break;
                        case 'calendar_t2_readonly_display_mode_3':
                            break;
                        default:
                            if (raudrohi_settings_debug_JavaScript) {
                                throw raudrohi.tmg(
                                    '3284a731-95ab-4139-9421-33d0c0505dd7',
                                    'There\'s no branching for s_readonly_display_mode(==' +
                                    s_readonly_display_mode + ').');
                            } // if
                    } // switch
                } // if
                s_readonly_display_mode_ = s_readonly_display_mode;
            } catch (err) {
                raudrohi.tmg('3975ebc4-b7a5-4976-8f21-33d0c0505dd7', err);
            } // catch
        } // set_readonly_display_mode

        prc_.customizable.optional.create_subwidgets = function () {
            try {
                create_widgets_autogen();
                widget_partialmenu_t1_month_.private_code_.customizable.optional.evh_selection_impl =
                evh_month_selected;
                self_public_.set_content_2_now();
            } catch (err) {
                raudrohi.tmg('3a48f126-c9cd-4574-8521-33d0c0505dd7', err);
            } // catch
        } // prc_.customizable.optional.create_subwidgets


        function create_containers() {
            try {
                if (!prc_.containers_html_cached_) {
                    var ht_dictionary = raudrohi.widgets.g1.calendar_t2_dictionary.get(s_language_);
                    var s_day = ht_dictionary.get('day');
                    var s_month = ht_dictionary.get('month');
                    var s_year = ht_dictionary.get('year');
                    var s_hour = ht_dictionary.get('hour');
                    var s_minute = ht_dictionary.get('minute');
                    var s_second = ht_dictionary.get('second');

                    var s_langline_t1 = null;
                    var s_dd_mm_yy_t1 = null;
                    var s_msgline_t1 = null;
                    switch (s_display_format_) {
                        case "DD/MM/YY":

                            s_msgline_t1 = "" +
                                           "<tr>\n" +
                                           "<td class=\"raudrohi_visible_table_cells\" colspan=\"7\">" +
                                           "<div id=\"" +
                                           id_msg1_ + "_div\">" +
                                           "</td>\n" +
                                           "</tr>\n";

                            s_langline_t1 = "" +
                                            "<tr>\n" +
                                            "<td class=\"raudrohi_visible_table_cells\" colspan=\"3\">" +
                                            s_day + "</td>\n" +
                                            "<td class=\"raudrohi_visible_table_cells\" colspan=\"1\">" +
                                            s_month + "</td>\n" +
                                            "<td class=\"raudrohi_visible_table_cells\" colspan=\"3\">" +
                                            s_year + "</td>\n" +
                                            "</tr>\n";

                            s_dd_mm_yy_t1 = "" +
                                            "<tr>\n" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_button_t1_day_dec_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_textarea_t1_day_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_button_t1_day_inc_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_partialmenu_t1_month_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_button_t1_year_dec_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_textarea_t1_year_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_button_t1_year_inc_ +
                                            "_div\"></div></td>\n" +
                                            "</tr>\n" +
                                            "" +
                                            "" +
                                            "<tr>\n" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_button_t1_day_dec_10x_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"><div id=\"" +
                                            id_button_t1_day_inc_10x_ +
                                            "_div\"></div></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"></td>\n" +
                                            "" +
                                            "<td class=\"raudrohi_visible_table_cells\" " +
                                            "colspan=\"1\"></td>\n" +
                                            "" +
                                            "</tr>\n";
                            break;
                        default:
                            if (raudrohi_settings_debug_JavaScript) {
                                throw raudrohi.tmg(
                                    'fd4caf22-72ca-4258-8511-33d0c0505dd7',
                                    'There\'s no branching for s_display_format_(==' +
                                    s_display_format_ + ').');
                            } // if
                    } // switch

                    var ar_class_names = ["raudrohi_visible_table"];
                    prc_.containers_html_cache_dd_mm_yy_c1_ =
                    prc_.selfread.wrap_2_alignment_div(
                        raudrohi.lang.cg_table_t1(
                            "" +//s_msgline_t1+
                            s_langline_t1 +
                            s_dd_mm_yy_t1,
                            ar_class_names));

                    prc_.containers_html_cached_ = true;
                } // if
                var s_container = null;
                switch (s_display_format_) {
                    case "DD/MM/YY":
                        s_container = prc_.containers_html_cache_dd_mm_yy_c1_;
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '021e261f-7888-434b-b511-33d0c0505dd7',
                                'There\'s no branching for s_display_format_(==' +
                                s_display_format_ + ').');
                        } // if
                } // switch
                raudrohi.base.set_innerHTML(prc_.html_id_ + "_div",
                    s_container);
                //raudrohi.base.set_innerHTML(id_msg1_+"_div",lc_s_emptystring);
            } catch (err) {
                raudrohi.tmg('15cab973-19a6-4f8b-9311-33d0c0505dd7', err);
            } // catch
        } // create_containers

        var b_day_is_incrementable_by_one_ = true;
        var b_day_is_decrementable_by_one_ = false;
        var b_day_is_incrementable_by_10_ = true;
        var b_day_is_decrementable_by_10_ = false;

        function render_editable_day() {
            try {
                prc_.mark_elemwidget_to_be_unhidden(
                    widget_textarea_t1_day_);

                if (b_day_is_incrementable_by_one_ === true) {
                    widget_button_t1_day_inc_.set_readonly(false);
                } else {
                    widget_button_t1_day_inc_.set_readonly(true);
                } // else
                if (b_day_is_incrementable_by_10_ === true) {
                    widget_button_t1_day_inc_10x_.set_readonly(false);
                } else {
                    widget_button_t1_day_inc_10x_.set_readonly(true);
                } // else

                if (b_day_is_decrementable_by_one_ === true) {
                    widget_button_t1_day_dec_.set_readonly(false);
                } else {
                    widget_button_t1_day_dec_.set_readonly(true);
                } // else
                if (b_day_is_decrementable_by_10_ === true) {
                    widget_button_t1_day_dec_10x_.set_readonly(false);
                } else {
                    widget_button_t1_day_dec_10x_.set_readonly(true);
                } // else

                prc_.mark_elemwidget_to_be_unhidden(
                    widget_button_t1_day_dec_);
                prc_.mark_elemwidget_to_be_unhidden(
                    widget_button_t1_day_dec_10x_);
                prc_.mark_elemwidget_to_be_unhidden(
                    widget_button_t1_day_inc_);
                prc_.mark_elemwidget_to_be_unhidden(
                    widget_button_t1_day_inc_10x_);
            } catch (err) {
                raudrohi.tmg('13c58842-42fa-4a14-8201-33d0c0505dd7', err);
            } // catch
        } // render_editable_day


        prc_.customizable.compulsory.render_editable = function () {
            try {
                create_containers();
                switch (s_display_format_) {
                    case "DD/MM/YY":
                        widget_textarea_t1_year_.set_readonly(true);
                        widget_textarea_t1_day_.set_readonly(true);

                        prc_.mark_elemwidget_to_be_hidden(
                            widget_partialmenu_t1_hour_, true);
                        prc_.mark_elemwidget_to_be_hidden(
                            widget_partialmenu_t1_minute_, true);
                        prc_.mark_elemwidget_to_be_hidden(
                            widget_partialmenu_t1_second_, true);

                        render_editable_day();

                        prc_.mark_elemwidget_to_be_unhidden(
                            widget_partialmenu_t1_month_);

                        prc_.mark_elemwidget_to_be_unhidden(
                            widget_button_t1_year_dec_);
                        prc_.mark_elemwidget_to_be_unhidden(
                            widget_textarea_t1_year_);
                        prc_.mark_elemwidget_to_be_unhidden(
                            widget_button_t1_year_inc_);
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                'd3740c49-cf23-48ca-b201-33d0c0505dd7',
                                'There\'s no branching for s_display_format_(==' +
                                s_display_format_ + ').');
                        } // if
                } // switch
            } catch (err) {
                raudrohi.tmg('41befb14-93f9-436e-a201-33d0c0505dd7', err);
            } // catch
        } // prc_.customizable.compulsory.render_editable


        function render_readonly_display_mode_1_dd_mm_yy() {
            try {
                prc_.mark_elemwidget_to_be_hidden(
                    widget_partialmenu_t1_hour_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_partialmenu_t1_minute_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_partialmenu_t1_second_, true);

                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_dec_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_dec_10x_, true);
                prc_.mark_elemwidget_to_be_unhidden(
                    widget_textarea_t1_day_);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_inc_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_inc_10x_, true);

                prc_.mark_elemwidget_to_be_unhidden(
                    widget_partialmenu_t1_month_);


                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_year_dec_, true);
                prc_.mark_elemwidget_to_be_unhidden(
                    widget_textarea_t1_year_);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_year_inc_, true);
            } catch (err) {
                raudrohi.tmg('1a9baa73-1fe8-4fef-b101-33d0c0505dd7', err);
            } // catch
        } // render_readonly_display_mode_1_dd_mm_yy

        function render_readonly_display_mode_1() {
            try {
                create_containers();
                switch (s_display_format_) {
                    case "DD/MM/YY":
                        render_readonly_display_mode_1_dd_mm_yy();
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '9f35943a-d457-4ede-b4f0-33d0c0505dd7',
                                'There\'s no branching for s_display_format_(==' +
                                s_display_format_ + ').');
                        } // if
                } // switch
            } catch (err) {
                raudrohi.tmg('a98b2a3f-efee-4b1c-b2f0-33d0c0505dd7', err);
            } // catch
        } // render_readonly_display_mode_1

        function mark_all_subwidgets_to_be_hidden() {
            try {
                prc_.mark_elemwidget_to_be_hidden(
                    widget_partialmenu_t1_hour_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_partialmenu_t1_minute_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_partialmenu_t1_second_, true);

                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_dec_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_dec_10x_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_textarea_t1_day_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_inc_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_day_inc_10x_, true);

                prc_.mark_elemwidget_to_be_hidden(
                    widget_partialmenu_t1_month_, true);


                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_year_dec_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_textarea_t1_year_, true);
                prc_.mark_elemwidget_to_be_hidden(
                    widget_button_t1_year_inc_, true);
            } catch (err) {
                raudrohi.tmg('40eed8b5-9439-4bca-94f0-33d0c0505dd7', err);
            } // catch
        } // mark_all_subwidgets_to_be_hidden

        function prepend_zero_if_smaller_than_10(i_something) {
            // TODO: refactor it out by creating a general function with
            // the ability to add multiple zeros, etc.
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(i_something, 'i_something',
                        '64216624-cf5a-410c-95f0-33d0c0505dd7');
                } // if
                var s_out = lc_s_emptystring + i_something;
                if (i_something < 10) {
                    s_out = lc_s_zero + s_out;
                } // if
                return s_out;
            } catch (err) {
                raudrohi.tmg('1dabfa25-0342-4edb-83e0-33d0c0505dd7', err);
            } // catch
        } // prepend_zero_if_smaller_than_10

        function render_readonly_display_mode_2_dd_mm_yy() {
            try {
                mark_all_subwidgets_to_be_hidden();
                var i_year = 0;
                var i_month = 0;
                var i_day = 0;
                prc_.critical_section_r(lc_s_content,
                    function () {
                    }, function () {
                        i_year = prc_.content_.i_year;
                        i_month = prc_.content_.i_month;
                        i_day = prc_.content_.i_day;
                    });
                var s_month_name = raudrohi.widgets.g1.calendar_t2_dictionary.get(
                    s_language_ + '_months').get(lc_s_emptystring + i_month);
                var s_datestring = lc_s_emptystring + i_day + lc_s_point +
                                   lc_s_space + s_month_name + lc_s_space +
                                   i_year;
                var s_rendering_result = prc_.selfread.wrap_2_alignment_div(
                    s_datestring);
                raudrohi.base.set_innerHTML(prc_.html_id_ + "_div",
                    s_rendering_result);
            } catch (err) {
                raudrohi.tmg('2a712c2a-6cf8-4824-b1e0-33d0c0505dd7', err);
            } // catch
        } // render_readonly_display_mode_2_dd_mm_yy

        function render_readonly_display_mode_2() {
            try {
                create_containers();
                switch (s_display_format_) {
                    case "DD/MM/YY":
                        render_readonly_display_mode_2_dd_mm_yy();
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '4f4d2493-f079-46a4-87e0-33d0c0505dd7',
                                'There\'s no branching for s_display_format_(==' +
                                s_display_format_ + ').');
                        } // if
                } // switch
            } catch (err) {
                raudrohi.tmg('3740e6e3-b205-43c5-b3e0-33d0c0505dd7', err);
            } // catch
        } // render_readonly_display_mode_2

        self_public_.render_readonly_display_mode_3_dd_mm_yy_text_if_content_not_set =
        "" +
        "value not yet set, GUID=='a2a50b5c-00bc-402d-95d0-33d0c0505dd7'";

        function render_readonly_display_mode_3() {
            try {
                create_containers();
                if (prc_.content_set_ === false) {
                    mark_all_subwidgets_to_be_hidden();
                    raudrohi.base.set_innerHTML(prc_.html_id_ + "_div",
                        self_public_.render_readonly_display_mode_3_dd_mm_yy_text_if_content_not_set);
                    return;
                } // if
                switch (s_display_format_) {
                    case "DD/MM/YY":
                        render_readonly_display_mode_2_dd_mm_yy();
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '3090e253-0162-4828-b5d0-33d0c0505dd7',
                                'There\'s no branching for s_display_format_(==' +
                                s_display_format_ + ').');
                        } // if
                } // switch
            } catch (err) {
                raudrohi.tmg('fa985736-e101-416b-a3d0-33d0c0505dd7', err);
            } // catch
        } // render_readonly_display_mode_3

        prc_.customizable.compulsory.render_readonly = function () {
            try {
                switch (s_readonly_display_mode_) {
                    case 'calendar_t2_readonly_display_mode_1':
                        render_readonly_display_mode_1();
                        break;
                    case 'calendar_t2_readonly_display_mode_2':
                        render_readonly_display_mode_2();
                        break;
                    case 'calendar_t2_readonly_display_mode_3':
                        render_readonly_display_mode_3();
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '3e154952-2005-4a12-81d0-33d0c0505dd7',
                                'There\'s no branching for s_readonly_display_mode(==' +
                                s_readonly_display_mode_ + ').');
                        } // if
                } // switch
            } catch (err) {
                raudrohi.tmg('21ba592d-8005-4ab2-91c0-33d0c0505dd7', err);
            } // catch
        } // prc_.customizable.compulsory.render_readonly

        //self_public_.calendarhacknamespace.usable_only_in_critical_section.update_day_buttons_clickability=function(){
        self_public_.calendarhacknamespace = {}
        self_public_.calendarhacknamespace.update_day_buttons_clickability =
        function () {
            try {
                var i_wouldbe = 0;
                if (prc_.content_.i_day <
                    i_number_of_days_in_the_selected_month_) {
                    b_day_is_incrementable_by_one_ = true;
                    i_wouldbe = prc_.content_.i_day + 10;
                    if (i_wouldbe <= i_number_of_days_in_the_selected_month_) {
                        b_day_is_incrementable_by_10_ = true;
                    } else {
                        b_day_is_incrementable_by_10_ = false;
                    } // else
                } else {
                    b_day_is_incrementable_by_one_ = false;
                    b_day_is_incrementable_by_10_ = false;
                } // else

                if (1 < prc_.content_.i_day) {
                    b_day_is_decrementable_by_one_ = true;
                    i_wouldbe = prc_.content_.i_day - 10;
                    if (1 <= i_wouldbe) {
                        b_day_is_decrementable_by_10_ = true;
                    } else {
                        b_day_is_decrementable_by_10_ = false;
                    } // else
                } else {
                    b_day_is_decrementable_by_one_ = false;
                    b_day_is_decrementable_by_10_ = false;
                } // else

            } catch (err) {
                raudrohi.tmg('4ec70d39-42f3-48fa-a4c0-33d0c0505dd7', err);
            } // catch
        } // update_day_buttons_clickability

        // The idea is that one does not want to trigger a new
        // menu selection event, if the call to the
        // content_2_widget_states was triggered by the
        // menu selection event.
        //var freaking_calendar_closurehack_usable_only_in_critical_section={};
        prc_.usable_only_in_critical_section.set_content_2_widget_states_month =
        function () {
            try {
                var s_label1 = widget_partialmenu_t1_month_.get_content_s_label1();
                if (s_label1 !== (lc_s_emptystring + prc_.content_.i_month)) {
                    widget_partialmenu_t1_month_.set_content_by_s_label1(
                        "" + prc_.content_.i_month);
                } // if
            } catch (err) {
                raudrohi.tmg('a0e7e621-872c-411e-a140-33d0c0505dd7', err);
            } // catch
        } // set_content_2_widget_states_month

        // The b_content_2_widgets_states_in_progress_ exists
        // because one has to set the month menu,
        // but that triggers menu selection event, which
        // in turn, if it's initiated by the user, must
        // trigger the recalculation and setting of other
        // widget values, like the day and that in turn
        // calls the content_2_widgets_states(), which
        // leads to a thread-lock in the critical section
        // that resides in the content_2_widgets_states().
        var b_content_2_widgets_states_in_progress_ = false;

        // The assumption is that the prc_.content_.... is never
        // contradictory. For example one has to make sure that
        // when the year or month is changed, the  prc_.content_.i_day
        // is not greater than the number of days in the given month.
        function content_2_widgets_states() {
            try {
                switch (s_display_format_) {
                    case "DD/MM/YY":
                        prc_.critical_section_rw(lc_s_content,
                            function () {
                            }, function () {
                                b_content_2_widgets_states_in_progress_ = true;
                                widget_textarea_t1_year_.set_content(
                                    lc_s_emptystring + prc_.content_.i_year);

                                prc_.usable_only_in_critical_section.set_content_2_widget_states_month();

                                widget_textarea_t1_day_.set_content(
                                    lc_s_emptystring + prc_.content_.i_day);
                                //x.i_hour=prc_.content_.i_hour;
                                //x.i_minute=prc_.content_.i_minute;
                                //x.i_second=prc_.content_.i_second;

                                //self_public_.private_code_.usable_only_in_critical_section.update_day_buttons_clickability();
                                self_public_.calendarhacknamespace.update_day_buttons_clickability();
                                b_content_2_widgets_states_in_progress_ = false;
                            });
                        break;
                    default:
                        if (raudrohi_settings_debug_JavaScript) {
                            throw raudrohi.tmg(
                                '4711c121-a7ae-4c58-9340-33d0c0505dd7',
                                'There\'s no branching for s_display_format_(==' +
                                s_display_format_ + ').');
                        } // if
                } // switch
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('451e7630-3e25-499f-a140-33d0c0505dd7', err);
            } // catch
        } // content_2_widgets_states

        // If the month or year is changed, the number of
        // days in the month gets changed and the uppr bound can
        // decrease, which can leave the day to be "out of bounds".
        prc_.usable_only_in_critical_section.enforce_day_bounds = function () {
            try {
                i_number_of_days_in_the_selected_month_ = 0 +
                                                          raudrohi.date_and_time.number_of_days_in_a_month(
                                                              prc_.content_.i_month,
                                                              prc_.content_.i_year);
                if (i_number_of_days_in_the_selected_month_ <
                    prc_.content_.i_day) {
                    prc_.content_.i_day =
                    i_number_of_days_in_the_selected_month_;
                } // if
            } catch (err) {
                raudrohi.tmg('ee5c9552-b859-4902-9230-33d0c0505dd7', err);
            } // catch
        } // prc_.usable_only_in_critical_section.enforce_day_bounds


        prc_.usable_only_in_critical_section.year_change_evh_common =
        function () {
            try {
                prc_.usable_only_in_critical_section.enforce_day_bounds();
                prc_.content_.s_most_precise_format = lc_s_human_perceivable;
                prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                widget_textarea_t1_year_.set_content(
                    lc_s_emptystring + prc_.content_.i_year);
            } catch (err) {
                raudrohi.tmg('4a5c442e-cd9a-4e32-b530-33d0c0505dd7', err);
            } // catch
        } // prc_.usable_only_in_critical_section.year_change_evh_common

        function evh_decrement_year() {
            try {
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        prc_.content_.i_year = prc_.content_.i_year - 1;
                        prc_.usable_only_in_critical_section.year_change_evh_common();
                        i_number_of_days_in_the_selected_month_ =
                        raudrohi.date_and_time.number_of_days_in_a_month(
                            prc_.content_.i_month, prc_.content_.i_year);
                    });
                content_2_widgets_states();
            } catch (err) {
                raudrohi.tmg('71e88b13-88a8-4c9f-9320-33d0c0505dd7', err);
            } // catch
        } // evh_decrement_year

        function evh_increment_year() {
            try {
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        prc_.content_.i_year = prc_.content_.i_year + 1;
                        prc_.usable_only_in_critical_section.year_change_evh_common();
                        i_number_of_days_in_the_selected_month_ =
                        raudrohi.date_and_time.number_of_days_in_a_month(
                            prc_.content_.i_month, prc_.content_.i_year);
                    });
                content_2_widgets_states();
            } catch (err) {
                raudrohi.tmg('11caec5b-5e5f-4158-a420-33d0c0505dd7', err);
            } // catch
        } // evh_increment_year

        function evh_month_selected(mi) {
            try {
                if (b_content_2_widgets_states_in_progress_ === true) {
                    return;
                } // if
                var i_month = null;
                prc_.critical_section_rw(lc_s_content,
                    function () {
                        i_month = parseInt(lc_s_emptystring + mi.s_label1);
                        if (raudrohi_settings_debug_JavaScript === true) {
                            if (i_month < 1) {
                                raudrohi.tmg('43c8ffdf-55af-444a-b220-33d0c0505dd7',
                                    "i_month==" + i_month + " < 1");
                            } // if
                            if (12 < i_month) {
                                raudrohi.tmg('57974b75-a57a-4ade-8110-33d0c0505dd7',
                                    "12 < i_month==" + i_month);
                            } // if
                        } // if
                    }, function () {
                        prc_.content_.i_month = i_month;
                        prc_.usable_only_in_critical_section.enforce_day_bounds();
                        prc_.content_.s_most_precise_format =
                        lc_s_human_perceivable;
                        prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                    });
                content_2_widgets_states();
            } catch (err) {
                raudrohi.tmg('9744a34c-8150-4e20-a410-33d0c0505dd7', err);
            } // catch
        } // evh_month_selected

        function evh_increment_day() {
            try {
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        if (prc_.content_.i_day <
                            i_number_of_days_in_the_selected_month_) {
                            prc_.content_.i_day = prc_.content_.i_day + 1;
                            prc_.content_.s_most_precise_format =
                            lc_s_human_perceivable;
                            prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                        } // if
                    });
                content_2_widgets_states();
            } catch (err) {
                raudrohi.tmg('2c2b6fc1-8c24-4e00-9e10-33d0c0505dd7', err);
            } // catch
        } // evh_increment_day

        function evh_decrement_day() {
            try {
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        if (1 < prc_.content_.i_day) {
                            prc_.content_.i_day = prc_.content_.i_day - 1;
                            prc_.content_.s_most_precise_format =
                            lc_s_human_perceivable;
                            prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                        } // if
                    });
                content_2_widgets_states();
            } catch (err) {
                raudrohi.tmg('b47223ba-108a-44dc-8200-33d0c0505dd7', err);
            } // catch
        } // evh_decrement_day

        function evh_increment_day_10x() {
            try {
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        var i_wouldbe = prc_.content_.i_day + 10;
                        if (i_wouldbe <=
                            i_number_of_days_in_the_selected_month_) {
                            prc_.content_.i_day = i_wouldbe;
                            prc_.content_.s_most_precise_format =
                            lc_s_human_perceivable;
                            prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                        } // if
                    });
                content_2_widgets_states();
            } catch (err) {
                raudrohi.tmg('a7427550-d98f-4b9b-a200-33d0c0505dd7', err);
            } // catch
        } // evh_increment_day_10x

        function evh_decrement_day_10x() {
            try {
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        var i_wouldbe = prc_.content_.i_day - 10;
                        if (1 <= i_wouldbe) {
                            prc_.content_.i_day = i_wouldbe;
                            prc_.content_.s_most_precise_format =
                            lc_s_human_perceivable;
                            prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                        } // if
                    });
                content_2_widgets_states();
            } catch (err) {
                raudrohi.tmg('1405057f-cc0d-4548-9300-33d0c0505dd7', err);
            } // catch
        } // evh_decrement_day_10x


        this.set_content = function (ht_timestamp) {
            try {
                if (ht_timestamp === null) {
                    self_public_.clear_content();
                    return;
                } // if
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.date_and_time.timestamp_is_contradictory(
                        ht_timestamp, true);
                } // if
                var ht_tmp_human = null;
                prc_.critical_section_rw(lc_s_content,
                    function () {
                        ht_tmp_human =
                        raudrohi.date_and_time.unix_time_2_human_perceivable(
                            ht_timestamp);
                    }, function () {
                        prc_.content_.i_year = parseInt(lc_s_emptystring +
                                                        ht_tmp_human.get('year'));
                        prc_.content_.i_month = parseInt(lc_s_emptystring +
                                                         ht_tmp_human.get('month'));
                        prc_.content_.i_day = parseInt(lc_s_emptystring +
                                                       ht_tmp_human.get('day'));
                        prc_.content_.i_hour = parseInt(lc_s_emptystring +
                                                        ht_tmp_human.get('hour'));
                        prc_.content_.i_minute = parseInt(lc_s_emptystring +
                                                          ht_tmp_human.get('minute'));
                        prc_.content_.i_second = parseInt(lc_s_emptystring +
                                                          ht_tmp_human.get('second'));
                        var s_ht_ts_s_format = ht_timestamp.get("s_format");
                        prc_.content_.s_most_precise_format = s_ht_ts_s_format;
                        if (s_ht_ts_s_format === lc_s_unix_time) {
                            prc_.content_.i_unix_time =
                            parseInt(lc_s_emptystring +
                                     ht_timestamp.get(lc_s_unix_time));
                        } else {
                            if (s_ht_ts_s_format === lc_s_human_perceivable) {
                                prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                            } else {
                                raudrohi.tmg('acded714-919d-466f-b1ff-33d0c0505dd7',
                                    "Something is wrong. s_format==\"" +
                                    s_ht_ts_s_format + "\".");
                            } // else
                        } // else
                    }); // critical_section_rw
                content_2_widgets_states();
                prc_.content_set_ = true;
                raudrohi.base.pool_of_hashtables.return_used_hashtable(
                    ht_tmp_human);
            } catch (err) {
                raudrohi.tmg('294f3d56-1869-437f-b3ff-33d0c0505dd7', err);
            } // catch
        } // set_content

        this.clear_content = function () {
            try {
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        prc_.content_set_ = false;
                    }); // critical_section_rw
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('5e7c6862-9a98-4264-b1ef-33d0c0505dd7', err);
            } // catch
        } // clear_content

        prc_.usable_only_in_critical_section.content_2_ht_timestamp_raw =
        function () {
            try {
                var ht_timestamp = raudrohi.base.pool_of_hashtables.get_empty_hashtable();
                ht_timestamp.put('year',
                    lc_s_emptystring + prc_.content_.i_year);
                ht_timestamp.put('month',
                    lc_s_emptystring + prc_.content_.i_month);
                ht_timestamp.put('day', lc_s_emptystring + prc_.content_.i_day);
                ht_timestamp.put('hour',
                    lc_s_emptystring + prc_.content_.i_hour);
                ht_timestamp.put('minute',
                    lc_s_emptystring + prc_.content_.i_minute);
                ht_timestamp.put('second',
                    lc_s_emptystring + prc_.content_.i_second);
                ht_timestamp.put("s_format", lc_s_emptystring +
                                             prc_.content_.s_most_precise_format);
                ht_timestamp.put(lc_s_unix_time, lc_s_emptystring +
                                                 prc_.content_.i_unix_time);
                return ht_timestamp;
            } catch (err) {
                raudrohi.tmg('5338701c-3f66-464f-94ef-33d0c0505dd7', err);
            } // catch
        } // prc_.usable_only_in_critical_section.content_2_ht_timestamp_raw

        // It is meant to be within a critical section with
        // mutex called "content".
        prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time =
        function () {
            try {
                var ht_timestamp_h2uxt_9234Xf = prc_.usable_only_in_critical_section.content_2_ht_timestamp_raw();
                ht_timestamp_h2uxt_9234Xf =
                raudrohi.date_and_time.human_perceivable_2_unix_time(
                    ht_timestamp_h2uxt_9234Xf);
                prc_.content_.i_unix_time = parseInt(
                    ht_timestamp_h2uxt_9234Xf.get(lc_s_unix_time));
                raudrohi.base.pool_of_hashtables.return_used_hashtable(
                    ht_timestamp_h2uxt_9234Xf);
            } catch (err) {
                raudrohi.tmg('bce98d45-2a48-4e1d-91ef-33d0c0505dd7', err);
            } // catch
        } // prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time

        // var ob_date=new Date(...);
        function set_content_by_JavaScript_Date_instance(ob_date) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ob_date, 'ob_date',
                        'eca23014-56ca-4db0-b4df-33d0c0505dd7');
                } // if
                var dt = ob_date
                prc_.critical_section_rw(lc_s_content,
                    function () {
                    }, function () {
                        prc_.content_.i_year = dt.getFullYear();
                        // The month parameter to Date.UTC() is 0-indexed;
                        // January is 0, February is 1, etc. Same applies for the
                        // output of the Date.getMonth().
                        prc_.content_.i_month = dt.getMonth() + 1;
                        prc_.content_.i_day = dt.getDate();
                        prc_.content_.i_hour = dt.getHours();
                        prc_.content_.i_minute = dt.getMinutes();
                        prc_.content_.i_second = dt.getSeconds();
                        prc_.content_.s_most_precise_format =
                        lc_s_human_perceivable;
                        prc_.content_.i_unix_time = 0;
                        prc_.usable_only_in_critical_section.update_content_human_perceivable_2_unix_time();
                        i_number_of_days_in_the_selected_month_ = 0 +
                                                                  raudrohi.date_and_time.number_of_days_in_a_month(
                                                                      prc_.content_.i_month,
                                                                      prc_.content_.i_year);
                    }); // critical_section_rw
                content_2_widgets_states();
                prc_.content_set_ = true;
            } catch (err) {
                raudrohi.tmg('76d0ee5f-0a1d-4c8d-a4df-33d0c0505dd7', err);
            } // catch
        } // set_content_by_JavaScript_Date_instance

        this.set_content_by_unix_time = function (s_unix_time_in_seconds) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isString(s_unix_time_in_seconds,
                        's_unix_time_in_seconds',
                        'ab52d144-573e-460b-84df-33d0c0505dd7');
                } // if
                var i_unix_time = parseInt(lc_s_emptystring +
                                           s_unix_time_in_seconds);
                var i_milliseconds = i_unix_time * 1000;
                var dt = new Date(i_milliseconds);
                set_content_by_JavaScript_Date_instance(dt);
            } catch (err) {
                raudrohi.tmg('8eb11420-cf81-4fb4-b1df-33d0c0505dd7', err);
            } // catch
        } // set_content_by_unix_time

        this.set_content_by_date = function (i_day, i_month, i_year) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(i_day, 'i_day',
                        '35dc97e8-80f8-4429-b2cf-33d0c0505dd7');
                    raudrohi.base.assert_isNumber(i_month, 'i_month',
                        '0511141e-a906-492e-95cf-33d0c0505dd7');
                    raudrohi.base.assert_isNumber(i_year, 'i_year',
                        '71c5d538-59c4-4343-b3cf-33d0c0505dd7');
                } // if
                // One relies on garbage collection with the next line. :-)
                var b_throw_if_contradiction_found = true;
                raudrohi.date_and_time.date_is_contradictory(
                    i_day, i_month, i_year, b_throw_if_contradiction_found);
                // The month parameter of the JavaScript
                // Date class is 0-indexed; January is 0, February is 1, etc.
                var i_month_corrected = i_month - 1;
                var i_hour = 0;
                var i_minute = 0;
                var i_second = 0;
                var i_millisecond = 0;
                var dt = new Date(i_year, i_month_corrected,
                    i_day, i_hour, i_minute, i_second, i_millisecond);
                set_content_by_JavaScript_Date_instance(dt);
            } catch (err) {
                raudrohi.tmg('7a13de44-7f15-42df-a4bf-33d0c0505dd7', err);
            } // catch
        } // set_content_by_date

        this.set_content_2_now = function () {
            try {
                var dt = new Date();
                set_content_by_JavaScript_Date_instance(dt);
            } catch (err) {
                raudrohi.tmg('1ff8022c-9cc6-4e54-93bf-33d0c0505dd7', err);
            } // catch
        } // set_content_2_now

        prc_.customizable.optional.startup_hook = function () {
            try {
                self_public_.set_content_2_now();
            } catch (err) {
                raudrohi.tmg('19d31c51-71d7-472e-84bf-33d0c0505dd7', err);
            } // catch
        } // prc_.customizable.optional.startup_hook

        // Returns null, if the content is not set.
        this.get_content = function () {
            try {
                var ht_timestamp = null;
                prc_.critical_section_r(lc_s_content,
                    function () {
                    }, function () {
                        if (prc_.content_set_ === true) {
                            ht_timestamp =
                            prc_.usable_only_in_critical_section.content_2_ht_timestamp_raw();
                        } // if
                    }); // critical_section_r
                return ht_timestamp;
            } catch (err) {
                raudrohi.tmg('2e2c8b83-b02b-482d-83bf-33d0c0505dd7', err);
            } // catch
        } // get_content

        // Returns a string representation of the
        // unix_time or null, if the content is not set.
        this.get_content_unix_time = function () {
            try {
                var s_out = null;
                prc_.critical_section_r(lc_s_content,
                    function () {
                    }, function () {
                        if (prc_.content_set_ === true) {
                            s_out =
                            lc_s_emptystring + prc_.content_.i_unix_time;
                        } // if
                    }); // critical_section_r
                return s_out;
            } catch (err) {
                raudrohi.tmg('2cb57133-167b-46b5-b3af-33d0c0505dd7', err);
            } // catch
        } // get_content

        this.get_content_2_collection_t1 = function (ht) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht, 'ht',
                        '0579321d-a76a-4b9f-83af-33d0c0505dd7');
                } // if
                var s_unix_time = self_public_.get_content_unix_time();
                if (s_unix_time === null) { //== <field not set>
                    s_unix_time = "";
                } // if
                raudrohi.wg_processing_t1.dbfcreate_s_t1(ht,
                    "i_" + self_public_.s_field_name_in_parent + "_unix_time",
                    s_unix_time, false);
            } catch (err) {
                raudrohi.tmg('d1b6f77c-2c73-47e1-93af-33d0c0505dd7', err);
            } // catch
        } // get_content_2_collection_t1

        this.set_content_from_collection_t1 = function (ht) {
            try {
                var s_key_subfield_set = "dbf_sb_i_" +
                                         self_public_.s_field_name_in_parent +
                                         "_unix_time_set";
                var s_key_field = "dbf_i_" +
                                  self_public_.s_field_name_in_parent +
                                  "_unix_time";

                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht, 'ht',
                        '2dad35a1-b87b-4c0b-839f-33d0c0505dd7');
                    if (ht.containsKey(s_key_subfield_set) !== true) {
                        raudrohi.tmg('93675719-0792-4cb1-b49f-33d0c0505dd7',
                            'The ht does not contain the key "' +
                            s_key_subfield_set + '".');
                    } // if
                    if (ht.containsKey(s_key_field) !== true) {
                        raudrohi.tmg('9d3e59a1-32cd-4a14-939f-33d0c0505dd7',
                            'The ht does not contain the key "' +
                            s_key_field + '".');
                    } // if
                } // if
                if (ht.get(s_key_subfield_set) === 'f') {
                    self_public_.clear_content();
                    return;
                } // if
                var s_unix_time = ht.get(s_key_field);
                self_public_.set_content_by_unix_time(s_unix_time);
            } catch (err) {
                raudrohi.tmg('967acc55-cb2e-436b-859f-33d0c0505dd7', err);
            } // catch
        } // set_content_from_collection_t1

        self_public_.startup_sequence_init();
    } catch (err) {
        raudrohi.tmg('190b8c29-40c1-4deb-a18f-33d0c0505dd7', err);
    } // catch
} // raudrohi.widgets.g1.calendar_t2
//=========================================================================

raudrohi.widgets.g1.optionaldate_t1 =
function (s_html_id, parent_instance, s_menuitem_text_if_date_is_not_set,
    s_menuitem_text_if_date_is_set, s_display_format, s_language, s_mode) {
    try {
        s_display_format = typeof(s_display_format) !==
                           'undefined' ? s_display_format : 'DD/MM/YY';
        s_language = typeof(s_language) !== 'undefined' ? s_language : 'uk';
        s_mode = typeof(s_mode) !== 'undefined' ? s_mode : 'vertical_1';

        var s_display_format_ = s_display_format;
        var s_language_ = s_language;
        var s_menuitem_text_if_date_is_not_set_ = s_menuitem_text_if_date_is_not_set;
        var s_menuitem_text_if_date_is_set_ = s_menuitem_text_if_date_is_set;
        var s_mode_ = s_mode;

        // RENESSAATOR_BLOCK_START
// RENESSAATOR_BLOCK_ID=block_1
// RENESSAATOR_SOURCE_LANGUAGE=Ruby
// RENESSAATOR_SOURCE_START
// RAUDROHI_HOME=ENV['RAUDROHI_HOME']
// require(RAUDROHI_HOME+"/src/dev_tools/code_generation/raudrohi_cg0.rb")
// require(RAUDROHI_CODE_GENERATION+"/by_file/raudrohi_js_widgets_optionaldate_t1_block_1.rb")
// RENESSAATOR_SOURCE_END
//
// RENESSAATOR_AUTOGENERATED_TEXT_START
    if(raudrohi_settings_debug_JavaScript===true){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_debug_verification 
            raudrohi.base.assert_is_HTML_ID(s_html_id,'s_html_id',
                'f29b2c40-8327-4d6c-b209-703371705dd7');
raudrohi.base.assert_is_g1_widget(parent_instance,'parent_instance',
                'c028e62f-2a34-4446-8209-703371705dd7');
raudrohi.base.assert_isString(s_mode,'s_mode',
                '64909e59-4655-4167-9109-703371705dd7');
raudrohi.base.assert_isString(s_display_format,'s_display_format',
                '2590ac95-4317-44f7-b509-703371705dd7');
raudrohi.base.assert_isString(s_language,'s_language',
                '36617c43-df22-4e59-a619-703371705dd7');

    } // if

    if(raudrohi_settings_debug_JavaScript===true){
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_debug_verification 
            raudrohi.base.assert_is_HTML_ID(s_html_id,'s_html_id',
                '39af9085-64c0-4c30-b519-703371705dd7');
raudrohi.base.assert_is_g1_widget(parent_instance,'parent_instance',
                'c3f08b54-5696-4910-8119-703371705dd7');

    } // if
     //---widget--boilerplate_1_--start--
        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget 
		var self_public_=this;
		var pileofmethods_t1_=new raudrohi.widgets.g1.pileofmethods_t1(
                 self_public_,'raudrohi.widgets.g1.optionaldate_t1',
                 s_html_id);
		var prc_=self_public_.private_code_;
		var wg_hooks_=self_public_.wg_hooks_;
     //---widget--boilerplate_1_--end----


prc_.parent_instance_=parent_instance;

var widget_calendar_t1_datewg_=null;
var id_calendar_t1_datewg_=prc_.html_id_+'_calendar_t1_datewg';
var widget_partialmenu_t1_date_set_=null;
var id_partialmenu_t1_date_set_=prc_.html_id_+'_partialmenu_t1_date_set';



   		function create_widgets_autogen( ){
				        // WARNING: This function resides in an autogeneration region.
        // This code has been autogenerated by: Raudrohi_cg_widget 
			try{
				widget_calendar_t1_datewg_=new raudrohi.widgets.g1.calendar_t1(id_calendar_t1_datewg_,
self_public_,s_display_format_,s_language_);
widget_calendar_t1_datewg_.s_field_name_in_parent='datewg';
prc_.register_subwidget(
widget_calendar_t1_datewg_,'hidden');

widget_partialmenu_t1_date_set_=new
        raudrohi.widgets.g1.partialmenu_t1(
                id_partialmenu_t1_date_set_,self_public_,
                i_menu_max_width_,5,1,
                'There is a bug, menu content not set.',
                'partialmenu_t1_mode_1','partialmenu_t1_containertype_vertical_1');
widget_partialmenu_t1_date_set_.s_field_name_in_parent='date_set';
prc_.register_subwidget(
        widget_partialmenu_t1_date_set_,'visible');

var ar_autogenerated_tmpvar_a4533d3f_0e5f_4771_9539_703371705dd7=[];
var x_autogenerated_tmpvar_6d92c639_1656_4dba_a139_703371705dd7;
x_autogenerated_tmpvar_6d92c639_1656_4dba_a139_703371705dd7={};
x_autogenerated_tmpvar_6d92c639_1656_4dba_a139_703371705dd7.s_label1='f';
x_autogenerated_tmpvar_6d92c639_1656_4dba_a139_703371705dd7.s_label2=s_menuitem_text_if_date_is_not_set_;
ar_autogenerated_tmpvar_a4533d3f_0e5f_4771_9539_703371705dd7.push(x_autogenerated_tmpvar_6d92c639_1656_4dba_a139_703371705dd7);
x_autogenerated_tmpvar_6d92c639_1656_4dba_a139_703371705dd7={};
x_autogenerated_tmpvar_6d92c639_1656_4dba_a139_703371705dd7.s_label1='t';
x_autogenerated_tmpvar_6d92c639_1656_4dba_a139_703371705dd7.s_label2=s_menuitem_text_if_date_is_set_;
ar_autogenerated_tmpvar_a4533d3f_0e5f_4771_9539_703371705dd7.push(x_autogenerated_tmpvar_6d92c639_1656_4dba_a139_703371705dd7);

widget_partialmenu_t1_date_set_.set_menu_content(ar_autogenerated_tmpvar_a4533d3f_0e5f_4771_9539_703371705dd7)
widget_partialmenu_t1_date_set_.set_default_value_for_the_menu('f');
			} catch(err){
				raudrohi.tmg('16b0ed83-1ae7-4d98-b449-703371705dd7',err);
			} // catch
		} // create_widgets_autogen


// RENESSAATOR_AUTOGENERATED_TEXT_END
// RENESSAATOR_BLOCK_END

        var lc_s_content = "content";
        var i_menu_max_width_ = s_menuitem_text_if_date_is_not_set_.length;
        if (i_menu_max_width_ < s_menuitem_text_if_date_is_set_.length) {
            i_menu_max_width_ = s_menuitem_text_if_date_is_set_.length;
        } // if

        if (raudrohi_settings_debug_JavaScript === true) {
            switch (s_mode_) {
                case 'vertical_1':
                    break;
                case 'horizontal_1':
                    break;
                default:
                    if (raudrohi_settings_debug_JavaScript) {
                        throw raudrohi.tmg(
                            '9d6f5710-eda4-4368-8509-211350705dd7',
                            'There\'s no branching for s_mode_(==' +
                            s_mode_ + ').');
                    } // if
            } // switch
        } // if

        prc_.content_ = {};
        prc_.content_.b_date_determined = false;
        prc_.content_.s_date_unix_time = "1";

        var ht_containers_html_cache_ = new Hashtable();

        function create_containers() {
            try {
                var s_containers = null;
                if (prc_.containers_html_cached_ !== true) {
                    var s = null;

                    // raudrohi_positioning_table, raudrohi_visible_table
                    var ar_class_names = ["raudrohi_positioning_table"];

                    s = '' +
                        '<tr>' + "\n" + '<td id="' +
                        id_partialmenu_t1_date_set_ +
                        '_div"></td>' + "\n" + '<tr>' + "\n" +
                        '<tr>' + "\n" + '<td id="' + id_calendar_t1_datewg_ +
                        '_div"></td>' + "\n" + '<tr>' + "\n" +
                        '';
                    s_containers = prc_.selfread.wrap_2_alignment_div(
                        raudrohi.lang.cg_table_t1(s, ar_class_names));
                    ht_containers_html_cache_.put("vertical_1", s_containers);

                    s = '' +
                        '<tr><td id="' + id_partialmenu_t1_date_set_ +
                        '_div"></td>' +
                        '<td id="' + id_calendar_t1_datewg_ +
                        '_div"></td><tr>' + "\n" +
                        '';
                    s_containers = prc_.selfread.wrap_2_alignment_div(
                        raudrohi.lang.cg_table_t1(s, ar_class_names));
                    ht_containers_html_cache_.put("horizontal_1", s_containers);

                    prc_.containers_html_cached_ = true;
                } // if
                s_containers = ht_containers_html_cache_.get(s_mode_);
                raudrohi.base.set_innerHTML(prc_.container_id_, s_containers);
            } catch (err) {
                raudrohi.tmg('940aa44e-054a-4e47-a309-211350705dd7',
                    "s_mode_==" + s_mode + "  " + err);
            } // catch
        } // create_containers

        function update_calendar_widget_visibility() {
            try {
                if (prc_.content_.b_date_determined === true) {
                    prc_.mark_elemwidget_to_be_unhidden(
                        widget_calendar_t1_datewg_);
                } else {
                    prc_.mark_elemwidget_to_be_hidden(
                        widget_calendar_t1_datewg_, true);
                } // else
            } catch (err) {
                raudrohi.tmg('52098061-6424-45ad-ba09-211350705dd7', err);
            } // catch
        } // update_calendar_widget_visibility


        prc_.customizable.compulsory.render_editable = function () {
            try {
                create_containers();
                prc_.mark_elemwidget_to_be_unhidden(
                    widget_partialmenu_t1_date_set_);
                update_calendar_widget_visibility();
            } catch (err) {
                raudrohi.tmg('7114c554-3199-4098-8409-211350705dd7', err);
            } // catch
        } // prc_.customizable.compulsory.render_editable

        prc_.customizable.compulsory.render_readonly = function () {
            try {
                create_containers();
                if (prc_.content_.b_date_determined === true) {
                    prc_.mark_elemwidget_to_be_hidden(
                        widget_partialmenu_t1_date_set_, true);
                } else {
                    prc_.mark_elemwidget_to_be_unhidden(
                        widget_partialmenu_t1_date_set_);
                } // else
                update_calendar_widget_visibility();
            } catch (err) {
                raudrohi.tmg('2e8af853-2866-4758-9309-211350705dd7', err);
            } // catch
        } // prc_.customizable.compulsory.render_readonly

        function evh_optionaldate_t1_menuselection(mi) {
            try {
                if (mi.s_label1 === 't') {
                    if (prc_.content_.b_date_determined === true) {
                        return;
                    } // if
                    prc_.content_.b_date_determined = true;
                } else {
                    if (prc_.content_.b_date_determined === false) {
                        return;
                    } // if
                    prc_.content_.b_date_determined = false;
                } // else
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('94b5cdf4-93f2-40c5-a109-211350705dd7', err);
            } // catch
        } // evh_optionaldate_t1_menuselection


        prc_.customizable.optional.create_subwidgets = function () {
            try {
                create_widgets_autogen();
                widget_partialmenu_t1_date_set_.private_code_.customizable.optional.evh_selection_impl =
                evh_optionaldate_t1_menuselection;
                self_public_.set_content_2_default();
            } catch (err) {
                raudrohi.tmg('74a2a337-bfce-4f13-9509-211350705dd7', err);
            } // catch
        } // create_widgets

        // A state, where the date is not determined, is
        // actually one of the this widget's content values.
        // So, even, if the date is not determined, the content
        // of this widget is still set.
        function set_state_to_date_not_determined() {
            try {
                prc_.content_.b_date_determined = false;
                widget_partialmenu_t1_date_set_.set_content_by_s_label1('f');
                prc_.repaint_if_graphical_and_not_hidden();
                widget_calendar_t1_datewg_.set_content_2_now();
            } catch (err) {
                raudrohi.tmg('e2219743-fae7-4501-a4f8-211350705dd7', err);
            } // catch
        } // set_state_to_date_not_determined

        // The content of this widget is always set.
        this.set_content_2_default = function () {
            try {
                set_state_to_date_not_determined();
                prc_.content_set_ = true;
            } catch (err) {
                raudrohi.tmg('89f15c29-4737-4a8a-81f8-211350705dd7', err);
            } // catch
        } // set_content_2_default

        // Returns null or a string that represents
        // unix time in seconds.
        this.get_content = function () {
            try {
                var x_out = null;
                if (prc_.content_.b_date_determined === true) {
                    x_out = widget_calendar_t1_datewg_.get_content_unix_time();
                } // if
                return x_out;
            } catch (err) {
                raudrohi.tmg('5f36da10-3df6-498b-b2f8-211350705dd7', err);
            } // catch
        } // get_content

        this.set_content = function (s_unix_time_in_seconds_or_null) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    if (s_unix_time_in_seconds_or_null !== null) {
                        raudrohi.base.assert_isString(
                            s_unix_time_in_seconds_or_null,
                            's_unix_time_in_seconds_or_null',
                            'cdfcf23f-2e81-4f35-94f8-211350705dd7');
                    } // if
                } // if
                if (s_unix_time_in_seconds_or_null === null) {
                    set_state_to_date_not_determined();
                } else {
                    prc_.content_.b_date_determined = true;
                    widget_partialmenu_t1_date_set_.set_content_by_s_label1('t');
                    widget_calendar_t1_datewg_.set_content_by_unix_time(
                        s_unix_time_in_seconds_or_null);
                } // else
                prc_.repaint_if_graphical_and_not_hidden();
            } catch (err) {
                raudrohi.tmg('353e851b-58e4-4250-82f8-211350705dd7', err);
            } // catch
        } // set_content


        this.get_content_2_collection_t1 = function (ht) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht, 'ht',
                        'a5403215-ccbd-4a43-91f8-211350705dd7');
                } // if
                var s_unix_time = self_public_.get_content();
                if (s_unix_time === null) { //== <field not set>
                    s_unix_time = "";
                } // if
                raudrohi.wg_processing_t1.dbfcreate_s_t1(ht,
                    "i_" + self_public_.s_field_name_in_parent + "_unix_time",
                    s_unix_time, false);
            } catch (err) {
                raudrohi.tmg('61b5313a-8bd6-4523-95f8-211350705dd7', err);
            } // catch
        } // get_content_2_collection_t1

        this.set_content_from_collection_t1 = function (ht) {
            try {
                var s_key_subfield_set = "dbf_sb_i_" +
                                         self_public_.s_field_name_in_parent +
                                         "_unix_time_set";
                var s_key_field = "dbf_i_" +
                                  self_public_.s_field_name_in_parent +
                                  "_unix_time";

                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isObject(ht, 'ht',
                        'cc1b2b41-4929-48b7-b4f8-211350705dd7');
                    if (ht.containsKey(s_key_subfield_set) !== true) {
                        raudrohi.tmg('bb023341-766c-4567-a1f8-211350705dd7',
                            'The ht does not contain the key "' +
                            s_key_subfield_set + '".');
                    } // if
                    if (ht.containsKey(s_key_field) !== true) {
                        raudrohi.tmg('f1b0c1f9-e0d8-4079-a5f8-211350705dd7',
                            'The ht does not contain the key "' +
                            s_key_field + '".');
                    } // if
                } // if
                var s_unix_time = null;
                if (ht.get(s_key_subfield_set) === 't') {
                    s_unix_time = ht.get(s_key_field);
                } // if
                self_public_.set_content(s_unix_time);
            } catch (err) {
                raudrohi.tmg('7843381a-98f5-406a-95e8-211350705dd7', err);
            } // catch
        } // set_content_from_collection_t1


        self_public_.startup_sequence_init();

    } catch (err) {
        raudrohi.tmg('05457150-75f8-4670-83e8-211350705dd7', err);
    } // catch
} // raudrohi.widgets.g1.optionaldate_t1

//------------------------------------------------------------------------
//=========================================================================

// Compartments are addressed like pixels at a computer screen.
// Address of the leftmost and topmost compartment is (0,0).
raudrohi.widgets.g1.matrix_t1 =
function (s_html_id, initial_width, initial_height) {
    try {
        var self_public_ = this;

        var pileofmethods_t1_ = new raudrohi.widgets.g1.pileofmethods_t1(
            self_public_, 'raudrohi.widgets.g1.matrix_t1_', s_html_id);
        var prc_ = self_public_.private_code_;
        if (raudrohi_settings_debug_JavaScript === true) {
            raudrohi.base.assert_is_HTML_ID(s_html_id, 's_html_id',
                'a8cad14e-bd44-4d19-b16d-f02350705dd7');
            raudrohi.base.assert_isNumber(initial_width, 'initial_width',
                '10493614-71a3-4308-a26d-f02350705dd7');
            raudrohi.base.assert_isNumber(initial_height, 'initial_height',
                '48338441-aa85-404c-a26d-f02350705dd7');
            if (initial_width < 1) {
                raudrohi.tmg('55c28639-8ea7-44c5-a26d-f02350705dd7',
                    'initial_width==' + initial_width + ' < 1');
            } // if
            if (initial_height < 1) {
                raudrohi.tmg('af380030-d81c-4293-a26d-f02350705dd7',
                    'initial_height==' + initial_height + ' < 1');
            } // if
        } // if

        var width_ = initial_width;
        this.get_width = function () {
            return width_;
        } // get_width

        var height_ = initial_height;
        this.get_height = function () {
            return height_;
        } // get_height

        prc_.content_set_ = false;

        // Returns a compartment ID regardless of whether the
        // compartment with coordinates (x,y) actually even exist.
        this.get_compartment_id = function (x, y) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(x, 'x',
                        '8293954c-c03b-4cea-926d-f02350705dd7');
                    raudrohi.base.assert_isNumber(y, 'y',
                        'a9b3bc3b-aff6-4857-946d-f02350705dd7');
                } // if
                var s_id = '_x' + x + '_y' + y + '_' +
                           self_public_.phone.get_phone_number();
                return s_id;
            } catch (err) {
                raudrohi.tmg('4e2b2152-fa07-4449-a36d-f02350705dd7', err);
            } // catch
        } // get_compartment_id

        function create_containers_row(row_width, y) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(y, 'y',
                        '93a68e9d-98a8-487e-b26d-f02350705dd7');
                    raudrohi.base.assert_isNumber(row_width, 'row_width',
                        '44af76b8-0895-4b98-a25d-f02350705dd7');
                } // if
                var s_html = "\n<tr>\n";
                var i = 0;
                for (i = 0; i < row_width; i++) {
                    s_html = s_html +
                             '<td class="raudrohi_visible_table_cells"><div id="' +
                             self_public_.get_compartment_id(i, y) +
                             "\"></div></td>\n";
                } // for
                s_html = s_html + "</tr>\n"
                return s_html;
            } catch (err) {
                raudrohi.tmg('23c75959-f4b3-41bc-b45d-f02350705dd7', err);
            } // catch
        } // create_containers_row

        function create_containers_generate_html() {
            try {
                var s_html = '' +
                             "\n<center>\n" +
                             '<table class="raudrohi_visible_table ' +
                             'angervaks_menu_item_font_shape"> ' +
                             '<tbody>';
                var y = 0;
                for (y = 0; y < height_; y++) {
                    s_html = s_html + create_containers_row(width_, y);
                } // for
                s_html = s_html +
                         '</tbody></table>' +
                         "\n</center>\n";
                return s_html;
            } catch (err) {
                raudrohi.tmg('38112301-eee7-4b52-8d5d-f02350705dd7', err);
            } // catch
        } // create_containers_generate_html

        function create_containers() {
            try {
                while (prc_.containers_html_cached_ !== true) {
                    // It's a "while" in stead of "if" because
                    // the set_dimensions() might be called while
                    // the  create_containers_generate_html is executing.
                    prc_.containers_html_cache_ =
                    create_containers_generate_html();
                    prc_.containers_html_cached_ = true;
                } // while
                raudrohi.base.set_innerHTML(prc_.container_id_,
                    prc_.containers_html_cache_);
                raudrohi.adapter.log('kala matrix');
            } catch (err) {
                raudrohi.tmg('ad75021e-ee71-4eaf-b25d-f02350705dd7', err);
            } // catch
        } // create_containers

        prc_.customizable.compulsory.render_editable = function () {
            try {
                create_containers();
            } catch (err) {
                raudrohi.tmg('f5d40635-7aca-4aa4-a25d-f02350705dd7', err);
            } // catch
        } // render_editable

        prc_.customizable.compulsory.render_readonly =
        prc_.customizable.compulsory.render_editable;

        var ht_in_use_check_ = new Hashtable();

        // Compartment widgets are registered as subwidgets.
        // They all must have a method "reset_container_id".
        this.set_compartment_widget = function (a_widget, x, y) {
            try {
                var s;
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(x, 'x',
                        '3168bac5-6d87-4758-855d-f02350705dd7');
                    raudrohi.base.assert_isNumber(y, 'y',
                        '5f5b36a1-703c-4b37-b25d-f02350705dd7');
                    raudrohi.base.assert_isObject(a_widget, 'a_widget',
                        '89739a45-1e17-4b58-a25d-f02350705dd7');
                    if (x < 0) {
                        raudrohi.tmg('f1e6861d-a545-401c-a35d-f02350705dd7',
                            'x==' + x + ' < 0');
                    } // if
                    if (y < 0) {
                        raudrohi.tmg('ba79dc19-f560-4225-b45d-f02350705dd7',
                            'y==' + y + ' < 0');
                    } // if
                    if ((width_ - 1) < x) {
                        raudrohi.tmg('a965bc30-ec2c-4494-835d-f02350705dd7',
                            '(width_-1) < x');
                    } // if
                    if ((height_ - 1) < y) {
                        raudrohi.tmg('34a20623-b090-4696-814d-f02350705dd7',
                            '(height_-1) < y');
                    } // if
                    s = 'coords_' + x + '_' + y + '_';
                    if (ht_in_use_check_.containsKey(s) === true) {
                        raudrohi.tmg('1685dfd2-cdc3-4975-b14d-f02350705dd7',
                            'Coordinate (x==' + x + ',y==' + y +
                            ') is assinged ' +
                            'to more than one compartment widget.');
                    } // if
                    ht_in_use_check_.put(s, 42);
                } // if
                var new_html_id = self_public_.get_compartment_id(x, y);
                a_widget.reset_container_id(new_html_id);
                prc_.register_subwidget(a_widget, 'visible');
                prc_.content_set_ = true;
                if (self_public_.is_hidden() === false) {
                    self_public_.unhide();
                } // if
            } catch (err) {
                raudrohi.tmg('38d60321-7935-4596-a24d-f02350705dd7', err);
            } // catch
        } // set_compartment_widget

        this.clear_content = function () {
            try {
                if (prc_.content_set_ === false) {
                    return;
                } // if
                if (raudrohi_settings_debug_JavaScript === true) {
                    ht_in_use_check_.clear();
                } // if
                prc_.unregister_all_subwidgets();
                prc_.content_set_ = false;
                if (self_public_.is_hidden() === false) {
                    self_public_.unhide();
                } // if
            } catch (err) {
                raudrohi.tmg('80847041-6d6f-4089-834d-f02350705dd7', err);
            } // catch
        } // clear_content

        // Resetting dimensions also unregisters all widgets.
        this.reset_dimensions = function (width, height) {
            try {
                if (raudrohi_settings_debug_JavaScript === true) {
                    raudrohi.base.assert_isNumber(width, 'width',
                        '5415eb53-6453-4362-944d-f02350705dd7');
                    raudrohi.base.assert_isNumber(height, 'height',
                        'e9729333-192f-4eef-a54d-f02350705dd7');
                    if (width < 1) {
                        raudrohi.tmg('6c032855-a836-4320-b44d-f02350705dd7',
                            'width==' + width + ' < 1');
                    } // if
                    if (height < 1) {
                        raudrohi.tmg('cd2a5812-7d86-4143-924d-f02350705dd7',
                            'height==' + height + ' < 1');
                    } // if
                } // if
                self_public_.clear_content();
                width_ = width;
                height_ = height;
                prc_.containers_html_cached_ = false;
                if (self_public_.is_hidden() === false) {
                    self_public_.unhide();
                } // if
            } catch (err) {
                raudrohi.tmg('c4532a59-ab50-483b-a24d-f02350705dd7', err);
            } // catch
        } // reset_dimensions

        self_public_.startup_sequence_init();
    } catch (err) {
        raudrohi.tmg('d0a9d712-e958-41da-b34d-f02350705dd7', err);
    } // catch
} // raudrohi.widgets.g1.matrix_t1

//------------------------------------------------------------------------
//=========================================================================


// The raudrohi.widgets.g1.idcache downloads unused, "freshly generated",
// ids from server and caches them. It's a singleton.
raudrohi.widgets.g1.idcache = function() {
	try {
		var self_public_ = this;
		var number_of_ids_2_ask_from_th_server_at_once_=50;
		var server_request_threshold_=20;
		var requests_queueing_threshold_=5; // It's for multithreading robustness.
		if(raudrohi_settings_debug_JavaScript===true){
			if(!raudrohi.widgets.g1.idcache.ok_2_call_constructor){
				raudrohi.tmg('8c1b6cae-5b28-416f-a2d4-8080a0219bd7',
					'One should use the static method '+
					'raudrohi.widgets.g1.idcache.get_instance(). '+
					'The raudrohi.widgets.g1.idcache is a singleton.');
			} // if
			//			if (server_request_threshold_<=requests_queueing_threshold_) {
			//				raudrohi.tmg('ff6bae4c-1f9a-4f65-b1d4-8080a0219bd7',
			//					'server_request_threshold_=='+server_request_threshold_+
			//					' <= requests_queueing_threshold_=='+
			//					'requests_queueing_threshold_');
			//			} // if
			if (requests_queueing_threshold_<1) {
				raudrohi.tmg('431259db-2afc-4d8a-bdc4-8080a0219bd7',
					'requests_queueing_threshold_=='+
					requests_queueing_threshold_+' < 1');
			} // if
		} // if
		var s_html_id_ ='raudrohi.widgets.g1.idcache_is_a_singleton';
		var pileofmethods_t1_ = new raudrohi.widgets.g1.pileofmethods_t1(
			self_public_,'raudrohi.widgets.g1.idcache_',s_html_id_);
		var prc_=self_public_.private_code_;

		this.instanteated=true;
		this.get_instance=function(){
			try{
				return self_public_;
			} catch (err){
				raudrohi.tmg('2b2bd448-9716-4291-95c4-8080a0219bd7',err);
			} // catch
		} // get_instance

		var ar_cahce_=[];
		var qu_requests_=new raudrohi.lang.htQueue();

		function request_from_server_if_necessary(){
			try{
				var n=number_of_ids_2_ask_from_th_server_at_once_;
				if(raudrohi_settings_debug_JavaScript===true){
					if (n<0) {
						raudrohi.tmg('3e047f32-954b-44bb-a2c4-8080a0219bd7',
							'n=='+n+' < 0');
					} // if
					if ((n-server_request_threshold_)<1) {
						raudrohi.tmg('18971b61-e45d-44a3-88c4-8080a0219bd7',
							'(n'+'-server_request_threshold_)=='+
							(n-server_request_threshold_)+' < 1 ');
					} // if
					if (server_request_threshold_<0) {
						raudrohi.tmg('14ca3bd6-ad0b-4a52-bdc4-8080a0219bd7',
							'server_request_threshold=='+
							server_request_threshold+' < 0');
					} // if
				} // if
				if (server_request_threshold_<ar_cahce_.length) {
					return;
				} // if
				var ht_data=raudrohi.base.pool_of_hashtables.get_empty_hashtable();
				ht_data.put('number_of_ids',""+n);
				prc_.threadjump_send("router2hostserver",
					'ajax_get_list_of_ids', ht_data, 'ids_from_server');
			} catch (err){
				raudrohi.tmg('3cd2a066-2a3d-4dfd-b5c4-8080a0219bd7',err);
			} // catch
		} // request_from_server_if_necessary


		prc_.customizable.optional.startup_hook=function(){
			try{
				request_from_server_if_necessary();
			} catch (err){
				raudrohi.tmg('00f79046-0200-4f5e-a2c4-8080a0219bd7',err);
			} // catch
		} // startup_hook


		this.hide = function(){}
		this.unhide = function(){};
		this.set_content =function(){};

		var thrjr_ids_from_server_x_=0;
		this.thrjr_.ids_from_server=function(ht_wrapper){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isObject(ht_wrapper,
						'ht_wrapper','ae7e8b4c-c7f0-4b39-92c4-8080a0219bd7');
				} // if
				var ht_data=ht_wrapper.get('data');
				var data_string=ht_data.get('commaseparated_list_of_ids');
				raudrohi.base.assert_isString(data_string,
					'data_string','6daf473d-2541-45a1-83c4-8080a0219bd7');
				var ar_new=raudrohi.base.commaseparated_list_2_array(data_string);
				thrjr_ids_from_server_x_=0;
				var ar_merged=ar_new.concat(ar_cahce_);
				var i=0;
				for(i=0;i<(thrjr_ids_from_server_x_+3);i++){
					// A bit dirty way to increase threading robustness.
					// There might be that while we were assembling the
					// ar_merged, some of the IDs were requested from the
					// ar_cache_.
					ar_merged.pop();
				} // for
				thrjr_ids_from_server_x_=0;
				ar_cahce_=ar_merged;
				raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_data);
				raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_wrapper);
			} catch (err){
				raudrohi.tmg('480ffd48-4d28-4026-94c4-8080a0219bd7',err);
			} // catch
		} // thrjr_.ids_from_server

		this.thrjr_.id_request=function(ht_wrapper){
			try{
				if(raudrohi_settings_debug_JavaScript===true){
					raudrohi.base.assert_isObject(ht_wrapper,
						'ht_wrapper','fac91b30-e30d-479f-a1c4-8080a0219bd7');
				} // if
				thrjr_ids_from_server_x_++;
				var return_in_stead_of_queueing=false;
				request_from_server_if_necessary();
				if(ar_cahce_.length<=requests_queueing_threshold_){
					if(return_in_stead_of_queueing===false){
						// Currently there's no code that actually
						// empties the qu_requests. So, this code here
						// is just a hint to the architecture. :)
						qu_requests_.push(ht_wrapper);
					} // if
					return;
				} // if
				var id_string_2_send=ar_cahce_.pop();
				var ht_data=ht_wrapper.get('data'); // returns a reference
				ht_data.put('id',id_string_2_send);
				prc_.threadjump_send_reply(ht_wrapper);
			} catch (err){
				raudrohi.tmg('63e9751d-56bc-4d5b-a4c4-8080a0219bd7',err);
			} // catch
		} // thrjr_.id_request

		// We'll start it up after it has been instanteated.
		this.set_readonly = function(true_if_readonly) {}
		prc_.startup_shutdown_handler_.startbutton_pushed();
		this.shutdown = pileofmethods_t1_.shutdown_by_calling_instance_public_hide_t1;

	} catch(err) {
		raudrohi.tmg('ca208f47-ea12-496a-85b4-8080a0219bd7', err);
	} // catch
} // raudrohi.widgets.g1.idcache

raudrohi.widgets.g1.idcache.ok_2_call_constructor=false;
raudrohi.widgets.g1.idcache.instanteated=false;
raudrohi.widgets.g1.idcache.get_instance=function(){
	try{
		if(!raudrohi.widgets.g1.idcache.instanteated){
			raudrohi.widgets.g1.idcache.ok_2_call_constructor=true;
			raudrohi.widgets.g1.idcache=new raudrohi.widgets.g1.idcache();
			raudrohi.widgets.g1.idcache.ok_2_call_constructor=false;
			raudrohi.widgets.g1.idcache.instanteated=true;
		//raudrohi.lang.phonebooth_dev_null.phone.call(
		//	raudrohi.widgets.g1.idcache.phone.get_phone_number(),
		//	'startup|||',42);
		} // if
		return raudrohi.widgets.g1.idcache;
	} catch (err){
		raudrohi.tmg('20bd5b55-c406-43ab-92b4-8080a0219bd7',err);
	} // catch
} //raudrohi.widgets.g1.idcache.instanteate

	//------------------------------------------------------------------------

	//------------------------------------------------------------------------
//=========================================================================

if(window.raudrohi_wg_processing_t1_exists!==true){
	window.raudrohi.wg_processing_t1={};
	window.raudrohi_wg_processing_t1_exists=true;
} // if
//-------------------------------------------------------------------------
raudrohi.wg_processing_t1.lc_s_sb_t="t";
raudrohi.wg_processing_t1.lc_s_sb_f="f";
raudrohi.wg_processing_t1.lc_s_b_prefix="b_";
raudrohi.wg_processing_t1.lc_s_dbf_sb_prefix="dbf_sb_";
raudrohi.wg_processing_t1.lc_s_dbf_prefix="dbf_";
raudrohi.wg_processing_t1.lc_s_i_prefix="i_";
raudrohi.wg_processing_t1.lc_s_dbf_i_prefix="dbf_i_";
raudrohi.wg_processing_t1.lc_s_setsuffix="_set";

// Returns a string.
raudrohi.wg_processing_t1.s_key_field_set=function(ob_widget){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isObject(ob_widget,'ob_widget',
				'581436d1-e07c-4a03-9d10-1180a0219bd7');
		} // if
		var s_out=raudrohi.wg_processing_t1.lc_s_dbf_sb_prefix+
		ob_widget.s_field_name_in_parent+
		raudrohi.wg_processing_t1.lc_s_setsuffix;
		return s_out;
	} catch (err){
		raudrohi.tmg('5f608c63-0fba-45f4-a110-1180a0219bd7',err);
	} // catch
} // s_key_field_set

raudrohi.wg_processing_t1.s_key_subfield_set=function(ob_widget,
	s_subfield_name){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isObject(ob_widget,'ob_widget',
				'2859ba11-89f5-475d-ae5f-1180a0219bd7');
			raudrohi.base.assert_isString(s_subfield_name,'s_subfield_name',
				'4baa3561-b5de-4d2f-851f-1180a0219bd7');
		} // if
		var x_hack={};
		x_hack.s_field_name_in_parent=ob_widget.s_field_name_in_parent+
		"_"+s_subfield_name;
		var s_key_subfield_set=raudrohi.wg_processing_t1.s_key_field_set(x_hack);
		return s_key_subfield_set;
	} catch (err){
		raudrohi.tmg('0132a08e-cbc8-44f8-80cf-1180a0219bd7',err);
	} // catch
} // raudrohi.wg_processing_t1.s_key_subfield_set

// Returns a string.
raudrohi.wg_processing_t1.s_key_field=function(ob_widget){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isObject(ob_widget,'ob_widget',
				'a52f1a91-f371-425e-bb3f-1180a0219bd7');
		} // if
		var s_out=raudrohi.wg_processing_t1.lc_s_dbf_prefix+
		ob_widget.s_field_name_in_parent;
		return s_out;
	} catch (err){
		raudrohi.tmg('a1c52829-571b-4a8a-b74f-1180a0219bd7',err);
	} // catch
} // s_key_field

raudrohi.wg_processing_t1.s_key_field_is_fd=function(ob_widget){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isObject(ob_widget,'ob_widget',
				'38a4d374-95b4-4457-845f-1180a0219bd7');
		} // if
		var s_field_name=ob_widget.s_field_name_in_parent;
		var s_out=raudrohi.wg_processing_t1.lc_s_dbf_sb_prefix+
		s_field_name+"_is_a_floating_point_number";
		return s_out;
	} catch (err){
		raudrohi.tmg('cd39ff87-2148-48c5-ba7f-1180a0219bd7',err);
	} // catch
} // raudrohi.wg_processing_t1.s_key_field_is_fd_2

raudrohi.wg_processing_t1.dbfcreate_s_t1=function(
	ht_dbf_values,s_field_name,s_string_value,b_trim){
	try{
		b_trim = typeof(b_trim) !== 'undefined' ? b_trim : true;
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isObject(ht_dbf_values,'ht_dbf_values',
				'5fb123d3-ebba-4f41-8e2f-1180a0219bd7');
			raudrohi.base.assert_isString(s_field_name,'s_field_name',
				'511004c2-0d6b-4017-ae3f-1180a0219bd7');
			raudrohi.base.assert_isString(s_string_value,'s_string_value',
				'721c7b45-3e31-44f5-963f-1180a0219bd7');
			raudrohi.base.assert_isBoolean(b_trim,'b_trim',
				'c23b82dd-ba32-41e0-941f-1180a0219bd7');
		} // if
		var s0=null;
		if(b_trim===true){
			s0=""+raudrohi.adapter.trim(s_string_value);
		} else {
			s0=""+s_string_value;
		} // else
		ht_dbf_values.put(raudrohi.wg_processing_t1.lc_s_dbf_prefix+
			s_field_name,s0);
		var s_key_field_set=raudrohi.wg_processing_t1.lc_s_dbf_sb_prefix+
		s_field_name+raudrohi.wg_processing_t1.lc_s_setsuffix;
		if(0<s0.length){
			ht_dbf_values.put(s_key_field_set,""+
				raudrohi.wg_processing_t1.lc_s_sb_t);
		}else{
			ht_dbf_values.put(s_key_field_set,""+
				raudrohi.wg_processing_t1.lc_s_sb_f);
		} // else
	} catch (err){
		raudrohi.tmg('49f72033-96be-44d8-882f-1180a0219bd7',err);
	} // catch
} // raudrohi.wg_processing_t1.dbfcreate_s_t1

raudrohi.wg_processing_t1.dbfcreate_s_fd_t1=function(
	ht_dbf_values,s_field_name,s_whole_number_candidate,b_trim){
	try{
		b_trim = typeof(b_trim) !== 'undefined' ? b_trim : true;
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isObject(ht_dbf_values,'ht_dbf_values',
				'c25152f9-5a71-493d-8d5f-1180a0219bd7');
			raudrohi.base.assert_isString(s_field_name,'s_field_name',
				'223abe73-b8b7-42ce-8e3e-1180a0219bd7');
			raudrohi.base.assert_isNumber(s_whole_number_candidate,
				's_whole_number_candidate',
				'554d5d1c-a17c-428e-ab9e-1180a0219bd7');
			raudrohi.base.assert_isBoolean(b_trim,'b_trim',
				'82281efc-738f-4309-ac2e-1180a0219bd7');
		} // if
		var s0=null;
		if(b_trim===true){
			s0=""+raudrohi.adapter.trim(s_whole_number_candidate);
		} else {
			s0=""+s_whole_number_candidate;
		} // else
		ht_dbf_values.put(raudrohi.wg_processing_t1.lc_sprefix+
			s_field_name,s0);
		// The b_blabla_set is probably reevaluated at the
		// db side, but it's still inserted to the hashtable
		// to allow JavaScript side to use it, should there be a
		// need for it.
		var s_key_field_set=raudrohi.wg_processing_t1.lc_s_b_prefix+
		s_field_name+raudrohi.wg_processing_t1.lc_s_setsuffix;
		var s_key_field_is_fd="s_b_"+s_field_name+"_is_a_floating_point_number";
		if(0<s0.length){
			ht_dbf_values.put(s_key_field_set,""+
				raudrohi.wg_processing_t1.lc_s_sb_t);
			var ht_tmp=raudrohi.base.string2float(s0);
			if((ht_tmp.get('b_failure'))===true){
				ht_dbf_values.put(s_key_field_is_fd,""+
					raudrohi.wg_processing_t1.lc_s_sb_f);
			} else {
				ht_dbf_values.put(s_key_field_is_fd,""+
					raudrohi.wg_processing_t1.lc_s_sb_t);
			} // else
			raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_tmp);
		}else{
			ht_dbf_values.put(s_key_field_set,""+
				raudrohi.wg_processing_t1.lc_s_sb_f);
			ht_dbf_values.put(s_key_field_is_fd,""+
				raudrohi.wg_processing_t1.lc_s_sb_f);
		} // else
	} catch (err){
		raudrohi.tmg('782408f2-05ea-43de-8f1e-1180a0219bd7',err);
	} // catch
} // raudrohi.wg_processing_t1.dbfcreate_s_fd_t1


//------------------------------------------------------------------------
raudrohi.wg_processing_t1.dbfcreate_textarea_t1=function(
	ht_dbf_values,ob_widget_of_type_textarea_t1,b_trim){
	try{
		b_trim = typeof(b_trim) !== 'undefined' ? b_trim : true;
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isObject(ht_dbf_values,'ht_dbf_values',
				'84e72f74-602a-43f4-b64e-1180a0219bd7');
			raudrohi.base.assert_isObject(ob_widget_of_type_textarea_t1,
				'ob_widget_of_type_textarea_t1',
				'71c062f4-7c7e-412c-b52e-1180a0219bd7');
			raudrohi.base.assert_isBoolean(b_trim,'b_trim',
				'4dac7d51-3f75-4bab-af4e-1180a0219bd7');
		} // if
		var s0=ob_widget_of_type_textarea_t1.get_content();
		raudrohi.wg_processing_t1.dbfcreate_s_t1(ht_dbf_values,
			ob_widget_of_type_textarea_t1.s_field_name_in_parent,
			s0,b_trim);
	} catch (err){
		raudrohi.tmg('81eab0fe-3d76-4126-851e-1180a0219bd7',err);
	} // catch
} // raudrohi.wg_processing_t1.dbfcreate_textarea_t1

raudrohi.wg_processing_t1.dbfcreate_menu_t1=function(
	ht_dbf_values,ob_widget_of_type_menu_t1,b_trim){
	try{
		b_trim = typeof(b_trim) !== 'undefined' ? b_trim : true;
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isObject(ht_dbf_values,'ht_dbf_values',
				'46aab063-6283-4df3-ba2e-1180a0219bd7');
			raudrohi.base.assert_isObject(ob_widget_of_type_menu_t1,
				'ob_widget_of_type_menu_t1',
				'35a7a7e1-84fa-4e51-9f2e-1180a0219bd7');
			raudrohi.base.assert_isBoolean(b_trim,'b_trim',
				'24b29961-5c60-4436-a51e-1180a0219bd7');
		} // if
		var mi=ob_widget_of_type_menu_t1.get_selected_menuitem();
		var s_key_field_set=raudrohi.wg_processing_t1.s_key_field_set(
			ob_widget_of_type_menu_t1);
		var s_key_field=raudrohi.wg_processing_t1.s_key_field(
			ob_widget_of_type_menu_t1);
		if(mi===null){
			ht_dbf_values.put(s_key_field_set,
				""+raudrohi.wg_processing_t1.lc_s_sb_f);
			ht_dbf_values.put(s_key_field,"");
			return;
		}else{
			ht_dbf_values.put(s_key_field_set,""+
				raudrohi.wg_processing_t1.lc_s_sb_t);
		} // else

		var s0=""+mi.value;
		var s1=null;
		if(b_trim===true){
			s1=raudrohi.adapter.trim(s0);
		} else {
			s1=s0;
		} // else
		ht_dbf_values.put(s_key_field,s1);
	} catch (err){
		raudrohi.tmg('4bb019f4-f045-4480-9e1d-1180a0219bd7',err);
	} // catch
} // raudrohi.wg_processing_t1.dbfcreate_menu_t1


raudrohi.wg_processing_t1.dbfcreate_partialmenu_t1=function(
	ht_dbf_values,ob_widget_of_type_partialmenu_t1,b_trim){
	try{
		b_trim = typeof(b_trim) !== 'undefined' ? b_trim : true;
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isObject(ht_dbf_values,'ht_dbf_values',
				'5e5cb405-92ad-4c23-851d-1180a0219bd7');
			raudrohi.base.assert_isObject(ob_widget_of_type_partialmenu_t1,
				'ob_widget_of_type_partialmenu_t1',
				'5fec3822-4d5d-45a9-bd5d-1180a0219bd7');
			raudrohi.base.assert_isBoolean(b_trim,'b_trim',
				'b20e4c05-370b-4ab3-9f3d-1180a0219bd7');
		} // if
		var ob_widget=ob_widget_of_type_partialmenu_t1;
		var s_key_field_set=raudrohi.wg_processing_t1.s_key_field_set(
			ob_widget);
		var s_key_field_set_s_label2=raudrohi.wg_processing_t1.s_key_field_set(
			ob_widget)+"_s_label2";
		var s_key_s_labelX_prefix=raudrohi.wg_processing_t1.s_key_field(
			ob_widget);
		var s_key_s_label1=s_key_s_labelX_prefix+"_s_label1";
		var s_key_s_label2=s_key_s_labelX_prefix+"_s_label2";
		var ht=ob_widget.get_content();
		if(ht===null){
			ht_dbf_values.put(s_key_field_set,
				""+raudrohi.wg_processing_t1.lc_s_sb_f);
			ht_dbf_values.put(s_key_field_set_s_label2,
				""+raudrohi.wg_processing_t1.lc_s_sb_f);
			ht_dbf_values.put(s_key_s_label1,"");
			ht_dbf_values.put(s_key_s_label2,"");
			return;
		}else{
			ht_dbf_values.put(s_key_field_set,""+
				raudrohi.wg_processing_t1.lc_s_sb_t);
		} // else

		var s0=null;
		var s1=ht.get("s_label1");
		var s2=ht.get("s_label2");
		if(b_trim===true){
			s0=raudrohi.adapter.trim(s1);
			s1=s0;
			s0=raudrohi.adapter.trim(s2);
			s2=s0;
		} // if
		ht_dbf_values.put(s_key_s_label1,s1);
		ht_dbf_values.put(s_key_s_label2,s2);
		raudrohi.base.pool_of_hashtables.return_used_hashtable(ht);
		if(0<s2.length){
			ht_dbf_values.put(s_key_field_set_s_label2,
				""+raudrohi.wg_processing_t1.lc_s_sb_t);
		}else{
			ht_dbf_values.put(s_key_field_set_s_label2,
				""+raudrohi.wg_processing_t1.lc_s_sb_f);
		} // else
	} catch (err){
		raudrohi.tmg('4781a504-64fa-4107-9c1d-1180a0219bd7',err);
	} // catch
} // raudrohi.wg_processing_t1.dbfcreate_partialmenu_t1


raudrohi.wg_processing_t1.dbfcreate_partialmenu_t1_fd=function(
	ht_dbf_values,ob_widget_of_type_partialmenu_t1,b_trim){
	try{
		b_trim = typeof(b_trim) !== 'undefined' ? b_trim : true;
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isObject(ht_dbf_values,'ht_dbf_values',
				'370d8c12-6a5f-4e54-853d-1180a0219bd7');
			raudrohi.base.assert_isObject(ob_widget_of_type_partialmenu_t1,
				'ob_widget_of_type_partialmenu_t1',
				'2e7e8262-51bc-48c3-831d-1180a0219bd7');
			raudrohi.base.assert_isBoolean(b_trim,'b_trim',
				'1e16c734-a5bf-4dfa-a53d-1180a0219bd7');
		} // if
		var ob_widget=ob_widget_of_type_partialmenu_t1;
		raudrohi.wg_processing_t1.dbfcreate_partialmenu_t1(ht_dbf_values,
			ob_widget,b_trim);
		var s_key_field_is_fd_s_label2=raudrohi.wg_processing_t1.s_key_field_is_fd(
			ob_widget)+"_s_label2";

		var s_key_field_set=raudrohi.wg_processing_t1.s_key_field_set(
			ob_widget);
		if(ht_dbf_values.get(s_key_field_set)===false){
			ht_dbf_values.put(s_key_field_is_fd_s_label2,
				""+raudrohi.wg_processing_t1.lc_s_sb_f);
			return;
		} // else

		var s_key_field_set_s_label2=raudrohi.wg_processing_t1.s_key_field_set(
			ob_widget)+"_s_label2";
		if(ht_dbf_values.get(s_key_field_set_s_label2)===false){
			ht_dbf_values.put(s_key_field_is_fd_s_label2,
				""+raudrohi.wg_processing_t1.lc_s_sb_f);
			return;
		} // else

		var s_key_field_s_label2=raudrohi.wg_processing_t1.s_key_field(
			ob_widget)+"_s_label2";
		var s_label2=ht_dbf_values.get(s_key_field_s_label2);

		var ht=raudrohi.base.string2float(s_label2);
		if((ht.get('b_failure'))===true){
			ht_dbf_values.put(s_key_field_is_fd_s_label2,
				""+raudrohi.wg_processing_t1.lc_s_sb_f);
		} else {
			ht_dbf_values.put(s_key_field_is_fd_s_label2,
				""+raudrohi.wg_processing_t1.lc_s_sb_t);
		} // else
		raudrohi.base.pool_of_hashtables.return_used_hashtable(ht);
	} catch (err){
		raudrohi.tmg('303d9464-f047-4270-922d-1180a0219bd7',err);
	} // catch
} // raudrohi.wg_processing_t1.dbfcreate_partialmenu_t1_fd

//------------------------------------------------------------------------
// Returns a boolean.
raudrohi.wg_processing_t1.b_subfield_set=function(ob_widget,s_subfield_name,
	ht_dbf_values){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isObject(ob_widget,'ob_widget',
				'4920bcf4-8c1b-4097-924d-1180a0219bd7');
			raudrohi.base.assert_isString(s_subfield_name,'s_subfield_name',
				'411ac791-0d34-452d-913d-1180a0219bd7');
			raudrohi.base.assert_isObject(ht_dbf_values,'ht_dbf_values',
				'34b0ef31-c5c9-4340-8e3c-1180a0219bd7');
			if(s_subfield_name.length==0){
				raudrohi.tmg('591cdfb5-8a91-4e4e-b04c-1180a0219bd7',
					"s_subfield_name.length==0");
			} // if
		} // if
		var x_hack={};
		x_hack.s_field_name_in_parent=ob_widget.s_field_name_in_parent+
		"_"+s_subfield_name;
		var s_key_field_set=raudrohi.wg_processing_t1.s_key_field_set(x_hack);
		if(ht_dbf_values.containsKey(s_key_field_set)===false){
			if(raudrohi_settings_debug_JavaScript===true){
				raudrohi.tmg('487d6ef3-2763-49a7-b91c-1180a0219bd7',
					"Field \""+s_key_field_set+"\" is missing from the "+
					"content collection.");
			} else{
				return false; // It's not so bad that one should totally crash.
			} // else
		} // if
		var b_out=false;
		if(ht_dbf_values.get(s_key_field_set)==="true"){
			b_out=true;
		} // if
		return b_out;
	} catch (err){
		raudrohi.tmg('85394919-28c6-4498-9e5c-1180a0219bd7',err);
	} // catch
} // raudrohi.wg_processing_t1.b_subfield_set

// It crashes, if the field does not exist. Client
// code can count on the crashing. In the context of
// this method, actually, the in the context of the wg_processing_t1
// in general, fields can exist without being set.
raudrohi.wg_processing_t1.get_subfield=function(ob_widget,s_subfield_name,
	ht_dbf_values){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isObject(ob_widget,'ob_widget',
				'51e9f6e5-c496-4118-b85c-1180a0219bd7');
			raudrohi.base.assert_isString(s_subfield_name,'s_subfield_name',
				'23d38a64-004d-4ef5-9f1c-1180a0219bd7');
			raudrohi.base.assert_isObject(ht_dbf_values,'ht_dbf_values',
				'f84366e6-88c9-4e82-ba2c-1180a0219bd7');
			if(s_subfield_name.length==0){
				raudrohi.tmg('046d3470-af5c-4022-815c-1180a0219bd7',
					"s_subfield_name.length==0");
			} // if
		} // if
		var x_hack={};
		x_hack.s_field_name_in_parent=ob_widget.s_field_name_in_parent+
		"_"+s_subfield_name;
		var s_key_field=raudrohi.wg_processing_t1.s_key_field(x_hack);
		if(ht_dbf_values.containsKey(s_key_field)===false){
			raudrohi.tmg('3e9cc5e1-9c6d-4983-b71c-1180a0219bd7',
				"Field \""+s_key_field+"\" is missing from the "+
				"content collection.");
		} // if
		var x_out=ht_dbf_values.get(s_key_field);
		return x_out;
	} catch (err){
		raudrohi.tmg('c43c7195-6d43-4598-bb2c-1180a0219bd7',err);
	} // catch
} // raudrohi.wg_processing_t1.get_subfield

//------------------------------------------------------------------------

raudrohi.wg_processing_t1.veriff_sb_t_t1=function(
	ht_content,s_key,s_err_msg){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isObject(ht_content,'ht_content',
				'5f16cd25-52b6-488c-962c-1180a0219bd7');
			raudrohi.base.assert_isString(s_key,'s_key',
				'53ecc2c2-dc37-46b0-974b-1180a0219bd7');
			raudrohi.base.assert_isString(s_err_msg,'s_err_msg',
				'5fe08ef2-d2da-46d7-bf3b-1180a0219bd7');
			if(ht_content.containsKey(s_key)!==true){
				raudrohi.tmg('37a4c95e-5310-4ef9-83fb-1180a0219bd7',
					'ht_content does not contain key s_key=="'+s_key+'".');
			} // if
		} // if
		var x_out={};
		x_out.b_verification_failed=false;
		x_out.s_msg="";
		var s0=ht_content.get(s_key);
		if(s0!='t'){
			x_out.b_verification_failed=true;
			x_out.s_msg=s_err_msg;
		} // if
		return x_out;
	} catch (err){
		raudrohi.tmg('13cf8324-7b60-4d8e-882b-1180a0219bd7',err);
	} // catch
} // raudrohi.wg_processing_t1.veriff_sb_t_t1

raudrohi.wg_processing_t1.veriff_txt_fd_t1=function(
	ht_content,s_key,s_err_msg){
	try{
		if(raudrohi_settings_debug_JavaScript===true){
			raudrohi.base.assert_isObject(ht_content,'ht_content',
				'55d3d114-421c-45b2-a94b-1180a0219bd7');
			raudrohi.base.assert_isString(s_key,'s_key',
				'b7581633-a9f3-437d-b62b-1180a0219bd7');
			raudrohi.base.assert_isString(s_err_msg,'s_err_msg',
				'490856c3-a819-4407-ae4b-1180a0219bd7');
			if(ht_content.containsKey(s_key)!==true){
				raudrohi.tmg('1f35c5f3-a213-4775-8e4b-1180a0219bd7',
					'ht_content does not contain key s_key=="'+s_key+'".');
			} // if
		} // if
		var x_out={};
		x_out.s_msg="";
		var s0=ht_content.get(s_key);
		var ht_fl=raudrohi.base.string2float(s0);
		x_out.b_verification_failed=ht_fl.get('b_failure');
		raudrohi.base.pool_of_hashtables.return_used_hashtable(ht_fl);
		if(x_out.b_verification_failed!==false){
			x_out.s_msg=s_err_msg;
		} // if
		return x_out;
	} catch (err){
		raudrohi.tmg('27839d83-05b4-49e7-983b-1180a0219bd7',err);
	} // catch
} // raudrohi.wg_processing_t1.veriff_txt_fd_t1

//------------------------------------------------------------------------
//=========================================================================

// This function is meant to be called after the whole raudrohi library
// and its dependencies have been downloaded and the raudrohi adapter
// has been initialized. It initializes the raudrohi library's internal
// data structures. It's called from the raudrohi_adapter_v19.js
raudrohi.internal_constructor=function(){
	try{
		raudrohi.cache.init();
		raudrohi.widgets.g1.phonebooth_t1=new raudrohi.widgets.g1.phonebooth_t1(
			'raudrohi.widgets.g1.phonebooth_t1');
		raudrohi.widgets.g1.button_t1_pool=new raudrohi.base.pool(
			new raudrohi.widgets.g1.button_t1_factory(),
			new raudrohi.widgets.g1.button_t1_resetter());

	// Currently it's executed prior to the application_main_function,
	// this method but needs to be improved, because
	// one needs the setup data from the server before some of the
	// structures can be initialized.

	//raudrohi.widgets.g1.router2hostserver.get_instance();
	//raudrohi.widgets.g1.idcache.get_instance();
	//raudrohi.widgets.g1.uploadenforcer_t1=new raudrohi.widgets.g1.uploadenforcer_t1();

	} catch (err){
		raudrohi.tmg('4f05bf17-c66b-4761-b50d-6330a0219bd7',err);
	} // catch
} // internal_constructor


// If make_no_assumptions_about_setup_availability==true, the library
// gets initiated with default setup values. Otherwise it is assumed
// that the server provides setup info.
raudrohi.run=function(make_no_assumptions_about_setup_availability,
	application_main_function){
	try{
		raudrohi.application_main_function=application_main_function;
		raudrohi.initiate_adapter(make_no_assumptions_about_setup_availability);
	} catch (err){
		raudrohi.tmg('3009b853-0f07-4f1f-920d-6330a0219bd7',err);
	} // catch
} // raudrohi.run
